bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  this);  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  this);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  t,  this);	      NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	3	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Deque<BasicBlock>,ReferenceCollectingCallback)  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  this);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  this);	      NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Deque<BasicBlock>,ReferenceCollectingCallback)	3	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this);  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  t,  this);	      NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  root	3	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  blockStack);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceCollectingCallback,Deque<BasicBlock>)  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  blockStack);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  this,  blockStack);	      NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceCollectingCallback,Deque<BasicBlock>)	3	None	replace
5	[BUG]  [BUGGY]  Predicate  sourceFile  =  referenceMap.getSourceReference();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  referenceMap.getSourceReference();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  referenceMap.getSourceReference();	      Predicate    sourceFile    =    t.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
6	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceReference();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  compiler.getSourceReference();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceReference();	      Predicate    sourceFile    =    t.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
7	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.sourceFile.getSourceReference();  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  t.sourceFile.getSourceReference();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.sourceFile.getSourceReference();	      Predicate    sourceFile    =    t.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	6	None	replace
8	[BUG]  [BUGGY]  Predicate  sourceFile  =  references.getSourceReference();  [CE]  cannot  find  symbol  references  [FE]                        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  references.getSourceReference();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  references.getSourceReference();	      Predicate    sourceFile    =    t.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  references	6	None	replace
9	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	10	None	replace
10	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	10	None	replace
11	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  parent	10	None	replace
12	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [CE]  cannot  find  symbol  baseUri  [FE]                    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	10	None	replace
13	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	7	None	replace
14	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	7	None	replace
15	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [CE]  cannot  find  symbol  parent  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  parent	7	None	replace
16	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [CE]  cannot  find  symbol  baseUri  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	7	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(!isFunction);  [CE]  cannot  find  symbol  isFunction  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Preconditions.checkState(!isFunction);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isFunction);	      Preconditions.checkState(!isLoop);    	non-compiled	[CE]  cannot  find  symbol  isFunction	19	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(!isHoisted);  [CE]  cannot  find  symbol  isHoisted  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Preconditions.checkState(!isHoisted);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isHoisted);	      Preconditions.checkState(!isLoop);    	non-compiled	[CE]  cannot  find  symbol  isHoisted	19	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(!blockStack.isEmpty());	      Preconditions.checkState(!isLoop);    	compilable	  [FE]  AssertionFailedError  	19	23	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());	      Preconditions.checkState(!isLoop);    	compilable	  [FE]  AssertionFailedError  	19	23	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(!hasFunction);  [CE]  cannot  find  symbol  hasFunction  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Preconditions.checkState(!hasFunction);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!hasFunction);	      Preconditions.checkState(!isLoop);    	non-compiled	[CE]  cannot  find  symbol  hasFunction	19	None	replace
22	[BUG]  [BUGGY]  Node  originalRoot  =  t.getReferenceRoot();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Node  originalRoot  =  t.getReferenceRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getReferenceRoot();	      Node    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
23	[BUG]  [BUGGY]  Node  originalRoot  =  t.getAssignedRoot();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Node  originalRoot  =  t.getAssignedRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getAssignedRoot();	      Node    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
24	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwner();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Node  originalRoot  =  t.getOwner();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwner();	      Node    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
25	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwnScope();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Node  originalRoot  =  t.getOwnScope();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwnScope();	      Node    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,NodeTraversal)  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  t);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  t);	      NodeTraversal.traverse(compiler,    t,    blockStack);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,NodeTraversal)	4	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack);  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  t,  blockStack);	      NodeTraversal.traverse(compiler,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  root	4	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack);	      NodeTraversal.traverse(compiler,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	4	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  blockStack);  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  blockStack);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  root,  blockStack);	      NodeTraversal.traverse(compiler,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  root	4	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack);	      NodeTraversal.traverse(compiler,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	4	None	replace
31	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	21	None	replace
32	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	21	None	replace
33	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [CE]  cannot  find  symbol  parent  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  parent	21	None	replace
34	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter);  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter);	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	2	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceMapWrapper(t));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceMapWrapper(t));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceMapWrapper(t));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	2	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceMapWrapper(referenceMap));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Map<Var,ReferenceCollection>,ReferenceMapWrapper)  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Map<Var,ReferenceCollection>,ReferenceMapWrapper)	2	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	2	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	2	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	13	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	13	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  component,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  component  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  component,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  component,  new  ReferenceCollectionWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  component	13	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Deque<BasicBlock>,ReferenceMapWrapper)  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Deque<BasicBlock>,ReferenceMapWrapper)	11	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  root  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  blockStack,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	11	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseBlock,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  baseBlock  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  baseBlock,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseBlock,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseBlock	11	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceMapWrapper(blockStack));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceMapWrapper(blockStack));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceMapWrapper(blockStack));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	11	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	15	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	15	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  inputId));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  inputId));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  inputId));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isLoop));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isLoop));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isLoop));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
53	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));  [CE]  cannot  find  symbol  isLoop  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  isLoop	8	None	replace
54	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	8	None	replace
55	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));  [CE]  cannot  find  symbol  baseUri  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  baseUri	8	None	replace
56	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	8	None	replace
57	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	8	None	replace
58	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root));  [CE]  cannot  find  symbol  root  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  root	9	None	replace
59	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));  [CE]  cannot  find  symbol  baseBlock  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  baseBlock	9	None	replace
60	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [CE]  cannot  find  symbol  baseUri  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  baseUri	9	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(t));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(t));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(t));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  references,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  references  [FE]                    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  references,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  references,  new  ReferenceCollectionWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  references	5	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
65	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  parent.getSourceFile();  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  parent.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  parent.getSourceFile();	      StaticSourceFile    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  parent	20	None	replace
66	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.sourceFile.getSourceFile();  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  t.sourceFile.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.sourceFile.getSourceFile();	      StaticSourceFile    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	20	None	replace
67	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getSourceFile();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  referenceMap.getSourceFile();	      StaticSourceFile    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
68	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getSourceFile();	      StaticSourceFile    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  new  Reference());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  new  Reference());	      NodeTraversal.traverse(compiler,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	14	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  new  Reference());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  blockStack,  new  Reference());	      NodeTraversal.traverse(compiler,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  root	14	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  Reference());  [CE]  no  suitable  constructor  found  for  Reference()  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  Reference());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  new  Reference());	      NodeTraversal.traverse(compiler,    blockStack,    new    Reference());    	non-compiled	[CE]  no  suitable  constructor  found  for  Reference()	14	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  new  Reference());  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  new  Reference());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  new  Reference());	      NodeTraversal.traverse(compiler,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	14	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  Reference());  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  Reference());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  Reference());	      NodeTraversal.traverse(compiler,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	14	None	replace
74	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.sourceFile.getSourceFile();  [CE]  cannot  find  symbol  sourceFile  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  t.sourceFile.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.sourceFile.getSourceFile();	      Predicate    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	1	None	replace
75	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceFile();	      Predicate    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
76	[BUG]  [BUGGY]  Predicate  sourceFile  =  varFilter.getSourceFile();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  varFilter.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  varFilter.getSourceFile();	      Predicate    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
77	[BUG]  [BUGGY]  Predicate  sourceFile  =  referenceMap.getSourceFile();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  referenceMap.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  referenceMap.getSourceFile();	      Predicate    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
78	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getScopeRoot();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  referenceMap.getScopeRoot();	      StaticSourceFile    sourceFile    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
79	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getScopeRoot();	      StaticSourceFile    sourceFile    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
80	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  baseScope.getScopeRoot();  [CE]  cannot  find  symbol  baseScope  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  baseScope.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  baseScope.getScopeRoot();	      StaticSourceFile    sourceFile    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  baseScope	18	None	replace
81	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  scope.getScopeRoot();  [CE]  cannot  find  symbol  scope  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  scope.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  scope.getScopeRoot();	      StaticSourceFile    sourceFile    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  scope	18	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  new  ReferenceCollection());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  new  ReferenceCollection());	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	12	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  ReferenceCollection());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Deque<BasicBlock>,ReferenceCollection)  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  ReferenceCollection());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  new  ReferenceCollection());	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Deque<BasicBlock>,ReferenceCollection)	12	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  new  ReferenceCollection());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  blockStack,  new  ReferenceCollection());	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  root	12	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  blockStack,  new  ReferenceCollection());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,Deque<BasicBlock>,ReferenceCollection)  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  blockStack,  new  ReferenceCollection());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  blockStack,  new  ReferenceCollection());	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,Deque<BasicBlock>,ReferenceCollection)	12	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  n  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  new  ReferenceCollection());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  blockStack,  new  ReferenceCollection());	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  n	12	None	replace
87	[BUG]  [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	        Node    originalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	16	None	add
88	[BUG]  [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	        Node    originalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot());	  	non-compiled	[CE]  ';'  expected	16	None	add
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	        Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();	  	compilable	  [FE]  AssertionFailedError  	16	1	add
90	[BUG]  [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	        Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();	  	compilable	  [FE]  AssertionFailedError  	16	1	add
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  t,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	2	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  root  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  t,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	2	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  sourceFile));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  sourceFile));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
94	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwnScopeRoot();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Node  originalRoot  =  t.getOwnScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwnScopeRoot();	      Node    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  new  ReferenceCollection());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  new  ReferenceCollection());	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	12	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	11	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  blockStack,  new  ReferenceMapWrapper(referenceMap));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
98	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  varFilter.getSourceFile();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  varFilter.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  varFilter.getSourceFile();	      StaticSourceFile    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
99	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  baseUri.getSourceFile();  [CE]  cannot  find  symbol  baseUri  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  baseUri.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  baseUri.getSourceFile();	      StaticSourceFile    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  baseUri	20	None	replace
100	[BUG]  [BUGGY]  Predicate  sourceFile  =  varFilter.getSourceReference();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  varFilter.getSourceReference();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  varFilter.getSourceReference();	      Predicate    sourceFile    =    t.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
101	[BUG]  [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  Predicate  originalRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  Predicate  originalRoot  =  t.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	        Node    originalRoot    =    t.getScopeRoot();    Predicate  originalRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	16	None	add
102	[BUG]  [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]      Node  originalRoot  =  t.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	        Node    originalRoot    =    t.getScopeRoot();    NameNode  originalRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
103	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  baseUri.getScopeRoot();  [CE]  cannot  find  symbol  baseUri  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  baseUri.getScopeRoot();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  baseUri.getScopeRoot();	      StaticSourceFile    sourceFile    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  baseUri	18	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  behavior);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  behavior);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  behavior);	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
106	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [CE]  cannot  find  symbol  baseUri  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	21	None	replace
107	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId));  [CE]  cannot  find  symbol  inputId  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  inputId	21	None	replace
108	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	9	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  sourceFile);  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  sourceFile);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  sourceFile);	      NodeTraversal.traverse(compiler,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	4	None	replace
110	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter);  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter);	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
111	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	8	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  root  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  this);	      NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  root	3	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  new  Reference());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  blockStack,  new  Reference());	      NodeTraversal.traverse(compiler,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  n	14	None	replace
114	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(!hasErrors);  [CE]  cannot  find  symbol  hasErrors  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Preconditions.checkState(!hasErrors);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!hasErrors);	      Preconditions.checkState(!isLoop);    	non-compiled	[CE]  cannot  find  symbol  hasErrors	19	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(!statement.isHoisted);  [CE]  cannot  find  symbol  statement  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Preconditions.checkState(!statement.isHoisted);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!statement.isHoisted);	      Preconditions.checkState(!isLoop);    	non-compiled	[CE]  cannot  find  symbol  statement	19	None	replace
117	[BUG]  [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  Reference(),  this);  [CE]  no  suitable  constructor  found  for  Reference()  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  Reference(),  this);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  Reference(),  this);	      NodeTraversal.traverse(compiler,    blockStack,    new    Reference());    	non-compiled	[CE]  no  suitable  constructor  found  for  Reference()	14	None	replace
119	[BUG]  [BUGGY]  Predicate  sourceFile  =  references.getSourceFile();  [CE]  cannot  find  symbol  references  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Predicate  sourceFile  =  references.getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  references.getSourceFile();	      Predicate    sourceFile    =    t.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  references	1	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile);  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  sourceFile);	      NodeTraversal.traverse(compiler,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	4	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  pattern);  [CE]  cannot  find  symbol  pattern  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  pattern);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  pattern);	      NodeTraversal.traverse(compiler,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  pattern	4	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(t));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(t));  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(t));	      NodeTraversal.traverse(compiler,    t,    blockStack);    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	4	None	replace
123	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  t);	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
124	[BUG]  [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceMapWrapper,NodeTraversal)  [FE]        AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(referenceMap),  t);	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceMapWrapper,NodeTraversal)	11	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);	      NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  t,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,NodeTraversal,ReferenceCollectingCallback)  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  t,  this);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  t,  this);	      NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,NodeTraversal,ReferenceCollectingCallback)	3	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  t);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  t);	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseBlock,  new  ReferenceCollection());  [CE]  cannot  find  symbol  baseBlock  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  baseBlock,  new  ReferenceCollection());  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseBlock,  new  ReferenceCollection());	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  baseBlock	12	None	replace
130	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwnerFile();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  Node  originalRoot  =  t.getOwnerFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwnerFile();	      Node    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
131	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().getSourceFile();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().getSourceFile();  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.getScopeRoot().getSourceFile();	      StaticSourceFile    sourceFile    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
132	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
133	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));  [CE]  cannot  find  symbol  referenceRoot  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));  [BUGGY]    }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  referenceRoot	10	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  t);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  t);  [BUGGY]    behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  t);	      NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
