bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Predicate  sourceFile  =  t.getSourceFile();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    Predicate  sourceFile  =  t.getSourceFile();  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    Predicate  sourceFile  =  t.getSourceFile();		non-compiled	[CE]  cannot  find  symbol	2	None	add
2	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  t,  new  ReferenceMapWrapper(referenceMap));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceMapWrapper)  [FE]      AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    NodeTraversal.traverse(compiler,  t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    NodeTraversal.traverse(compiler,  t,  new  ReferenceMapWrapper(referenceMap));		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceMapWrapper)	2	None	add
3	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  t,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceCollectingCallback)  [FE]        AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    NodeTraversal.traverse(compiler,  t,  this);  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    NodeTraversal.traverse(compiler,  t,  this);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceCollectingCallback)	2	None	add
4	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  t,  blockStack);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Deque<BasicBlock>)  [FE]          AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    NodeTraversal.traverse(compiler,  t,  blockStack);  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    NodeTraversal.traverse(compiler,  t,  blockStack);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Deque<BasicBlock>)	2	None	add
5	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap));		non-compiled	[CE]  cannot  find  symbol	2	None	add
6	[BUG]  [BUGGY]    Predicate  sourceFile  =  t.getSourceReference();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    Predicate  sourceFile  =  t.getSourceReference();  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    Predicate  sourceFile  =  t.getSourceReference();		non-compiled	[CE]  cannot  find  symbol	2	None	add
7	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap));	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
8	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [BUGGY]  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	1	None	replace
9	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]        AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [BUGGY]  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  	non-compiled	[CE]  cannot  find  symbol  sourceFile	1	None	replace
10	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap));	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
11	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceMapWrapper)  [FE]    AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(referenceMap));		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceMapWrapper)	2	None	add
12	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollection());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceCollection)  [FE]      AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollection());  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollection());		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceCollection)	2	None	add
13	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap));		non-compiled	[CE]  cannot  find  symbol	2	None	add
14	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  Reference());  [CE]  no  suitable  constructor  found  for  Reference()  [FE]          AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  Reference());  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    NodeTraversal.traverse(compiler,  blockStack,  new  Reference());		non-compiled	[CE]  no  suitable  constructor  found  for  Reference()	2	None	add
15	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap));  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap));		non-compiled	[CE]  cannot  find  symbol	2	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    Node  originalRoot  =  t.getScopeRoot();  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	    Node  originalRoot  =  t.getScopeRoot();		compilable	  [FE]  AssertionFailedError  	2	1	add
17	[BUG]  [BUGGY]    Node  originalRoot  =  t.getScopeRoot();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    Node  originalRoot  =  t.getScopeRoot();  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    Node  originalRoot  =  t.getScopeRoot();		compilable	  [FE]  AssertionFailedError  	2	1	add
18	[BUG]  [BUGGY]    StaticSourceFile  sourceFile  =  t.getScopeRoot();  [CE]  incompatible  types  [FE]      AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    StaticSourceFile  sourceFile  =  t.getScopeRoot();  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    StaticSourceFile  sourceFile  =  t.getScopeRoot();		non-compiled	[CE]  incompatible  types	2	None	add
19	[BUG]  [BUGGY]    Preconditions.checkState(!isLoop);  [CE]  cannot  find  symbol  isLoop  [FE]        AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    Preconditions.checkState(!isLoop);  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    Preconditions.checkState(!isLoop);		non-compiled	[CE]  cannot  find  symbol  isLoop	2	None	add
20	[BUG]  [BUGGY]    StaticSourceFile  sourceFile  =  t.getSourceFile();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]    StaticSourceFile  sourceFile  =  t.getSourceFile();  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	    StaticSourceFile  sourceFile  =  t.getSourceFile();		non-compiled	[CE]  cannot  find  symbol	2	None	add
21	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap));	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
