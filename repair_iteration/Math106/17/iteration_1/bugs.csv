bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]  if  (whole!=  null)  {  [BUGGY]      pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if  (whole!=  null)  {	if  (whole  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	34	2	replace
2	[BUG]  [BUGGY]  if  (whole!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]  if  (whole!=  null)  {  [BUGGY]      pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if  (whole!=  null)  {	if  (whole  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	34	2	replace
3	[BUG]  [BUGGY]    [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    [BUGGY]      pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	  	if  (whole  ==  null)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    pos.setIndex(initialIndex);  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	    pos.setIndex(initialIndex);		compilable	  [FE]  AssertionFailedError  	35	2	add
5	[BUG]  [BUGGY]    pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    pos.setIndex(initialIndex);  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    pos.setIndex(initialIndex);		compilable	  [FE]  AssertionFailedError  	35	2	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }		compilable	  [FE]  AssertionFailedError  	35	2	add
7	[BUG]  [BUGGY]    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }		compilable	  [FE]  AssertionFailedError  	35	2	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }		compilable	  [FE]  AssertionFailedError  	35	1	add
9	[BUG]  [BUGGY]    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }		compilable	  [FE]  AssertionFailedError  	35	1	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }		compilable	  [FE]  AssertionFailedError  	35	2	add
11	[BUG]  [BUGGY]    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }		compilable	  [FE]  AssertionFailedError  	35	2	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }		compilable	  [FE]  AssertionFailedError  	35	2	add
13	[BUG]  [BUGGY]    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }		compilable	  [FE]  AssertionFailedError  	35	2	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }		compilable	  [FE]  AssertionFailedError  	35	2	add
15	[BUG]  [BUGGY]    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }		compilable	  [FE]  AssertionFailedError  	35	2	add
16	[BUG]  [BUGGY]    Number  den  =  getNumberFormat().parse(source,  pos);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    Number  den  =  getNumberFormat().parse(source,  pos);  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    Number  den  =  getNumberFormat().parse(source,  pos);		non-compiled	[CE]  cannot  find  symbol	35	None	add
17	[BUG]  [BUGGY]    Number  den  =  getDeniedFormat().parse(source,  pos);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    Number  den  =  getDeniedFormat().parse(source,  pos);  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    Number  den  =  getDeniedFormat().parse(source,  pos);		non-compiled	[CE]  cannot  find  symbol	35	None	add
18	[BUG]  [BUGGY]    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  unreachable  statement	35	None	add
19	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]  if(whole!=  null  ||  whole.length()  ==  0)  {  [BUGGY]      pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  ||  whole.length()  ==  0)  {	if  (whole  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	34	None	replace
20	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]  if(whole  ==  null  ||  whole.length()  ==  0)  {  [BUGGY]      pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  ||  whole.length()  ==  0)  {	if  (whole  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	34	None	replace
21	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(num))  {  [CE]  cannot  find  symbol  num  [FE]      AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]  if(whole  ==  null  ||  whole.equals(num))  {  [BUGGY]      pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  ||  whole.equals(num))  {	if  (whole  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol  num	34	None	replace
22	[BUG]  [BUGGY]    char  c  =  whole.charAt(initialIndex);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);  [BUGGY]    char  c  =  whole.charAt(initialIndex);  [BUGGY]  if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	    char  c  =  whole.charAt(initialIndex);		non-compiled	[CE]  cannot  find  symbol	35	None	add
