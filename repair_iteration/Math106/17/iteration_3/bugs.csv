bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	35	2	add
2	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	35	2	add
3	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	35	None	add
4	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    int  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  ';'  expected	35	None	add
5	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex;	  	non-compiled	[CE]  ')'  expected	35	None	add
6	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  initialIndex,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  initialIndex,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  initialIndex,  pos);	  Number    den    =    getNumberFormat().parse(source,    startIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
7	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole  ==  null  ||  whole.equals(initialIndex))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole  ==  null  ||  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole    ==    null    ||    whole.equals(initialIndex))    {    if(whole  ==  null  ||  whole.equals(initialIndex))  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
8	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole!=  null  ||  whole.equals(initialIndex))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole!=  null  ||  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole    ==    null    ||    whole.equals(initialIndex))    {    if(whole!=  null  ||  whole.equals(initialIndex))  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
9	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  If(whole  ==  null  ||  whole.equals(initialIndex))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  If(whole  ==  null  ||  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole    ==    null    ||    whole.equals(initialIndex))    {    If(whole  ==  null  ||  whole.equals(initialIndex))  {	  	non-compiled	[CE]  ';'  expected	48	None	add
10	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole  >=  null  ||  whole.equals(initialIndex))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole  >=  null  ||  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole    ==    null    ||    whole.equals(initialIndex))    {    if(whole  >=  null  ||  whole.equals(initialIndex))  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
11	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.length()  >  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  ||  whole.length()  >  0)  {	  if(whole!=    null    &&    whole.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
12	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.length()  >  0  ||  whole.charAt(initialIndex)!=  '-')  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.length()  >  0  ||  whole.charAt(initialIndex)!=  '-')  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.length()  >  0  ||  whole.charAt(initialIndex)!=  '-')  {	  if(whole!=    null    &&    whole.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
13	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.length()  >  0  ||  whole.charAt(initialIndex)  ==  '-')  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.length()  >  0  ||  whole.charAt(initialIndex)  ==  '-')  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.length()  >  0  ||  whole.charAt(initialIndex)  ==  '-')  {	  if(whole!=    null    &&    whole.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
14	[BUG]  [BUGGY]  if(whole!=  null)  {  If  (whole  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  If  (whole  ==  null)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  If  (whole  ==  null)  {	  if    (whole!=    null)    {    If    (whole!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
15	[BUG]  [BUGGY]  if(whole  ==  null)  {  If  (whole!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  If  (whole!=  null)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  If  (whole!=  null)  {	  if    (whole!=    null)    {    If    (whole!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
17	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
19	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
21	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
23	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
24	[BUG]  [BUGGY]  char  c  =  global.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  global.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  global.charAt(initialIndex);	  char    c    =    initialIndex.charAt(global);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
25	[BUG]  [BUGGY]  char  c  =  total.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  total.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  total.charAt(initialIndex);	  char    c    =    initialIndex.charAt(global);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
26	[BUG]  [BUGGY]  String  c  =  initialIndex.charAt(global);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  String  c  =  initialIndex.charAt(global);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	String  c  =  initialIndex.charAt(global);	  char    c    =    initialIndex.charAt(global);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
27	[BUG]  [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(InitialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
29	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
31	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
33	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
35	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
37	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
38	[BUG]  [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex,  whole);  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex,  whole);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  pos.setIndex(initialIndex,  whole);  return  null;  }	  if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
39	[BUG]  [BUGGY]  n.setIndex(initialIndex);  return  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  n.setIndex(initialIndex);  return  null;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	n.setIndex(initialIndex);  return  null;	  if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	62	2	replace
41	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	62	2	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	62	1	replace
43	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	62	1	replace
44	[BUG]  [BUGGY]  String  c  =  startIndex.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  String  c  =  startIndex.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	String  c  =  startIndex.charAt(initialIndex);	  char    c    =    startIndex.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	107	None	replace
45	[BUG]  [BUGGY]  char  c  =  startIndex.charAt(initialIndex  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  startIndex.charAt(initialIndex  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  startIndex.charAt(initialIndex  +  1);	  char    c    =    startIndex.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	107	None	replace
46	[BUG]  [BUGGY]  char  c  =  initialIndex.charAt(startIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  initialIndex.charAt(startIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  initialIndex.charAt(startIndex);	  char    c    =    startIndex.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	107	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
48	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
50	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
52	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
54	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
55	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  initialIndex,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  initialIndex,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  initialIndex,  denominatorFormat);	  Number    den    =    getNumberFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
56	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  startIndex,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  startIndex,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  startIndex,  denominatorFormat);	  Number    den    =    getNumberFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
57	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  pos,  whole);	  Number    den    =    getNumberFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
58	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(whole,  pos,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(whole,  pos,  initialIndex);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(whole,  pos,  initialIndex);	  Number    den    =    getNumberFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
59	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(whole,  pos,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(whole,  pos,  denominatorFormat);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(whole,  pos,  denominatorFormat);	  Number    den    =    getNumberFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
60	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(whole,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(whole,  initialIndex);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(whole,  initialIndex);	  Number    den    =    getNumberFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
62	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	73	1	replace
64	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	73	1	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
66	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    If(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	56	2	replace
68	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    If(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	56	2	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
70	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
72	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
74	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
76	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
78	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
79	[BUG]  [BUGGY]  if(initialIndex!=  -1)  {  pos.setIndex(initialIndex,  whole);  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  -1)  {  pos.setIndex(initialIndex,  whole);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  -1)  {  pos.setIndex(initialIndex,  whole);  return  null;  }	  if(initialIndex!=    -1)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
80	[BUG]  [BUGGY]  if(initialIndex!=  -1)  {  pos.setIndex(initialIndex  +  1);  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  -1)  {  pos.setIndex(initialIndex  +  1);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  -1)  {  pos.setIndex(initialIndex  +  1);  return  null;  }	  if(initialIndex!=    -1)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
81	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(number))  {  [CE]  cannot  find  symbol  number  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(number))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  ||  whole.equals(number))  {	  if(whole    ==    null    ||    whole.equals(c))    {    	non-compiled	[CE]  cannot  find  symbol  number	50	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	2	2	replace
83	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	2	2	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	2	2	replace
85	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	2	2	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
87	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
89	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
91	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
93	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
94	[BUG]  [BUGGY]  Integer  ret  =  getInitialIndex(whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getInitialIndex(whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getInitialIndex(whole);	  Integer    ret    =    getInitialIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
95	[BUG]  [BUGGY]  Integer  ret  =  getInitialIndex(initialIndex,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getInitialIndex(initialIndex,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getInitialIndex(initialIndex,  pos);	  Integer    ret    =    getInitialIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
96	[BUG]  [BUGGY]  Integer  ret  =  getInitialIndex(whole,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getInitialIndex(whole,  initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getInitialIndex(whole,  initialIndex);	  Integer    ret    =    getInitialIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
97	[BUG]  [BUGGY]  Integer  ret  =  getInitialIndex(num);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getInitialIndex(num);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getInitialIndex(num);	  Integer    ret    =    getInitialIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
98	[BUG]  [BUGGY]  char  c  =  globalIndex.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  globalIndex.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  globalIndex.charAt(initialIndex);	  char    c    =    initialIndex.charAt(globalIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
99	[BUG]  [BUGGY]  String  c  =  initialIndex.charAt(globalIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  String  c  =  initialIndex.charAt(globalIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	String  c  =  initialIndex.charAt(globalIndex);	  char    c    =    initialIndex.charAt(globalIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
100	[BUG]  [BUGGY]  String  c  =  initialIndex.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  String  c  =  initialIndex.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	String  c  =  initialIndex.charAt(initialIndex);	  char    c    =    initialIndex.charAt(globalIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
101	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  pos,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  pos,  initialIndex);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(whole,  pos,  initialIndex);	  Number    den    =    getDeniedFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
102	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  pos,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  pos,  denominatorFormat);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(whole,  pos,  denominatorFormat);	  Number    den    =    getDeniedFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
103	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  initialIndex);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(whole,  initialIndex);	  Number    den    =    getDeniedFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex!=  0)  {	  if    (whole!=    null)    {    if    (whole    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
105	[BUG]  [BUGGY]  if(initialIndex!=  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  0)  {	  if    (whole!=    null)    {    if    (whole    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	121	2	replace
107	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	121	2	replace
108	[BUG]  [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    int    pos.setIndex(initialIndex);    	non-compiled	[CE]  ';'  expected	37	None	replace
109	[BUG]  [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    int    pos.setIndex(initialIndex);    	non-compiled	[CE]  ';'  expected	37	None	replace
110	[BUG]  [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    int    pos.setIndex(initialIndex);    	non-compiled	[CE]  ';'  expected	37	None	replace
111	[BUG]  [BUGGY]  String  c  =  den.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  String  c  =  den.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	String  c  =  den.charAt(initialIndex);	  char    c    =    den.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
112	[BUG]  [BUGGY]  char  c  =  source.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  source.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  source.charAt(initialIndex);	  char    c    =    den.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
113	[BUG]  [BUGGY]  char  c  =  entire.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  entire.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  entire.charAt(initialIndex);	  char    c    =    den.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
114	[BUG]  [BUGGY]  int  initialIndex  =  whole.getIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  int  initialIndex  =  whole.getIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	int  initialIndex  =  whole.getIndex();	  int    initialIndex    =    pos.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
115	[BUG]  [BUGGY]  char  initialIndex  =  pos.getIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  initialIndex  =  pos.getIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  initialIndex  =  pos.getIndex();	  int    initialIndex    =    pos.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
116	[BUG]  [BUGGY]  int  initialIndex  =  pos.getIndex()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  int  initialIndex  =  pos.getIndex()  -  1;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	int  initialIndex  =  pos.getIndex()  -  1;	  int    initialIndex    =    pos.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
117	[BUG]  [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(InitialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
118	[BUG]  [BUGGY]  Integer  initialIndex  =  pos.getIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  pos.getIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  pos.getIndex();	  if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex    +    1);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	replace
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.equals(source))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null  &&  whole.equals(source))  {	  if(whole    ==    null    ||    whole.equals(source))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
120	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.equals(source))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.equals(source))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.equals(source))  {	  if(whole    ==    null    ||    whole.equals(source))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  &&  whole.equals(source))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null  &&  whole.equals(source))  {	  if(whole    ==    null    ||    whole.equals(source))    {    	compilable	  [FE]  AssertionFailedError  	95	2	replace
122	[BUG]  [BUGGY]  if(whole  ==  null  &&  whole.equals(source))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  &&  whole.equals(source))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  &&  whole.equals(source))  {	  if(whole    ==    null    ||    whole.equals(source))    {    	compilable	  [FE]  AssertionFailedError  	95	2	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(source))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null  ||  whole.equals(source))  {	  if(whole    ==    null    ||    whole.equals(source))    {    	compilable	  [FE]  AssertionFailedError  	95	3	replace
124	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.equals(source))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(source))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  ||  whole.equals(source))  {	  if(whole    ==    null    ||    whole.equals(source))    {    	compilable	  [FE]  AssertionFailedError  	95	3	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null  &&  whole.equals(initialIndex))  {	  if(whole    ==    null    ||    whole.equals(initialIndex))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
126	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.equals(initialIndex))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.equals(initialIndex))  {	  if(whole    ==    null    ||    whole.equals(initialIndex))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  &&  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null  &&  whole.equals(initialIndex))  {	  if(whole    ==    null    ||    whole.equals(initialIndex))    {    	compilable	  [FE]  AssertionFailedError  	49	2	replace
128	[BUG]  [BUGGY]  if(whole  ==  null  &&  whole.equals(initialIndex))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  &&  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  &&  whole.equals(initialIndex))  {	  if(whole    ==    null    ||    whole.equals(initialIndex))    {    	compilable	  [FE]  AssertionFailedError  	49	2	replace
129	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  return  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex  +  1);  return  null;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex  +  1);  return  null;	  pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
130	[BUG]  [BUGGY]  pos.setIndex(initialIndex,  whole);  return  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex,  whole);  return  null;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex,  whole);  return  null;	  pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
131	[BUG]  [BUGGY]  pos.setIndex(initialIndex,  pos);  return  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex,  pos);  return  null;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex,  pos);  return  null;	  pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
132	[BUG]  [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
133	[BUG]  [BUGGY]  Integer  initialIndex  =  whole.getIndex()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  whole.getIndex()  -  1;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  whole.getIndex()  -  1;	  Integer    initialIndex    =    whole.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
134	[BUG]  [BUGGY]  Integer  initialIndex  =  whole.getIndex()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  whole.getIndex()  +  1;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  whole.getIndex()  +  1;	  Integer    initialIndex    =    whole.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
135	[BUG]  [BUGGY]  Integer  initialIndex  =  whole.getIndex(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  whole.getIndex(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  whole.getIndex(initialIndex);	  Integer    initialIndex    =    whole.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
136	[BUG]  [BUGGY]  Integer  initialIndex  =  whole.getIndex()  -  startIndex;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  whole.getIndex()  -  startIndex;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  whole.getIndex()  -  startIndex;	  Integer    initialIndex    =    whole.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
137	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
138	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
139	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
140	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
141	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	n.setIndex(initialIndex);  pos.setIndex(InitialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
142	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  initialIndex,  denominatorFormat);	  Number    den    =    getDeniedFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
143	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  startIndex,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  startIndex,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  startIndex,  denominatorFormat);	  Number    den    =    getDeniedFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
144	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos,  whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos,  whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  pos,  whole);	  Number    den    =    getDeniedFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
145	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  initialIndex);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	parseAndIgnoreWhitespace(whole,  pos,  initialIndex);	  parseAndIgnoreWhitespace(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
146	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  denominatorFormat);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	parseAndIgnoreWhitespace(whole,  pos,  denominatorFormat);	  parseAndIgnoreWhitespace(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
147	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  numeratorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  numeratorFormat);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	parseAndIgnoreWhitespace(whole,  pos,  numeratorFormat);	  parseAndIgnoreWhitespace(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
148	[BUG]  [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
150	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
152	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
153	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  cannot  find  symbol  InitialIndex  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	57	None	add
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
155	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
156	[BUG]  [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
157	[BUG]  [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
158	[BUG]  [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex!=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex!=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex!=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
159	[BUG]  [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >>  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >>  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >>  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  for(int  i  =  initialIndex;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  for(int  i  =  initialIndex;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }	  if(whole!=    null)    {    for(int    i    =    startIndex;    i    <    initialIndex;    i++)    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	44	2	replace
161	[BUG]  [BUGGY]  if(whole!=  null)  {  for(int  i  =  initialIndex;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  for(int  i  =  initialIndex;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  for(int  i  =  initialIndex;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }	  if(whole!=    null)    {    for(int    i    =    startIndex;    i    <    initialIndex;    i++)    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	44	2	replace
162	[BUG]  [BUGGY]  if(whole!=  null)  {  for(int  i  =  initialIndex;  i  <  initIndex;  i++)  {  pos.setIndex(initialIndex);  }  [CE]  cannot  find  symbol  initIndex  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  for(int  i  =  initialIndex;  i  <  initIndex;  i++)  {  pos.setIndex(initialIndex);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  for(int  i  =  initialIndex;  i  <  initIndex;  i++)  {  pos.setIndex(initialIndex);  }	  if(whole!=    null)    {    for(int    i    =    startIndex;    i    <    initialIndex;    i++)    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  cannot  find  symbol  initIndex	44	None	replace
163	[BUG]  [BUGGY]  String  c  =  initialIndex.charAt(whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  String  c  =  initialIndex.charAt(whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	String  c  =  initialIndex.charAt(whole);	  char    c    =    initialIndex.charAt(whole);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
164	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.length()!=  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.length()!=  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  ||  whole.length()!=  0)  {	  if(whole!=    null    ||    whole.length()    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	64	2	replace
166	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	64	2	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	64	2	replace
168	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	64	2	replace
169	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.length()  >  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  ||  whole.length()  >  0)  {	  if(whole    ==    null    ||    whole.length()    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
171	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
173	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
175	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
177	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
179	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
181	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
183	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
184	[BUG]  [BUGGY]  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Numberwhole  =  getWholeFormat().parse(source,  pos);	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >>    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
185	[BUG]  [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  pos,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  pos,  initialIndex);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  d  =  getDimensionFormat().parse(whole,  pos,  initialIndex);	  Integer    d    =    getDimensionFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
186	[BUG]  [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  initialIndex);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  d  =  getDimensionFormat().parse(whole,  initialIndex);	  Integer    d    =    getDimensionFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
188	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
190	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
192	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
194	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
195	[BUG]  [BUGGY]  pos.setStartIndex(initialIndex  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setStartIndex(initialIndex  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setStartIndex(initialIndex  +  1);	  pos.setStartIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
196	[BUG]  [BUGGY]  pos.setStartIndex(initialIndex,  whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setStartIndex(initialIndex,  whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setStartIndex(initialIndex,  whole);	  pos.setStartIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
197	[BUG]  [BUGGY]  pos.setStartIndex(startIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setStartIndex(startIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setStartIndex(startIndex);	  pos.setStartIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
198	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  initialIndex,  pos);	  Number    den    =    getDeniedFormat().parse(source,    startIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
199	[BUG]  [BUGGY]  Number  den  =  getDenominatorFormat().parse(whole,  pos,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDenominatorFormat().parse(whole,  pos,  initialIndex);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDenominatorFormat().parse(whole,  pos,  initialIndex);	  Number    den    =    getDenominatorFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
200	[BUG]  [BUGGY]  Number  den  =  getDenominatorFormat().parse(whole,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDenominatorFormat().parse(whole,  initialIndex);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDenominatorFormat().parse(whole,  initialIndex);	  Number    den    =    getDenominatorFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
201	[BUG]  [BUGGY]  Number  den  =  getDenominatorFormat().parse(whole,  source,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDenominatorFormat().parse(whole,  source,  pos);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDenominatorFormat().parse(whole,  source,  pos);	  Number    den    =    getDenominatorFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	4	2	replace
203	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	4	2	replace
204	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.num  >  0)  {  [CE]  cannot  find  symbol  num  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.num  >  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.num  >  0)  {	  if(whole!=    null    &&    whole.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  num	109	None	replace
205	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.initialIndex  >  0)  {  [CE]  cannot  find  symbol  initialIndex  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.initialIndex  >  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.initialIndex  >  0)  {	  if(whole!=    null    &&    whole.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  initialIndex	109	None	replace
206	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.numeratorFormat  >  0)  {  [CE]  cannot  find  symbol  numeratorFormat  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.numeratorFormat  >  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.numeratorFormat  >  0)  {	  if(whole!=    null    &&    whole.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  numeratorFormat	109	None	replace
207	[BUG]  [BUGGY]  pos.setIndex(initialIndex,  whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex,  whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex,  whole);	  pos.setIndex(initialIndex    +    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
208	[BUG]  [BUGGY]  pos.setIndex(initialIndex,  whole.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex,  whole.length);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex,  whole.length);	  pos.setIndex(initialIndex    +    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
210	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
212	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
214	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
216	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
218	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
219	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.equals(initialIndex))  {  if(whole!=  null  ||  whole.equals(initialIndex))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(initialIndex))  {  if(whole!=  null  ||  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=    null    ||    whole.equals(initialIndex))    {    if(whole!=  null  ||  whole.equals(initialIndex))  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
220	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.equals(initialIndex))  {  if(whole  ==  null  ||  whole.equals(initialIndex))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(initialIndex))  {  if(whole  ==  null  ||  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=    null    ||    whole.equals(initialIndex))    {    if(whole  ==  null  ||  whole.equals(initialIndex))  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
221	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.equals(initialIndex))  {  If(whole!=  null  ||  whole.equals(initialIndex))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(initialIndex))  {  If(whole!=  null  ||  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=    null    ||    whole.equals(initialIndex))    {    If(whole!=  null  ||  whole.equals(initialIndex))  {	  	non-compiled	[CE]  ';'  expected	51	None	add
222	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.equals(initialIndex))  {  if(whole  >=  null  ||  whole.equals(initialIndex))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(initialIndex))  {  if(whole  >=  null  ||  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=    null    ||    whole.equals(initialIndex))    {    if(whole  >=  null  ||  whole.equals(initialIndex))  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
223	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  initialIndex  +  1);	  Number    den    =    getDeniedFormat().parse(source,    pos    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	119	None	replace
224	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos  +  1,  whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos  +  1,  whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  pos  +  1,  whole);	  Number    den    =    getDeniedFormat().parse(source,    pos    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	119	None	replace
225	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos,  whole  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos,  whole  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  pos,  whole  +  1);	  Number    den    =    getDeniedFormat().parse(source,    pos    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	119	None	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex!=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	102	1	replace
227	[BUG]  [BUGGY]  if(initialIndex!=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	102	1	replace
228	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex  >=  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	102	2	replace
229	[BUG]  [BUGGY]  if(initialIndex  >=  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  >=  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	102	2	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
231	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
233	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
235	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
237	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
238	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
239	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
240	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	45	None	add
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	46	1	replace
242	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	46	1	replace
243	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	46	4	replace
244	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	46	4	replace
245	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ".);  }	  if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
246	[BUG]  [BUGGY]  char  c  =  initialIndex.charAt(pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  initialIndex.charAt(pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  initialIndex.charAt(pos);	  char    c    =    initialIndex.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
247	[BUG]  [BUGGY]  char  c  =  initialIndex.charAt(initialIndex  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  initialIndex.charAt(initialIndex  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  initialIndex.charAt(initialIndex  +  1);	  char    c    =    initialIndex.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
248	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.length()  >=  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.length()  >=  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.length()  >=  0)  {	  if(whole!=    null    &&    whole.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
250	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
252	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
254	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
256	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
257	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.equals(numeratorFormat))  {  [CE]  numeratorFormat  has  private  access  in  FractionFormat  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.equals(numeratorFormat))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.equals(numeratorFormat))  {	  if(whole    ==    null    ||    whole.equals(numeratorFormat))    {    	non-compiled	[CE]  numeratorFormat  has  private  access  in  FractionFormat	93	None	replace
258	[BUG]  [BUGGY]  if(whole  ==  null  &&  whole.equals(numeratorFormat))  {  [CE]  numeratorFormat  has  private  access  in  FractionFormat  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  &&  whole.equals(numeratorFormat))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  &&  whole.equals(numeratorFormat))  {	  if(whole    ==    null    ||    whole.equals(numeratorFormat))    {    	non-compiled	[CE]  numeratorFormat  has  private  access  in  FractionFormat	93	None	replace
259	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.equals(numeratorFormat))  {  [CE]  numeratorFormat  has  private  access  in  FractionFormat  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(numeratorFormat))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  ||  whole.equals(numeratorFormat))  {	  if(whole    ==    null    ||    whole.equals(numeratorFormat))    {    	non-compiled	[CE]  numeratorFormat  has  private  access  in  FractionFormat	93	None	replace
260	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  initialIndex,  whole);	  Number    den    =    getDeniedFormat().parse(source,    initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
261	[BUG]  [BUGGY]  String  c  =  whole.charAt(initialIndex,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  String  c  =  whole.charAt(initialIndex,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	String  c  =  whole.charAt(initialIndex,  pos);	  String    c    =    whole.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
262	[BUG]  [BUGGY]  char  c  =  whole.charAt(initialIndex,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  whole.charAt(initialIndex,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  whole.charAt(initialIndex,  pos);	  String    c    =    whole.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
263	[BUG]  [BUGGY]  char  c  =  whole.charAtIndex(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  whole.charAtIndex(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  whole.charAtIndex(initialIndex);	  String    c    =    whole.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
265	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
267	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
269	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
271	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
273	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
275	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
277	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
279	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
281	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
283	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
284	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  cannot  find  symbol  InitialIndex  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	53	None	add
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
286	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
287	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  initialIndex  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  initialIndex  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  initialIndex  +  1);	  Number    den    =    getNumberFormat().parse(source,    pos    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	112	None	replace
288	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos  +  1,  whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos  +  1,  whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  pos  +  1,  whole);	  Number    den    =    getNumberFormat().parse(source,    pos    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	112	None	replace
289	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  whole  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  whole  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  pos,  whole  +  1);	  Number    den    =    getNumberFormat().parse(source,    pos    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	112	None	replace
290	[BUG]  [BUGGY]  Integer  initialIndex  =  whole.intValue()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  whole.intValue()  +  1;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  whole.intValue()  +  1;	  Integer    initialIndex    =    whole.intValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
291	[BUG]  [BUGGY]  Integer  initialIndex  =  whole.intValue()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  whole.intValue()  -  1;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  whole.intValue()  -  1;	  Integer    initialIndex    =    whole.intValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
292	[BUG]  [BUGGY]  Integer  initialIndex  =  whole.intValue()  *  pos;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  whole.intValue()  *  pos;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  whole.intValue()  *  pos;	  Integer    initialIndex    =    whole.intValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
293	[BUG]  [BUGGY]  Integer  initialIndex  =  whole.intValue()  /  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  whole.intValue()  /  2;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  whole.intValue()  /  2;	  Integer    initialIndex    =    whole.intValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
294	[BUG]  [BUGGY]  Integer  ret  =  getIndex(whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getIndex(whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getIndex(whole);	  Integer    ret    =    getIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
295	[BUG]  [BUGGY]  Integer  ret  =  getIndex(initialIndex,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getIndex(initialIndex,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getIndex(initialIndex,  pos);	  Integer    ret    =    getIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
296	[BUG]  [BUGGY]  Integer  ret  =  getIndex(whole,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getIndex(whole,  initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getIndex(whole,  initialIndex);	  Integer    ret    =    getIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
297	[BUG]  [BUGGY]  Integer  ret  =  getIndex(whole.intValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getIndex(whole.intValue());  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getIndex(whole.intValue());	  Integer    ret    =    getIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
299	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
301	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
302	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  cannot  find  symbol  InitialIndex  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	85	None	add
303	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  return  null;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  return  null;  }	  	non-compiled	[CE]  illegal  start  of  type	85	None	add
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	105	1	replace
305	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	105	1	replace
306	[BUG]  [BUGGY]  Integer  initialIndex  =  getInitialIndex()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  getInitialIndex()  -  1;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  getInitialIndex()  -  1;	  Integer    initialIndex    =    getInitialIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
307	[BUG]  [BUGGY]  Integer  initialIndex  =  getInitialIndex()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  getInitialIndex()  +  1;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  getInitialIndex()  +  1;	  Integer    initialIndex    =    getInitialIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
308	[BUG]  [BUGGY]  Integer  initialIndex  =  getInitialIndex(pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  getInitialIndex(pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  getInitialIndex(pos);	  Integer    initialIndex    =    getInitialIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
309	[BUG]  [BUGGY]  Integer  initialIndex  =  pos.getInitialIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  pos.getInitialIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  pos.getInitialIndex();	  Integer    initialIndex    =    getInitialIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
310	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(source))  {  if(whole  ==  null  ||  whole.equals(source))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(source))  {  if(whole  ==  null  ||  whole.equals(source))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole    ==    null    ||    whole.equals(source))    {    if(whole  ==  null  ||  whole.equals(source))  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
311	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(source))  {  if(whole!=  null  ||  whole.equals(source))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(source))  {  if(whole!=  null  ||  whole.equals(source))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole    ==    null    ||    whole.equals(source))    {    if(whole!=  null  ||  whole.equals(source))  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
312	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(source))  {  If(whole  ==  null  ||  whole.equals(source))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(source))  {  If(whole  ==  null  ||  whole.equals(source))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole    ==    null    ||    whole.equals(source))    {    If(whole  ==  null  ||  whole.equals(source))  {	  	non-compiled	[CE]  ';'  expected	94	None	add
313	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1,  whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex  +  1,  whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex  +  1,  whole);	  pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
314	[BUG]  [BUGGY]  pos.setIndex(initialIndex,  whole.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex,  whole.length  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex,  whole.length  +  1);	  pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
315	[BUG]  [BUGGY]  pos.setIndex(initialIndex,  whole  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex,  whole  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex,  whole  +  1);	  pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
316	[BUG]  [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
317	[BUG]  [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
318	[BUG]  [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	86	1	replace
320	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	86	1	replace
321	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  return  null;  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
323	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
324	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  [CE]  cannot  find  symbol  num  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  num	72	None	add
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
326	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
328	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
330	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
332	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
334	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
335	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	61	None	add
336	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [CE]  cannot  find  symbol  num  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }	  	non-compiled	[CE]  cannot  find  symbol  num	61	None	add
337	[BUG]  [BUGGY]  if(initialIndex!=  -1)  {  if  (whole!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  -1)  {  if  (whole!=  null)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  -1)  {  if  (whole!=  null)  {	  if    (whole!=    null)    {    if    (whole    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
338	[BUG]  [BUGGY]  Integer  ret  =  getIndex(num);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getIndex(num);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getIndex(num);	  Integer    ret    =    getIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
339	[BUG]  [BUGGY]  Integer  ret  =  getIndex(initialIndex  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getIndex(initialIndex  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getIndex(initialIndex  +  1);	  Integer    ret    =    getIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
340	[BUG]  [BUGGY]  char  c  =  totalIndex.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  totalIndex.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  totalIndex.charAt(initialIndex);	  char    c    =    initialIndex.charAt(globalIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
341	[BUG]  [BUGGY]  if(initialIndex!=  -1)  {  if  (whole  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  -1)  {  if  (whole  ==  null)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  -1)  {  if  (whole  ==  null)  {	  if    (whole!=    null)    {    if    (whole    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    If(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	6	2	replace
343	[BUG]  [BUGGY]  if(whole!=  null)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    If(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	6	2	replace
344	[BUG]  [BUGGY]  Number  den  =  getWholeFormat().parse(source,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getWholeFormat().parse(source,  pos);	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole    >=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
345	[BUG]  [BUGGY]  pos.setIndex(initialIndex,  den);  return  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex,  den);  return  null;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex,  den);  return  null;	  pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
346	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	parseAndIgnoreWhitespace(source,  pos);	  if(whole!=    null)    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
347	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.equals(num))  {  [CE]  cannot  find  symbol  num  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(num))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  ||  whole.equals(num))  {	  if(whole    ==    null    ||    whole.equals(source))    {    	non-compiled	[CE]  cannot  find  symbol  num	95	None	replace
348	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  whole,  pos,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  whole,  pos,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  whole,  pos,  denominatorFormat);	  Number    den    =    getNumberFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
349	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  If(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  If(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    If(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
350	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	1	None	add
351	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.length()  <  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.length()  <  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  ||  whole.length()  <  0)  {	  if(whole!=    null    ||    whole.length()    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	19	2	replace
353	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	19	2	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  -1)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  if(initialIndex  >=  -1)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	64	2	replace
355	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  -1)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  >=  -1)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  >=  -1)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	64	2	replace
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
357	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
358	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	18	None	add
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
360	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
362	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
363	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  [CE]  cannot  find  symbol  num  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  num	18	None	add
364	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  =  0)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  =  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  =  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
366	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
367	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	63	None	add
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
369	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
370	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [CE]  cannot  find  symbol  num  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }	  	non-compiled	[CE]  cannot  find  symbol  num	63	None	add
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
372	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	63	2	add
373	[BUG]  [BUGGY]  if(whole  ==  null  &&  whole.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  &&  whole.length()  >  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  &&  whole.length()  >  0)  {	  if(whole!=    null    &&    whole.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
374	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.length()  >  0  ||  denominatorFormat.equals(whole))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.length()  >  0  ||  denominatorFormat.equals(whole))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.length()  >  0  ||  denominatorFormat.equals(whole))  {	  if(whole!=    null    &&    whole.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
375	[BUG]  [BUGGY]  int  initialIndex  =  num.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  int  initialIndex  =  num.length();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	int  initialIndex  =  num.length();	  if(initialIndex    <    0    ||    initialIndex    >    num.length())    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	113	None	replace
376	[BUG]  [BUGGY]  pos.setIndex(num.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(num.length());  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(num.length());	  if(initialIndex    <    0    ||    initialIndex    >    num.length())    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	113	None	replace
377	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  startIndex,  whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  startIndex,  whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  startIndex,  whole);	  Number    den    =    getDeniedFormat().parse(source,    startIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
378	[BUG]  [BUGGY]  Number  den  =  getDenominatorFormat().parse(source,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDenominatorFormat().parse(source,  pos);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDenominatorFormat().parse(source,  pos);	  Number    den    =    getDenominatorFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
379	[BUG]  [BUGGY]  Number  den  =  getDenominatorFormat().parse(whole,  pos,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDenominatorFormat().parse(whole,  pos,  denominatorFormat);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDenominatorFormat().parse(whole,  pos,  denominatorFormat);	  Number    den    =    getDenominatorFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
380	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(Whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(Whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  if(Whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
381	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole  >=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  if(whole  >=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  if(whole  >=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	91	1	replace
383	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	91	1	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	91	1	replace
385	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	91	1	replace
386	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  source,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  source,  pos);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(whole,  source,  pos);	  Number    den    =    getDeniedFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
387	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  source);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  source);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(whole,  source);	  Number    den    =    getDeniedFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  for(int  i  =  0;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null)  {  for(int  i  =  0;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }	  if(whole!=    null)    {    for(int    i    =    startIndex;    i    <    initialIndex;    i++)    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	44	2	replace
389	[BUG]  [BUGGY]  if(whole!=  null)  {  for(int  i  =  0;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  for(int  i  =  0;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  for(int  i  =  0;  i  <  initialIndex;  i++)  {  pos.setIndex(initialIndex);  }	  if(whole!=    null)    {    for(int    i    =    startIndex;    i    <    initialIndex;    i++)    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	44	2	replace
390	[BUG]  [BUGGY]  Integer  initialIndex  =  getInitialIndex(num);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  getInitialIndex(num);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  getInitialIndex(num);	  Integer    initialIndex    =    getInitialIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
391	[BUG]  [BUGGY]  Integer  initialIndex  =  getInitialIndex(whole);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  getInitialIndex(whole);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  getInitialIndex(whole);	  Integer    initialIndex    =    getInitialIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
392	[BUG]  [BUGGY]  int  initialIndex  =  getInitialIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  int  initialIndex  =  getInitialIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	int  initialIndex  =  getInitialIndex();	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >>    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
393	[BUG]  [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(InitialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
394	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(den))  {  [CE]  cannot  find  symbol  den  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(den))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  ||  whole.equals(den))  {	  if(whole    ==    null    ||    whole.equals(c))    {    	non-compiled	[CE]  cannot  find  symbol  den	50	None	replace
395	[BUG]  [BUGGY]  pos.setIndex(num);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(num);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(num);	  if(initialIndex    <    0    ||    initialIndex    >    num)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	117	None	replace
396	[BUG]  [BUGGY]  int  initialIndex  =  num.getIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  int  initialIndex  =  num.getIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	int  initialIndex  =  num.getIndex();	  if(initialIndex    <    0    ||    initialIndex    >    num)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	117	None	replace
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	73	1	replace
398	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	73	1	replace
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
400	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
402	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
403	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	85	None	add
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
405	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
406	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(num);  }  else  {  pos.setIndex(num);  }  [CE]  cannot  find  symbol  num  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(num);  }  else  {  pos.setIndex(num);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(num);  }  else  {  pos.setIndex(num);  }	  	non-compiled	[CE]  cannot  find  symbol  num	85	None	add
407	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos  +  1,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos  +  1,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  pos  +  1,  denominatorFormat);	  Number    den    =    getNumberFormat().parse(source,    pos    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	112	None	replace
408	[BUG]  [BUGGY]  String  c  =  whole.charAt(initialIndex  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  String  c  =  whole.charAt(initialIndex  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	String  c  =  whole.charAt(initialIndex  +  1);	  String    c    =    whole.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
409	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos  +  1,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos  +  1,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  pos  +  1,  denominatorFormat);	  Number    den    =    getDeniedFormat().parse(source,    pos    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	119	None	replace
410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  -1)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex  >=  -1)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	102	2	replace
411	[BUG]  [BUGGY]  if(initialIndex  >=  -1)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  -1)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  >=  -1)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	102	2	replace
412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
413	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
414	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  [CE]  cannot  find  symbol  num  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  num	90	None	add
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
416	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
418	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
419	[BUG]  [BUGGY]  Integer  ret  =  getInitialIndex(num,  initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getInitialIndex(num,  initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getInitialIndex(num,  initialIndex);	  Integer    ret    =    getInitialIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
420	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  return  null;  }  [CE]  cannot  find  symbol  InitialIndex  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	23	None	add
421	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  int  initialIndex  =  pos.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  int  initialIndex  =  pos.getIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    int  initialIndex  =  pos.getIndex();	  	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	23	None	add
422	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(num);  return  null;  }  [CE]  cannot  find  symbol  num  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(num);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(num);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  num	23	None	add
423	[BUG]  [BUGGY]  if(whole  ==  null  &&  whole.length  >  0)  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  &&  whole.length  >  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  &&  whole.length  >  0)  {	  if(whole!=    null    &&    whole.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	109	None	replace
424	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.number  >  0)  {  [CE]  cannot  find  symbol  number  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.number  >  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.number  >  0)  {	  if(whole!=    null    &&    whole.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  number	109	None	replace
425	[BUG]  [BUGGY]  int  initialIndex  =  pos.getIndex()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  int  initialIndex  =  pos.getIndex()  +  1;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	int  initialIndex  =  pos.getIndex()  +  1;	  int    initialIndex    =    pos.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
426	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  If(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  If(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    If(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  ';'  expected	3	None	add
427	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	3	None	add
428	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
429	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
430	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	14	None	add
431	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
432	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
434	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
435	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [CE]  cannot  find  symbol  num  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }	  	non-compiled	[CE]  cannot  find  symbol  num	14	None	add
436	[BUG]  [BUGGY]  Integer  initialIndex  =  num.intValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  num.intValue();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  num.intValue();	  Integer    initialIndex    =    whole.intValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
438	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
439	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	59	None	add
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
441	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
442	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [CE]  cannot  find  symbol  num  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }	  	non-compiled	[CE]  cannot  find  symbol  num	59	None	add
443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
444	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	59	2	add
445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
446	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
448	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
450	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
451	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	16	None	add
452	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [CE]  cannot  find  symbol  num  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }	  	non-compiled	[CE]  cannot  find  symbol  num	16	None	add
453	[BUG]  [BUGGY]  Integer  ret  =  whole.parseInt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  whole.parseInt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  whole.parseInt(initialIndex);	  if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
454	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  whole,  pos,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  whole,  pos,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  whole,  pos,  denominatorFormat);	  Number    den    =    getDeniedFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
455	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole  ==  null  ||  whole.equals(InitialIndex))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole  ==  null  ||  whole.equals(InitialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole    ==    null    ||    whole.equals(initialIndex))    {    if(whole  ==  null  ||  whole.equals(InitialIndex))  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
456	[BUG]  [BUGGY]  Integer  c  =  getCurrentInitialIndex(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  c  =  getCurrentInitialIndex(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  c  =  getCurrentInitialIndex(initialIndex);	  if(whole!=    null)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
457	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(whole,  source,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(whole,  source,  pos);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(whole,  source,  pos);	  Number    den    =    getNumberFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
458	[BUG]  [BUGGY]  Integer  initialIndex  =  num.getIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  num.getIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  num.getIndex();	  Integer    initialIndex    =    whole.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
460	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
461	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
462	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
464	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
465	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	57	None	add
466	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  int  n  =  pos.getIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex);  int  n  =  pos.getIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex);  int  n  =  pos.getIndex();	          pos.setIndex(initialIndex);    int    initialIndex    =    pos.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
467	[BUG]  [BUGGY]  pos.setIndex(startIndex);  int  initialIndex  =  pos.getIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(startIndex);  int  initialIndex  =  pos.getIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(startIndex);  int  initialIndex  =  pos.getIndex();	          pos.setIndex(initialIndex);    int    initialIndex    =    pos.getIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
468	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
469	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
471	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
473	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
474	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	53	None	add
475	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  null);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	parseAndIgnoreWhitespace(whole,  pos,  null);	  parseAndIgnoreWhitespace(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
476	[BUG]  [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  pos,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  pos,  denominatorFormat);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  d  =  getDimensionFormat().parse(whole,  pos,  denominatorFormat);	  Integer    d    =    getDimensionFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
477	[BUG]  [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  pos,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  pos,  null);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  d  =  getDimensionFormat().parse(whole,  pos,  null);	  Integer    d    =    getDimensionFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
478	[BUG]  [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  source,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  source,  pos);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  d  =  getDimensionFormat().parse(whole,  source,  pos);	  Integer    d    =    getDimensionFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
479	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( " ".);  }	  if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
480	[BUG]  [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  if(Whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  if(Whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    >=    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  if(Whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
481	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.length()  <  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.length()  <  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  ||  whole.length()  <  0)  {	  if(whole    ==    null    ||    whole.length()    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
482	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(denominatorFormat))  {  [CE]  denominatorFormat  has  private  access  in  FractionFormat  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(denominatorFormat))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null  ||  whole.equals(denominatorFormat))  {	  if(whole    ==    null    ||    whole.equals(numeratorFormat))    {    	non-compiled	[CE]  denominatorFormat  has  private  access  in  FractionFormat	93	None	replace
483	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.equals(denominatorFormat))  {  [CE]  denominatorFormat  has  private  access  in  FractionFormat  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(denominatorFormat))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  ||  whole.equals(denominatorFormat))  {	  if(whole    ==    null    ||    whole.equals(numeratorFormat))    {    	non-compiled	[CE]  denominatorFormat  has  private  access  in  FractionFormat	93	None	replace
484	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
485	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
486	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [CE]  cannot  find  symbol  Numberwhole  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  Numberwhole  =  getWholeFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    Numberwhole  =  getWholeFormat().parse(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  Numberwhole	120	None	add
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
488	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
489	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [CE]  cannot  find  symbol  num  [FE]          AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(num);  return  null;  }  else  {  pos.setIndex(num);  }	  	non-compiled	[CE]  cannot  find  symbol  num	120	None	add
490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
491	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	120	2	add
492	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  return  null;  }  [CE]  cannot  find  symbol  InitialIndex  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(InitialIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	21	None	add
493	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  int  initialIndex  =  pos.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  int  initialIndex  =  pos.getIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    int  initialIndex  =  pos.getIndex();	  	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	21	None	add
494	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(num);  return  null;  }  [CE]  cannot  find  symbol  num  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(num);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(num);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  num	21	None	add
495	[BUG]  [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  unclosed  string  literal	27	None	replace
496	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  Number  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  Number  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    Number  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  ';'  expected	35	None	add
497	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
498	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]        AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	35	None	add
499	[BUG]  [BUGGY]  Integer  ret  =  getIndex(num.intValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getIndex(num.intValue());  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getIndex(num.intValue());	  Integer    ret    =    getIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
500	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [CE]  cannot  find  symbol  InitialIndex  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	120	None	add
501	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(InitialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [CE]  cannot  find  symbol  InitialIndex  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(InitialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(InitialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	120	None	add
502	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.length()  >  0)  {  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.length()  >  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.length()  >  0)  {  pos.setIndex(initialIndex);  }	  if    (whole!=    null)    {    pos.setIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
503	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.length  >  0)  {  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.length  >  0)  {  pos.setIndex(initialIndex);  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.length  >  0)  {  pos.setIndex(initialIndex);  }	  if    (whole!=    null)    {    pos.setIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
504	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
505	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	61	2	add
506	[BUG]  [BUGGY]  if(denominatorFormat  ==  null)  {  if(initialIndex!=  initialIndex)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  denominatorFormat  has  private  access  in  FractionFormat  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(denominatorFormat  ==  null)  {  if(initialIndex!=  initialIndex)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(denominatorFormat  ==  null)  {  if(initialIndex!=  initialIndex)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    If(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  denominatorFormat  has  private  access  in  FractionFormat	6	None	replace
507	[BUG]  [BUGGY]  if(denominatorFormat  ==  null)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  denominatorFormat  has  private  access  in  FractionFormat  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(denominatorFormat  ==  null)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(denominatorFormat  ==  null)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    If(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  denominatorFormat  has  private  access  in  FractionFormat	6	None	replace
508	[BUG]  [BUGGY]  if(denominatorFormat!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(denominatorFormat!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(denominatorFormat!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    If(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
509	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.size  >  0)  {  [CE]  cannot  find  symbol  size  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.size  >  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.size  >  0)  {	  if(whole!=    null    &&    whole.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  size	109	None	replace
510	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    int    pos.setIndex(initialIndex);    	non-compiled	[CE]  ';'  expected	37	None	replace
511	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    int    pos.setIndex(initialIndex);    	non-compiled	[CE]  ';'  expected	37	None	replace
512	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  =  0)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  =  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  <  =  0)  {  pos.setIndex(initialIndex);  return  null;  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    If(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
513	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  c  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  c  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  pos,  c  +  1);	  Number    den    =    getNumberFormat().parse(source,    pos    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	112	None	replace
514	[BUG]  [BUGGY]  Integer  initialIndex  =  total.intValue()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  total.intValue()  -  1;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  total.intValue()  -  1;	  Integer    initialIndex    =    whole.intValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
515	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.length()  <  =  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.length()  <  =  0)  {	  if(whole!=    null    &&    whole.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
516	[BUG]  [BUGGY]  if(initialIndex!=  0)  {  If  (whole!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  0)  {  If  (whole!=  null)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  0)  {  If  (whole!=  null)  {	  if    (whole!=    null)    {    If    (whole!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
517	[BUG]  [BUGGY]  if(initialIndex!=  -1)  {  If  (whole!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  -1)  {  If  (whole!=  null)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  -1)  {  If  (whole!=  null)  {	  if    (whole!=    null)    {    If    (whole!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
518	[BUG]  [BUGGY]  if(initialIndex  >=  0)  {  If  (whole!=  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  If  (whole!=  null)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  >=  0)  {  If  (whole!=  null)  {	  if    (whole!=    null)    {    If    (whole!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
519	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
520	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	compilable	  [FE]  AssertionFailedError  	90	2	add
521	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
522	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
523	[BUG]  [BUGGY]  if(initialIndex  <  0  ||  initialIndex  >  num.length())  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  cannot  find  symbol  num  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0  ||  initialIndex  >  num.length())  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0  ||  initialIndex  >  num.length())  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  num	105	None	replace
524	[BUG]  [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(InitialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
525	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setIndex(initialIndex);  return  null;  }	  if(initialIndex    <    0    ||    initialIndex    >    Whole.MAX_VALUE)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
526	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
527	[BUG]  [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  initialIndex,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  d  =  getDimensionFormat().parse(whole,  initialIndex,  pos);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  d  =  getDimensionFormat().parse(whole,  initialIndex,  pos);	  Integer    d    =    getDimensionFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex  >=  0)  {	  if    (whole!=    null)    {    if    (whole!=    null)    {    	compilable	  [FE]  AssertionFailedError  	39	2	replace
529	[BUG]  [BUGGY]  if(initialIndex  >=  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  >=  0)  {	  if    (whole!=    null)    {    if    (whole!=    null)    {    	compilable	  [FE]  AssertionFailedError  	39	2	replace
530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  -1)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex!=  -1)  {	  if    (whole!=    null)    {    if    (whole!=    null)    {    	compilable	  [FE]  AssertionFailedError  	39	2	replace
531	[BUG]  [BUGGY]  if(initialIndex!=  -1)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  -1)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  -1)  {	  if    (whole!=    null)    {    if    (whole!=    null)    {    	compilable	  [FE]  AssertionFailedError  	39	2	replace
532	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  -1)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex  >=  -1)  {	  if    (whole!=    null)    {    if    (whole!=    null)    {    	compilable	  [FE]  AssertionFailedError  	39	2	replace
533	[BUG]  [BUGGY]  if(initialIndex  >=  -1)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  -1)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  >=  -1)  {	  if    (whole!=    null)    {    if    (whole!=    null)    {    	compilable	  [FE]  AssertionFailedError  	39	2	replace
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
535	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
536	[BUG]  [BUGGY]  Integer  initialIndex  =  getInitialIndex(num.intValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  initialIndex  =  getInitialIndex(num.intValue());  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  initialIndex  =  getInitialIndex(num.intValue());	  Integer    initialIndex    =    getInitialIndex();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
537	[BUG]  [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(ini  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(ini  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(whole!=        null)        {        pos.setIndex(initialIndex);        return        null;        }        if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(ini	  	non-compiled	[CE]  ')'  expected	3	None	add
538	[BUG]  [BUGGY]  char  c  =  des.charAt(initialIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  des.charAt(initialIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  des.charAt(initialIndex);	  char    c    =    den.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  }	  if(whole!=    null)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	76	2	replace
540	[BUG]  [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  }	  if(whole!=    null)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	compilable	  [FE]  AssertionFailedError  	76	2	replace
541	[BUG]  [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  =  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  if(initialIndex  <  =  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  if(initialIndex  <  =  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
542	[BUG]  [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex,  whole);  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null)  {  pos.setIndex(initialIndex,  whole);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole  ==  null)  {  pos.setIndex(initialIndex,  whole);  return  null;  }	  if(whole    ==    null)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
543	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  deseratorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  deseratorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  initialIndex,  deseratorFormat);	  Number    den    =    getDeniedFormat().parse(source,    initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
544	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [CE]  cannot  find  symbol  InitialIndex  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	14	None	add
545	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(InitialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [CE]  cannot  find  symbol  InitialIndex  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(InitialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(InitialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	14	None	add
546	[BUG]  [BUGGY]  int  initialIndex  =  num.length();  pos.setIndex(initialIndex);  return  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  int  initialIndex  =  num.length();  pos.setIndex(initialIndex);  return  null;  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	int  initialIndex  =  num.length();  pos.setIndex(initialIndex);  return  null;	  if(initialIndex    <    0    ||    initialIndex    >    num.length())    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
547	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( ".   ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(whole!=  null)  {  if(initialIndex  <  0)  {  throw  new  IllegalArgumentException( ".   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
548	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(whole))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(whole!=  null  ||  whole.equals(whole))  {	  if(whole    ==    null    ||    whole.equals(source))    {    	compilable	  [FE]  AssertionFailedError  	95	3	replace
549	[BUG]  [BUGGY]  if(whole!=  null  ||  whole.equals(whole))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  ||  whole.equals(whole))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  ||  whole.equals(whole))  {	  if(whole    ==    null    ||    whole.equals(source))    {    	compilable	  [FE]  AssertionFailedError  	95	3	replace
550	[BUG]  [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex,  whole);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  pos.setIndex(initialIndex,  whole);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  pos.setIndex(initialIndex,  whole);  }	  if(whole!=    null)    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
551	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex,  whole);  }  else  {  pos.setIndex(initialIndex  +  1);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex,  whole);  }  else  {  pos.setIndex(initialIndex  +  1);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0)  {  pos.setIndex(initialIndex,  whole);  }  else  {  pos.setIndex(initialIndex  +  1);  }	  if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex    +    1);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	replace
552	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex  +  1);  }  else  {  pos.setIndex(initialIndex  +  1);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  pos.setIndex(initialIndex  +  1);  }  else  {  pos.setIndex(initialIndex  +  1);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0)  {  pos.setIndex(initialIndex  +  1);  }  else  {  pos.setIndex(initialIndex  +  1);  }	  if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex    +    1);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	replace
553	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex  >=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole    >=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	5	2	replace
554	[BUG]  [BUGGY]  if(initialIndex  >=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  >=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole    >=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	5	2	replace
555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	if(initialIndex!=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole    >=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	5	1	replace
556	[BUG]  [BUGGY]  if(initialIndex!=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  initialIndex)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	          if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(whole    >=    null)    {    pos.setIndex(initialIndex);    return    null;    }    	compilable	  [FE]  AssertionFailedError  	5	1	replace
557	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  startIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  startIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  pos,  startIndex);	  Number    den    =    getNumberFormat().parse(source,    startIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
558	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex    <    0)    {    if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
559	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  <  0)  {  if(whole!=  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  unreachable  statement	96	None	replace
560	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos,  numeratorFormat,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos,  numeratorFormat,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  pos,  numeratorFormat,  denominatorFormat);	  Number    den    =    getDeniedFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
561	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [CE]  cannot  find  symbol  InitialIndex  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex!=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex!=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	63	None	add
562	[BUG]  [BUGGY]  int  initialIndex  =  num.intValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  int  initialIndex  =  num.intValue();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	int  initialIndex  =  num.intValue();	  if(initialIndex    <    0    ||    initialIndex    >    num)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	117	None	replace
563	[BUG]  [BUGGY]  int  initialIndex  =  num.getInitialIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  int  initialIndex  =  num.getInitialIndex();  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	int  initialIndex  =  num.getInitialIndex();	  if(initialIndex    <    0    ||    initialIndex    >    num)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	117	None	replace
564	[BUG]  [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  numeratorFormat,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getNumberFormat().parse(source,  pos,  numeratorFormat,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getNumberFormat().parse(source,  pos,  numeratorFormat,  denominatorFormat);	  Number    den    =    getNumberFormat().parse(source,    pos,    denominatorFormat);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
565	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  return  null;  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  return  null;  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    }    else    {    pos.setIndex(initialIndex);    return    null;    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  return  null;  }	  	non-compiled	[CE]  unreachable  statement	18	None	add
566	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  deseratorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(whole,  pos,  deseratorFormat);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	parseAndIgnoreWhitespace(whole,  pos,  deseratorFormat);	  parseAndIgnoreWhitespace(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
567	[BUG]  [BUGGY]  pos.setStartIndex(initialIndex,  num);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  pos.setStartIndex(initialIndex,  num);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	pos.setStartIndex(initialIndex,  num);	  pos.setStartIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
568	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.length()  >  0)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.length()  >  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.length()  >  0)  {  pos.setIndex(initialIndex);  return  null;  }	  if    (whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
569	[BUG]  [BUGGY]  if(whole!=  null  &&  whole.equals(num))  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null  &&  whole.equals(num))  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null  &&  whole.equals(num))  {  pos.setIndex(initialIndex);  return  null;  }	  if    (whole!=    null)    {    pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
570	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	add	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
571	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
572	[BUG]  [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole  {  null  ||  whole.equals(initialIndex))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole  ==  null  ||  whole.equals(initialIndex))  {  if(whole  {  null  ||  whole.equals(initialIndex))  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole    ==    null    ||    whole.equals(initialIndex))    {    if(whole  {  null  ||  whole.equals(initialIndex))  {	  	non-compiled	[CE]  ')'  expected	48	None	add
573	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setInitialIndex(initialIndex);  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setInitialIndex(initialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setInitialIndex(initialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol	59	None	add
574	[BUG]  [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [CE]  cannot  find  symbol  InitialIndex  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  >=  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(initialIndex);  }  if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        >=        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(whole  ==  null)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(InitialIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	59	None	add
575	[BUG]  [BUGGY]  Integer  ret  =  getInitialIndex(num.intValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getInitialIndex(num.intValue());  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getInitialIndex(num.intValue());	  Integer    ret    =    getInitialIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
576	[BUG]  [BUGGY]  Integer  ret  =  getInitialIndex(initialIndex,  denominatorFormat);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  ret  =  getInitialIndex(initialIndex,  denominatorFormat);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  ret  =  getInitialIndex(initialIndex,  denominatorFormat);	  Integer    ret    =    getInitialIndex(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
577	[BUG]  [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]          if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	                if(initialIndex        <        0)        {        pos.setIndex(initialIndex);        return        null;        }        else        {        pos.setIndex(initialIndex);        }        if(initialIndex    <    0)    {    pos.setIndex(initialIndex);    return    null;    }    if(initialIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	72	None	add
578	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  initialIndex,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(whole,  initialIndex,  pos);  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(whole,  initialIndex,  pos);	  Number    den    =    getDeniedFormat().parse(whole,    pos);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
579	[BUG]  [BUGGY]  if(initialIndex  >=  -1)  {  if  (whole  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex  >=  -1)  {  if  (whole  ==  null)  {  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex  >=  -1)  {  if  (whole  ==  null)  {	  if    (whole!=    null)    {    if    (whole    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
580	[BUG]  [BUGGY]  Integer  d  =  getDimensionFormat().parse(source,  pos);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Integer  d  =  getDimensionFormat().parse(source,  pos);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Integer  d  =  getDimensionFormat().parse(source,  pos);	          if(initialIndex    >=    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    if(initialIndex    >>    0)    {    pos.setIndex(initialIndex);    return    null;    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
581	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos,  startIndex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  pos,  startIndex);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  pos,  startIndex);	  Number    den    =    getDeniedFormat().parse(source,    startIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
582	[BUG]  [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  den);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  Number  den  =  getDeniedFormat().parse(source,  initialIndex,  den);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	Number  den  =  getDeniedFormat().parse(source,  initialIndex,  den);	  Number    den    =    getDeniedFormat().parse(source,    startIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
583	[BUG]  [BUGGY]  char  c  =  whole.charAt(initialIndex  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  char  c  =  whole.charAt(initialIndex  +  1);  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	char  c  =  whole.charAt(initialIndex  +  1);	  String    c    =    whole.charAt(initialIndex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
584	[BUG]  [BUGGY]  if(initialIndex!=  -1)  {  pos.setIndex(initialIndex,  null);  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(initialIndex!=  -1)  {  pos.setIndex(initialIndex,  null);  return  null;  }  [BUGGY]      if  (whole  ==  null)  {    pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(initialIndex!=  -1)  {  pos.setIndex(initialIndex,  null);  return  null;  }	  if(initialIndex!=    -1)    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
585	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
586	[BUG]  [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0  ||  whole.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      return  ret;  }  int  initialIndex  =  pos.getIndex();  parseAndIgnoreWhitespace(source,  pos);  Number  whole  =  getWholeFormat().parse(source,  pos);      [BUGGY]  if(whole!=  null)  {  if(initialIndex  <  0  ||  whole.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]          pos.setIndex(initialIndex);  return  null;  }  parseAndIgnoreWhitespace(source,  pos);  [CLASS]  ProperFractionFormat  [METHOD]  parse  [RETURN_TYPE]  Fraction  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  den  num  whole  char  c  Fraction  ret  String  source  long  serialVersionUID  int  d  initialIndex  n  startIndex  w  NumberFormat  denominatorFormat  format  numeratorFormat  wholeFormat  ParsePosition  pos  	projects/Math106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java	0.4472135954999579	144	144	1	replace	if(whole!=  null)  {  if(initialIndex  <  0  ||  whole.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(whole!=    null)    {    if(initialIndex    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
