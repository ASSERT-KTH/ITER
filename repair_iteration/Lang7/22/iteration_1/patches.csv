bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()  +  1);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()  +  1);  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  =  str.substring(expPos  +  1,  str.length()  +  1);	  exp    =    str.substring(expPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	6	None	replace
2	[BUG]  [BUGGY]  Integer  expPos  =  str.lastIndexOf('.');  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Integer  expPos  =  str.lastIndexOf('.');  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Integer  expPos  =  str.lastIndexOf('.');	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	4	None	replace
3	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Integer  expPos  =  str.indexOf('.',  expPos  +  1);	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	4	None	replace
4	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  dec);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Integer  expPos  =  str.indexOf('.',  dec);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Integer  expPos  =  str.indexOf('.',  dec);	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	4	None	replace
5	[BUG]  [BUGGY]  expPos  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.indexOf('.',  expPos);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.indexOf('.',  expPos);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    =    str.indexOf('.',    expPos);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
6	[BUG]  [BUGGY]  ExpPos  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  ExpPos  =  str.indexOf('.',  expPos);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	ExpPos  =  str.indexOf('.',  expPos);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    =    str.indexOf('.',    expPos);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
7	[BUG]  [BUGGY]  Expression  str  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Expression  str  =  str.indexOf('.',  expPos);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Expression  str  =  str.indexOf('.',  expPos);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    =    str.indexOf('.',    expPos);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
8	[BUG]  [BUGGY]  expPos  +=  str.charAt(0);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  +=  str.charAt(0);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  +=  str.charAt(0);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    +=    str.charAt(0);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
9	[BUG]  [BUGGY]  expPos  +=  str.charAt(expPos);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  +=  str.charAt(expPos);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  +=  str.charAt(expPos);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    +=    str.charAt(0);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
10	[BUG]  [BUGGY]  expPos  +=  str.charAt(1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  +=  str.charAt(1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  +=  str.charAt(1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    +=    str.charAt(0);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
11	[BUG]  [BUGGY]  expPos  +=  str.charAt(expPos  -  1);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  +=  str.charAt(expPos  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  +=  str.charAt(expPos  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    +=    str.charAt(0);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
12	[BUG]  [BUGGY]  Context.checkState(expPos  >  -1  ||  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Context.checkState(expPos  >  -1  ||  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Context.checkState(expPos  >  -1  ||  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    dec    =    null;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
13	[BUG]  [BUGGY]  Context.checkState(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  dec  =  null;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Context.checkState(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  dec  =  null;  }  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Context.checkState(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  dec  =  null;  }	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    dec    =    null;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
14	[BUG]  [BUGGY]  Context.checkState(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Context.checkState(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Context.checkState(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    dec    =    null;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
15	[BUG]  [BUGGY]  int  expPos  =  str.length()  -  1;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  int  expPos  =  str.length()  -  1;  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	int  expPos  =  str.length()  -  1;	      int    expPos    =    str.length();    	non-compiled	[CE]  ')'  expected	1	None	replace
16	[BUG]  [BUGGY]  int  expPos  =  str.length()  +  1;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  int  expPos  =  str.length()  +  1;  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	int  expPos  =  str.length()  +  1;	      int    expPos    =    str.length();    	non-compiled	[CE]  ')'  expected	1	None	replace
17	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.');  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  int  expPos  =  str.lastIndexOf('.');  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	int  expPos  =  str.lastIndexOf('.');	      int    expPos    =    str.length();    	non-compiled	[CE]  ')'  expected	1	None	replace
18	[BUG]  [BUGGY]  expPos  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    return    null;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
19	[BUG]  [BUGGY]  expPos  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.substring(0,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.substring(0,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    return    null;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
20	[BUG]  [BUGGY]  bucket  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  bucket  =  str.substring(0,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	bucket  =  str.substring(0,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    return    null;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
21	[BUG]  [BUGGY]  expPos  =  str.substring(expPos  +  1,  str.length()  -  2);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.substring(expPos  +  1,  str.length()  -  2);  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.substring(expPos  +  1,  str.length()  -  2);	  expPos    =    str.substring(expPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	7	None	replace
22	[BUG]  [BUGGY]  expPos  =  str.substring(expPos  +  1,  str.length()  +  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.substring(expPos  +  1,  str.length()  +  1);  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.substring(expPos  +  1,  str.length()  +  1);	  expPos    =    str.substring(expPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	7	None	replace
23	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length());  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  String  exp  =  str.substring(0,  str.length());  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	String  exp  =  str.substring(0,  str.length());	      String    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	5	None	replace
24	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	String  exp  =  str.substring(0,  str.length()  +  1);	      String    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	5	None	replace
25	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length();  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  String  exp  =  str.substring(0,  str.length();  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	String  exp  =  str.substring(0,  str.length();	      String    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	5	None	replace
26	[BUG]  [BUGGY]  String  exp  =  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  String  exp  =  str.substring(expPos  +  1,  str.length());  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	String  exp  =  str.substring(expPos  +  1,  str.length());	      String    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
27	[BUG]  [BUGGY]  String  exp  =  mant.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  String  exp  =  mant.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	String  exp  =  mant.substring(expPos  +  1,  str.length()  -  1);	      String    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
28	[BUG]  [BUGGY]  char  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  char  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	char  exp  =  str.substring(expPos  +  1,  str.length()  -  1);	      String    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
29	[BUG]  [BUGGY]  expPos  +=  str.length();  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  +=  str.length();  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  +=  str.length();	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    +=    str.length();    }    	non-compiled	[CE]  ')'  expected	14	None	replace
30	[BUG]  [BUGGY]  ExpPos  +=  str.length();  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  ExpPos  +=  str.length();  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	ExpPos  +=  str.length();	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    +=    str.length();    }    	non-compiled	[CE]  ')'  expected	14	None	replace
31	[BUG]  [BUGGY]  exp  = " "  +  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  = " "  +  str.substring(expPos  +  1,  str.length());  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  = " "  +  str.substring(expPos  +  1,  str.length());	  exp    =    str.substring(expPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	9	None	replace
32	[BUG]  [BUGGY]  exp  +=  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  +=  str.substring(expPos  +  1,  str.length());  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  +=  str.substring(expPos  +  1,  str.length());	  exp    =    str.substring(expPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	9	None	replace
33	[BUG]  [BUGGY]  Exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Exp  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
34	[BUG]  [BUGGY]  bucket  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  bucket  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	bucket  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
35	[BUG]  [BUGGY]  Integer  expPos  =  str.lastIndexOf('.',  expPos);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Integer  expPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Integer  expPos  =  str.lastIndexOf('.',  expPos);	      Integer    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	3	None	replace
36	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos  -  1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Integer  expPos  =  str.indexOf('.',  expPos  -  1);	      Integer    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	3	None	replace
37	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Integer  expPos  =  str.indexOf('.',  decPos);	      Integer    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	3	None	replace
38	[BUG]  [BUGGY]  result  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  result  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	result  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	12	None	replace
39	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  2,  str.length());  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  =  str.substring(expPos  +  2,  str.length());  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  =  str.substring(expPos  +  2,  str.length());	  exp    =    str.substring(expPos    +    2,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	8	None	replace
40	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  4,  str.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  =  str.substring(expPos  +  4,  str.length()  -  1);  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  =  str.substring(expPos  +  4,  str.length()  -  1);	  exp    =    str.substring(expPos    +    2,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	8	None	replace
41	[BUG]  [BUGGY]  exp  -=  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  -=  str.substring(expPos  +  1,  str.length());  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  -=  str.substring(expPos  +  1,  str.length());	  exp    -=    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	18	None	replace
42	[BUG]  [BUGGY]  expPos  -=  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  -=  str.substring(expPos  +  1,  str.length());  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  -=  str.substring(expPos  +  1,  str.length());	  exp    -=    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	18	None	replace
43	[BUG]  [BUGGY]  exp  -=  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  -=  str.substring(0,  str.length()  -  1);  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  -=  str.substring(0,  str.length()  -  1);	  exp    -=    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	18	None	replace
44	[BUG]  [BUGGY]  expPos  =  str.charAt(0);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.charAt(0);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.charAt(0);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    =    str.charAt(0);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
45	[BUG]  [BUGGY]  expPos  =  str.charAt(expPos);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.charAt(expPos);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.charAt(expPos);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    =    str.charAt(0);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
46	[BUG]  [BUGGY]  expPos  =  str.charAt(1);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.charAt(1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.charAt(1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    =    str.charAt(0);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
47	[BUG]  [BUGGY]  expPos  =  str.charAt(expPos  +  1);  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.charAt(expPos  +  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.charAt(expPos  +  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    =    str.charAt(0);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
48	[BUG]  [BUGGY]  exp  -=  str.substring(expPos  +  1,  str.length()  *  1);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  -=  str.substring(expPos  +  1,  str.length()  *  1);  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  -=  str.substring(expPos  +  1,  str.length()  *  1);	  exp    -=    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	18	None	replace
49	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1;  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1;  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Integer  expPos  =  str.indexOf('.')+  1;	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	4	None	replace
50	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  expPos);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  expPos);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Integer  expPos  =  str.indexOf('.'  +  expPos);	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	4	None	replace
51	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length();  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length();  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  =  str.substring(expPos  +  1,  str.length();	  exp    =    str.substring(expPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	9	None	replace
52	[BUG]  [BUGGY]  String  exp  =  str.substring(expPos  +  1,  str.length())+  1;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  String  exp  =  str.substring(expPos  +  1,  str.length())+  1;  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	String  exp  =  str.substring(expPos  +  1,  str.length())+  1;	      String    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
53	[BUG]  [BUGGY]  String  exp  =  str.substring(expPos  +  1,  str.length()  *  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  String  exp  =  str.substring(expPos  +  1,  str.length()  *  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	String  exp  =  str.substring(expPos  +  1,  str.length()  *  1);	      String    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
54	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  3,  str.length());  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  =  str.substring(expPos  +  3,  str.length());  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  =  str.substring(expPos  +  3,  str.length());	  exp    =    str.substring(expPos    +    2,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	8	None	replace
55	[BUG]  [BUGGY]  exp  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  =  str.substring(0,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  =  str.substring(0,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	12	None	replace
56	[BUG]  [BUGGY]  MutableString[]  exp  =  new  MutableString[str.length()  -  1];  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  MutableString[]  exp  =  new  MutableString[str.length()  -  1];  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	MutableString[]  exp  =  new  MutableString[str.length()  -  1];	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	12	None	replace
57	[BUG]  [BUGGY]  MutableString[]  exp  =  new  MutableString[str.length()  ];  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  MutableString[]  exp  =  new  MutableString[str.length()  ];  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	MutableString[]  exp  =  new  MutableString[str.length()  ];	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	12	None	replace
58	[BUG]  [BUGGY]  Dec  <  Object>  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Dec  <  Object>  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Dec  <  Object>  dec  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    dec    =    null;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
59	[BUG]  [BUGGY]  Dec  <  Object>  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Dec  <  Object>  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Dec  <  Object>  exp  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    dec    =    null;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
60	[BUG]  [BUGGY]  Dec  <  Object>  dec  =  str.substring(dec.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Dec  <  Object>  dec  =  str.substring(dec.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Dec  <  Object>  dec  =  str.substring(dec.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    dec    =    null;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
61	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  1  +  1);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  1  +  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	String  exp  =  str.substring(0,  str.length()  -  1  +  1);	      String    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	5	None	replace
62	[BUG]  [BUGGY]  ExpPos  expPos  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  ExpPos  expPos  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	ExpPos  expPos  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
63	[BUG]  [BUGGY]  Expression  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Expression  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Expression  exp  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
64	[BUG]  [BUGGY]  bucket  =  str.charAt(expPos  +  1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  bucket  =  str.charAt(expPos  +  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	bucket  =  str.charAt(expPos  +  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    return    null;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
65	[BUG]  [BUGGY]  ExpressionPos  expPos  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  ExpressionPos  expPos  =  str.indexOf('.',  expPos);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	ExpressionPos  expPos  =  str.indexOf('.',  expPos);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    expPos    =    str.indexOf('.',    expPos);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
66	[BUG]  [BUGGY]  Expr  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  Expr  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	Expr  exp  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    	non-compiled	[CE]  	10	None	replace
67	[BUG]  [BUGGY]  ExpPos  expPos  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  ExpPos  expPos  =  str.substring(0,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	ExpPos  expPos  =  str.substring(0,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    dec    =    null;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
68	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  4,  str.length());  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  =  str.substring(expPos  +  4,  str.length());  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  =  str.substring(expPos  +  4,  str.length());	  exp    =    str.substring(expPos    +    2,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	8	None	replace
69	[BUG]  [BUGGY]  String  exp  =  str.substring(expPos  +  2,  str.length());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  String  exp  =  str.substring(expPos  +  2,  str.length());  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	String  exp  =  str.substring(expPos  +  2,  str.length());	      String    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
70	[BUG]  [BUGGY]  ExpPos  str  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  ExpPos  str  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	ExpPos  str  =  str.substring(expPos  +  1,  str.length()  -  1);	      if(expPos    >    -1    &&    expPos    <    str.length()    -    1)    {    exp    =    str.substring(expPos    +    1,    str.length()    -    1);    }    else    {    return    null;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
71	[BUG]  [BUGGY]  exp  -=  str.substring(expPos  +  2,  str.length());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  exp  -=  str.substring(expPos  +  2,  str.length());  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	exp  -=  str.substring(expPos  +  2,  str.length());	  exp    -=    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	18	None	replace
72	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.')-  1;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  int  expPos  =  str.lastIndexOf('.')-  1;  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	int  expPos  =  str.lastIndexOf('.')-  1;	      int    expPos    =    str.length();    	non-compiled	[CE]  ')'  expected	1	None	replace
73	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.')+  1;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  int  expPos  =  str.lastIndexOf('.')+  1;  [BUGGY]    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	int  expPos  =  str.lastIndexOf('.')+  1;	      int    expPos    =    str.length();    	non-compiled	[CE]  ')'  expected	1	None	replace
74	[BUG]  [BUGGY]  expPos  =  str.substring(expPos  +  1,  str.lastIndexOf('.')-  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  }  if  (!Character.isDigit(lastChar)  &&  lastChar  !=  '.')  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {    [BUGGY]  expPos  =  str.substring(expPos  +  1,  str.lastIndexOf('.')-  1);  [BUGGY]    }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	496	496	1	replace	expPos  =  str.substring(expPos  +  1,  str.lastIndexOf('.')-  1);	  expPos    =    str.substring(expPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	7	None	replace
