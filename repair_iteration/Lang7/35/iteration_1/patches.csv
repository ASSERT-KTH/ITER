bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }	      if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
2	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  int  decPos  =  str.length();  return  createInteger(decPos);  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  int  decPos  =  str.length();  return  createInteger(decPos);  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  int  decPos  =  str.length();  return  createInteger(decPos);  }	      	non-compiled	[CE]  ')'  expected	4	None	replace
3	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  dec  =  str.substring(0,  str.length()  -  1);  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  dec  =  str.substring(0,  str.length()  -  1);  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  dec  =  str.substring(0,  str.length()  -  1);  }	      	non-compiled	[CE]  ')'  expected	4	None	replace
4	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  str.length()  -  1);	      	non-compiled	[CE]  ')'  expected	4	None	replace
5	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(expPos  +  1,  str.length()  -  1);	      exp    =    str.substring(expPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	6	None	replace
6	[BUG]  [BUGGY]  exp  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  exp  =  str.substring(0,  str.length()  -  1);  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(0,  str.length()  -  1);	      exp    =    str.substring(expPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	6	None	replace
7	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()  +  1);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()  +  1);  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(expPos  +  1,  str.length()  +  1);	      exp    =    str.substring(expPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	6	None	replace
8	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()  -  2);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()  -  2);  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(expPos  +  1,  str.length()  -  2);	      exp    =    str.substring(expPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	6	None	replace
9	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }	      if(dec    ==    null    &&    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
10	[BUG]  [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  ||  exp  ==  null)  {	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
11	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp!=  null)  {	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
12	[BUG]  [BUGGY]  }  else  if(dec!=  null  &&  exp  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec!=  null  &&  exp  ==  null)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec!=  null  &&  exp  ==  null)  {	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
13	[BUG]  [BUGGY]  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
14	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
15	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
16	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	14	None	replace
17	[BUG]  [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	14	None	replace
18	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	14	None	replace
19	[BUG]  [BUGGY]  }  catch(Throwable  nfe)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(Throwable  nfe)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(Throwable  nfe)  {	  }    catch(NumberFormatException    nfe)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
20	[BUG]  [BUGGY]  }  catch(NumberFormatException  e)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(NumberFormatException  e)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NumberFormatException  e)  {	  }    catch(NumberFormatException    nfe)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
21	[BUG]  [BUGGY]  }  catch(NoSuchElementException  nfe)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(NoSuchElementException  nfe)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NoSuchElementException  nfe)  {	  }    catch(NumberFormatException    nfe)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
22	[BUG]  [BUGGY]  }  catch(Throwable  nfe)  {  //  NOPMD  //  ignore  the  bad  number  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(Throwable  nfe)  {  //  NOPMD  //  ignore  the  bad  number  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(Throwable  nfe)  {  //  NOPMD  //  ignore  the  bad  number	  }    catch(NoSuchElementException    nfe)    {    //    NOPMD    //    ignore    the    bad    number    	non-compiled	[CE]  ')'  expected	3	None	replace
23	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  str.length()  +  1);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  dec  =  str.substring(decPos  +  1,  str.length()  +  1);  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  str.length()  +  1);	      dec    =    str.substring(decPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	5	None	replace
24	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  str.length()  -  2);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  dec  =  str.substring(decPos  +  1,  str.length()  -  2);  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  str.length()  -  2);	      dec    =    str.substring(decPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	5	None	replace
25	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  Dec  =  str.substring(decPos  +  1,  str.length()  -  1);  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(decPos  +  1,  str.length()  -  1);	      dec    =    str.substring(decPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	5	None	replace
26	[BUG]  [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch  (NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch  (NumberFormatException  nfe)  {  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch  (NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch    (NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	13	None	replace
27	[BUG]  [BUGGY]  }  catch(NumberFormatException  e)  {  //  NOPMD  //  ignore  the  bad  number  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(NumberFormatException  e)  {  //  NOPMD  //  ignore  the  bad  number  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NumberFormatException  e)  {  //  NOPMD  //  ignore  the  bad  number	  }    catch(NumberFormatException    nfe)    {    //    NOPMD    //    ignore    the    bad    number    	non-compiled	[CE]  ')'  expected	1	None	replace
28	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createBigDecimal(str);  }  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  &&  exp!=  null)  {  return  createBigDecimal(str);  }	      if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
29	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createNumber(str);  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createNumber(str);  }  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  return  createNumber(str);  }	      if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
30	[BUG]  [BUGGY]  }  else  if(nfe  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(nfe  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(nfe  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
31	[BUG]  [BUGGY]  if(null  ==  str)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(null  ==  str)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(null  ==  str)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	      if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	12	None	replace
32	[BUG]  [BUGGY]  if(null  ==  str)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(null  ==  str)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(null  ==  str)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	      if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	12	None	replace
33	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos.length());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos.length());  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  expPos.length());	      dec    =    str.substring(decPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	5	None	replace
34	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos.length());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos.length());  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(decPos  +  1,  expPos.length());	      dec    =    str.substring(decPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	5	None	replace
35	[BUG]  [BUGGY]  }  catch(NullPointerException  nfe)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(NullPointerException  nfe)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NullPointerException  nfe)  {	  }    catch(NumberFormatException    nfe)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
36	[BUG]  [BUGGY]  return  createBigDecimal(str);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  return  createBigDecimal(str);  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	return  createBigDecimal(str);	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	14	None	replace
37	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos);	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	14	None	replace
38	[BUG]  [BUGGY]  NeighborDecimal  d  =  createMantDecimal(str);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  NeighborDecimal  d  =  createMantDecimal(str);  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  d  =  createMantDecimal(str);	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	14	None	replace
39	[BUG]  [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);	  }    catch(NumberFormatException    nfe)    {    //    NOPMD    //    ignore    the    bad    number    	non-compiled	[CE]  ')'  expected	1	None	replace
40	[BUG]  [BUGGY]  return  createBigInteger(str);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  return  createBigInteger(str);  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	return  createBigInteger(str);	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch    (NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	13	None	replace
41	[BUG]  [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);	  }    catch(NoSuchElementException    nfe)    {    //    NOPMD    //    ignore    the    bad    number    	non-compiled	[CE]  ')'  expected	3	None	replace
42	[BUG]  [BUGGY]  Integer  dec  =  createInteger(str);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  Integer  dec  =  createInteger(str);  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  createInteger(str);	      if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
43	[BUG]  [BUGGY]  }  else  if(nfe  ==  null  &&  exp  ==  null)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(nfe  ==  null  &&  exp  ==  null)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(nfe  ==  null  &&  exp  ==  null)  {	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
44	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	14	None	replace
45	[BUG]  [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }	      if(dec    ==    null    &&    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
46	[BUG]  [BUGGY]  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	else  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
47	[BUG]  [BUGGY]  exp  =  str.substring(decPos  +  1,  str.length());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  exp  =  str.substring(decPos  +  1,  str.length());  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(decPos  +  1,  str.length());	      exp    =    str.substring(expPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	6	None	replace
48	[BUG]  [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]    }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }	      if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
49	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigInteger(str);  }  catch  (NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigInteger(str);  }  catch  (NumberFormatException  nfe)  {  }  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigInteger(str);  }  catch  (NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch    (NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	13	None	replace
50	[BUG]  [BUGGY]  }  catch(NumberFormatException  ne)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(NumberFormatException  ne)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NumberFormatException  ne)  {	  }    catch(NumberFormatException    nfe)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
51	[BUG]  [BUGGY]  }  catch(NumberFormatException  npe)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  catch(NumberFormatException  npe)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NumberFormatException  npe)  {	  }    catch(NumberFormatException    nfe)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
52	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  decPos)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);    [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  decPos)  {  [BUGGY]      }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  decPos)  {	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
