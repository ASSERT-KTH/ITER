bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  str.length());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  =  str.substring(decPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(decPos  +  1,  str.length());	  dec    =    str.substring(decPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	24	None	replace
2	[BUG]  [BUGGY]  desc  =  str.substring(decPos  +  1,  str.length());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  desc  =  str.substring(decPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	desc  =  str.substring(decPos  +  1,  str.length());	  dec    =    str.substring(decPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	24	None	replace
3	[BUG]  [BUGGY]  exp  -=  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  -=  str.substring(expPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  -=  str.substring(expPos  +  1,  str.length());	  exp    =    str.substring(expPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	8	None	replace
4	[BUG]  [BUGGY]  exp  +=  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  +=  str.substring(expPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  +=  str.substring(expPos  +  1,  str.length());	  exp    =    str.substring(expPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	8	None	replace
5	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(expPos  +  1,  str.length();	  exp    =    str.substring(expPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	8	None	replace
6	[BUG]  [BUGGY]  exp  = " "  +  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  = " "  +  str.substring(expPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  = " "  +  str.substring(expPos  +  1,  str.length());	  exp    =    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	5	None	replace
7	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	41	None	replace
8	[BUG]  [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NumberFormatException  nfe)  {  return  createLong(str);	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	41	None	replace
9	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createNull(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createNull(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createNull(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	41	None	replace
10	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	41	None	replace
11	[BUG]  [BUGGY]  catch(NumberFormatException  nfe)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  catch(NumberFormatException  nfe)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	catch(NumberFormatException  nfe)  {	  }    catch(Throwable    nfe)    {    //    NOPMD    //    ignore    the    bad    number    	non-compiled	[CE]  ')'  expected	22	None	replace
12	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	aughtExceptionHandler.throwInternal();	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
13	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionError( "msg.no.character ");  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  aughtExceptionHandler.throwAssertionError( "msg.no.character ");  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	aughtExceptionHandler.throwAssertionError( "msg.no.character ");	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
14	[BUG]  [BUGGY]  Iterator  <  String>  it  =  str.iterator();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Iterator  <  String>  it  =  str.iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Iterator  <  String>  it  =  str.iterator();	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
15	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionError( "msg.no.string ",  str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  aughtExceptionHandler.throwAssertionError( "msg.no.string ",  str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	aughtExceptionHandler.throwAssertionError( "msg.no.string ",  str);	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
16	[BUG]  [BUGGY]  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	else  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
17	[BUG]  [BUGGY]  else  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  else  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	else  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }	  else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
18	[BUG]  [BUGGY]  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	else  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }	  else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
19	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	44	None	replace
20	[BUG]  [BUGGY]  }  catch(Throwable  npe)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(Throwable  npe)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(Throwable  npe)  {	  }    catch(NumberFormatException    npe)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
21	[BUG]  [BUGGY]  }  catch(NoSuchElementException  npe)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(NoSuchElementException  npe)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NoSuchElementException  npe)  {	  }    catch(NumberFormatException    npe)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
22	[BUG]  [BUGGY]  }  catch(NoSuchElementException  e)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(NoSuchElementException  e)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NoSuchElementException  e)  {	  }    catch(NoSuchElementException    nfe)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
23	[BUG]  [BUGGY]  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	||  exp  ==  null)  {  return  createBigInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
24	[BUG]  [BUGGY]  ||  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  ||  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	||  exp  ==  null)  {  return  createInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
25	[BUG]  [BUGGY]  dec  =  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  dec  =  str.substring(expPos  +  1,  str.length());  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(expPos  +  1,  str.length());	  }    	non-compiled	[CE]  ')'  expected	13	None	replace
26	[BUG]  [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	18	None	replace
27	[BUG]  [BUGGY]  int  decPos  =  str.length();  return  createInteger(decPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  int  decPos  =  str.length();  return  createInteger(decPos);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	int  decPos  =  str.length();  return  createInteger(decPos);	  if(dec    ==    null    &&    exp    ==    null)    {    int    decPos    =    str.length();    return    createInteger(decPos);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
28	[BUG]  [BUGGY]  Integer  decPos  =  str.length();  return  createInteger(decPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  decPos  =  str.length();  return  createInteger(decPos);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  decPos  =  str.length();  return  createInteger(decPos);	  if(dec    ==    null    &&    exp    ==    null)    {    int    decPos    =    str.length();    return    createInteger(decPos);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
29	[BUG]  [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }	  }    else    if(dec    ==    null    &&    exp!=    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
30	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  str.length());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  str.length());  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  str.substring(decPos  +  1,  str.length());	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	37	None	replace
31	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos  +  1);	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	37	None	replace
32	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  str.substring(decPos  +  1,  str.length()  -  1);	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	37	None	replace
33	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  hexDigits);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  hexDigits);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  str.substring(decPos  +  1,  hexDigits);	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	37	None	replace
34	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigDecimal(str);    	non-compiled	[CE]  ')'  expected	39	None	replace
35	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigDecimal(str);    	non-compiled	[CE]  ')'  expected	39	None	replace
36	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createNull(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createNull(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createNull(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigDecimal(str);    	non-compiled	[CE]  ')'  expected	39	None	replace
37	[BUG]  [BUGGY]  Dec  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  =  str.substring(0,  str.length()  -  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(0,  str.length()  -  1);	  Dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	34	None	replace
38	[BUG]  [BUGGY]  Dec  =  str.substring(expPos  +  1,  str.length());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  =  str.substring(expPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(expPos  +  1,  str.length());	  Dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	34	None	replace
39	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  &&  exp!=  null)  {  return  createLong(str);  }	  if(dec    ==    null    &&    exp!=    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
40	[BUG]  [BUGGY]  return  createLong(str);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  return  createLong(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	return  createLong(str);	  return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	40	None	replace
41	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createNull(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createNull(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  return  createNull(str);  }	  return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	40	None	replace
42	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  hexDigits)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  hexDigits)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  hexDigits)  {	  }    else    if(dec    ==    null    &&    exp    ==    null    ||    decPos    <    decPos)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
43	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  str.length())  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  str.length())  {	  }    else    if(dec    ==    null    &&    exp    ==    null    ||    decPos    <    decPos)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
44	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  expPos  <  decPos)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  expPos  <  decPos)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null  ||  expPos  <  decPos)  {	  }    else    if(dec    ==    null    &&    exp    ==    null    ||    decPos    <    decPos)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
45	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  len)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  len)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null  ||  decPos  <  len)  {	  }    else    if(dec    ==    null    &&    exp    ==    null    ||    decPos    <    decPos)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
46	[BUG]  [BUGGY]  Integer  dec  =  createInteger(0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  createInteger(0);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  createInteger(0);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	42	None	replace
47	[BUG]  [BUGGY]  Integer  dec  =  createInteger(dec);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  createInteger(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  createInteger(dec);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	42	None	replace
48	[BUG]  [BUGGY]  Integer  dec  =  createLong(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  createLong(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  createLong(str);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	42	None	replace
49	[BUG]  [BUGGY]  Integer  dec  =  createInteger(decPos);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  createInteger(decPos);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  createInteger(decPos);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	42	None	replace
50	[BUG]  [BUGGY]  }  catch(Exception  nfe)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(Exception  nfe)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(Exception  nfe)  {	  }    catch(Throwable    nfe)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
51	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createNumber(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createNumber(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(dec  ==  null  &&  exp!=  null)  {  return  createNumber(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    return    createNumber(str);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
52	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
53	[BUG]  [BUGGY]  NeighborDecimal  d  =  createMantDecimal(dec);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  NeighborDecimal  d  =  createMantDecimal(dec);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  d  =  createMantDecimal(dec);	  NeighborDecimal    d    =    createMantDecimal(str);    	non-compiled	[CE]  ')'  expected	38	None	replace
54	[BUG]  [BUGGY]  NeighborDecimal  d  =  createMantDecimal(str,  dec);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  NeighborDecimal  d  =  createMantDecimal(str,  dec);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  d  =  createMantDecimal(str,  dec);	  NeighborDecimal    d    =    createMantDecimal(str);    	non-compiled	[CE]  ')'  expected	38	None	replace
55	[BUG]  [BUGGY]  NeighborDecimal  d  =  createMantDecimal(str,  expPos);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  NeighborDecimal  d  =  createMantDecimal(str,  expPos);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  d  =  createMantDecimal(str,  expPos);	  NeighborDecimal    d    =    createMantDecimal(str);    	non-compiled	[CE]  ')'  expected	38	None	replace
56	[BUG]  [BUGGY]  NeighborDecimal  d  =  createNumber(str);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  NeighborDecimal  d  =  createNumber(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  d  =  createNumber(str);	  NeighborDecimal    d    =    createMantDecimal(str);    	non-compiled	[CE]  ')'  expected	38	None	replace
57	[BUG]  [BUGGY]  return  createInteger(str);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  return  createInteger(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	return  createInteger(str);	  return    createBigDecimal(str);    	non-compiled	[CE]  ')'  expected	36	None	replace
58	[BUG]  [BUGGY]  return  createDouble(str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  return  createDouble(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	return  createDouble(str);	  return    createBigDecimal(str);    	non-compiled	[CE]  ')'  expected	36	None	replace
59	[BUG]  [BUGGY]  return  createBigDecimal(dec);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  return  createBigDecimal(dec);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	return  createBigDecimal(dec);	  return    createBigDecimal(str);    	non-compiled	[CE]  ')'  expected	36	None	replace
60	[BUG]  [BUGGY]  dec  =  str.substring(0,  str.length());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  dec  =  str.substring(0,  str.length());  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(0,  str.length());	  if(dec    ==    null    &&    exp    ==    null)    {    dec    =    str.substring(0,    str.length()    -    1);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
61	[BUG]  [BUGGY]  Dec  <?>  dec  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  <?>  dec  =  str.substring(0,  str.length()  -  1);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  <?>  dec  =  str.substring(0,  str.length()  -  1);	  if(dec    ==    null    &&    exp    ==    null)    {    dec    =    str.substring(0,    str.length()    -    1);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
62	[BUG]  [BUGGY]  dec  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  dec  =  str.substring(0,  str.length()  -  1);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(0,  str.length()  -  1);	  if(dec    ==    null    &&    exp    ==    null)    {    dec    =    str.substring(0,    str.length()    -    1);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
63	[BUG]  [BUGGY]  }  else  if(str  ==  null  ||  exp  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(str  ==  null  ||  exp  ==  null)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(str  ==  null  ||  exp  ==  null)  {	  }    else    if(dec    ==    null    ||    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	10	None	replace
64	[BUG]  [BUGGY]  }  catch(Throwable  e)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(Throwable  e)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(Throwable  e)  {	  }    catch(NumberFormatException    e)    {    	non-compiled	[CE]  ')'  expected	20	None	replace
65	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos.length()  -  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos.length()  -  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  expPos.length()  -  1);	  dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	33	None	replace
66	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  expPos  +  1);	  dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	33	None	replace
67	[BUG]  [BUGGY]  }  else  if(str  ==  null  &&  exp  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(str  ==  null  &&  exp  ==  null)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(str  ==  null  &&  exp  ==  null)  {	  }    else    if(nfe    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
68	[BUG]  [BUGGY]  }  else  if(nfe  ==  null  ||  exp  ==  null)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(nfe  ==  null  ||  exp  ==  null)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(nfe  ==  null  ||  exp  ==  null)  {	  }    else    if(nfe    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
69	[BUG]  [BUGGY]  exp  =  str.substring(0,  str.length());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(0,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(0,  str.length());	  exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
70	[BUG]  [BUGGY]  exp  =  str.substring(0,  str.length()  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(0,  str.length()  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(0,  str.length()  +  1);	  exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
71	[BUG]  [BUGGY]  exp  =  str.substring(0,  str.length();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(0,  str.length();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(0,  str.length();	  exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
72	[BUG]  [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	aughtExceptionHandler.handleMalformedException( " ");	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
73	[BUG]  [BUGGY]  nisip  =  str.charAt(decPos  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  nisip  =  str.charAt(decPos  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	nisip  =  str.charAt(decPos  +  1);	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
74	[BUG]  [BUGGY]  nisip  =  str.charAt(decPos  -  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  nisip  =  str.charAt(decPos  -  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	nisip  =  str.charAt(decPos  -  1);	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
75	[BUG]  [BUGGY]  exp  =  str.substring(decPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(decPos  +  1,  str.length()  -  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(decPos  +  1,  str.length()  -  1);	  exp    =    str.substring(decPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	47	None	replace
76	[BUG]  [BUGGY]  exp  =  str.substring(decPos  +  1,  str.length()  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(decPos  +  1,  str.length()  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(decPos  +  1,  str.length()  +  1);	  exp    =    str.substring(decPos    +    1,    str.length());    	non-compiled	[CE]  ')'  expected	47	None	replace
77	[BUG]  [BUGGY]  }  catch(Throwable  ne)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(Throwable  ne)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(Throwable  ne)  {	  }    catch(NumberFormatException    ne)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
78	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	17	None	replace
79	[BUG]  [BUGGY]  DEC  =  str.substring(decPos  +  1,  str.length());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  DEC  =  str.substring(decPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	DEC  =  str.substring(decPos  +  1,  str.length());	  dec    =    str.substring(decPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	24	None	replace
80	[BUG]  [BUGGY]  }  catch(NullPointerException  npe)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(NullPointerException  npe)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NullPointerException  npe)  {	  }    catch(NumberFormatException    npe)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
81	[BUG]  [BUGGY]  Dec  <  Object>  dec  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  <  Object>  dec  =  str.substring(0,  str.length()  -  1);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  <  Object>  dec  =  str.substring(0,  str.length()  -  1);	  if(dec    ==    null    &&    exp    ==    null)    {    dec    =    str.substring(0,    str.length()    -    1);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
82	[BUG]  [BUGGY]  Integer  dec  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  str.substring(0,  str.length()  -  1);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  str.substring(0,  str.length()  -  1);	  if(dec    ==    null    &&    exp    ==    null)    {    dec    =    str.substring(0,    str.length()    -    1);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
83	[BUG]  [BUGGY]  Integer  dec  =  createBigInteger(str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  createBigInteger(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  createBigInteger(str);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	42	None	replace
84	[BUG]  [BUGGY]  Integer  dec  =  createInteger(1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  createInteger(1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  createInteger(1);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	42	None	replace
85	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  &&  expPos  <  decPos)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  &&  expPos  <  decPos)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null  &&  expPos  <  decPos)  {	  }    else    if(dec    ==    null    &&    exp    ==    null    ||    decPos    <    decPos)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
86	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  expPos  <  hexDigits)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  expPos  <  hexDigits)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null  ||  expPos  <  hexDigits)  {	  }    else    if(dec    ==    null    &&    exp    ==    null    ||    decPos    <    decPos)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
87	[BUG]  [BUGGY]  if(null  ==  str)  {  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  if(null  ==  str)  {  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(null  ==  str)  {  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }	  if(dec    ==    null    &&    exp!=    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
88	[BUG]  [BUGGY]  if(null  ==  str)  {  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  if(null  ==  str)  {  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(null  ==  str)  {  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }	  if(dec    ==    null    &&    exp!=    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
89	[BUG]  [BUGGY]  Nullable  <  String>  dec  =  str.substring(decPos  +  1,  str.length());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Nullable  <  String>  dec  =  str.substring(decPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Nullable  <  String>  dec  =  str.substring(decPos  +  1,  str.length());	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
90	[BUG]  [BUGGY]  Nullable  <  String>  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Nullable  <  String>  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Nullable  <  String>  dec  =  str.substring(decPos  +  1,  str.length()  -  1);	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
91	[BUG]  [BUGGY]  Nullable  <  String>  dec  =  str.substring(decPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Nullable  <  String>  dec  =  str.substring(decPos  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Nullable  <  String>  dec  =  str.substring(decPos  +  1);	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
92	[BUG]  [BUGGY]  return  createInteger(dec);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  return  createInteger(dec);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	return  createInteger(dec);	  return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	40	None	replace
93	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	41	None	replace
94	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	41	None	replace
95	[BUG]  [BUGGY]  else  if(nfe  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  else  if(nfe  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	else  if(nfe  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
96	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos.length()  -  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(decPos  +  1,  expPos.length()  -  1);	  Dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	34	None	replace
97	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(decPos  +  1,  expPos  +  1);	  Dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	34	None	replace
98	[BUG]  [BUGGY]  Dec  =  str.substring(0,  expPos.length()  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  =  str.substring(0,  expPos.length()  -  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(0,  expPos.length()  -  1);	  Dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	34	None	replace
99	[BUG]  [BUGGY]  }  catch(NoMeanException  nfe)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(NoMeanException  nfe)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NoMeanException  nfe)  {	  }    catch(NoSuchElementException    nfe)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
100	[BUG]  [BUGGY]  NeighborDecimal  str  =  createNeighborDecimal(str);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  NeighborDecimal  str  =  createNeighborDecimal(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  str  =  createNeighborDecimal(str);	  }    else    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	44	None	replace
101	[BUG]  [BUGGY]  exp  =  str.substring(ExpPos  +  1,  str.length());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(ExpPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(ExpPos  +  1,  str.length());	  exp    =    str.substring(expPos    +    1,    str.length()    -    2);    	non-compiled	[CE]  ')'  expected	8	None	replace
102	[BUG]  [BUGGY]  }  else  if(nfe  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(nfe  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(nfe  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  }    else    if(nfe    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
103	[BUG]  [BUGGY]  exp  =  str.substring(0,  str.length())+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(0,  str.length())+  1;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(0,  str.length())+  1;	  exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
104	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  decPos  =  str.length();  return  createInteger(decPos);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  decPos  =  str.length();  return  createInteger(decPos);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  decPos  =  str.length();  return  createInteger(decPos);  }	  if(dec    ==    null    &&    exp    ==    null)    {    int    decPos    =    str.length();    return    createInteger(decPos);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
105	[BUG]  [BUGGY]  }  else  if(mant  ==  null  &&  exp  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(mant  ==  null  &&  exp  ==  null)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(mant  ==  null  &&  exp  ==  null)  {	  }    else    if(nfe    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
106	[BUG]  [BUGGY]  }  else  if(nfe!=  null  &&  exp  ==  null)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(nfe!=  null  &&  exp  ==  null)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(nfe!=  null  &&  exp  ==  null)  {	  }    else    if(nfe    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
107	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigDecimal(str);    	non-compiled	[CE]  ')'  expected	39	None	replace
108	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  String  dec  =  str.substring(expPos  +  1,  str.length());  return  createBigDecimal(dec);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  String  dec  =  str.substring(expPos  +  1,  str.length());  return  createBigDecimal(dec);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  String  dec  =  str.substring(expPos  +  1,  str.length());  return  createBigDecimal(dec);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigDecimal(str);    	non-compiled	[CE]  ')'  expected	39	None	replace
109	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos  -  1);	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	37	None	replace
110	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos  +  2);	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	37	None	replace
111	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  hexDigits.length());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  hexDigits.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  expPos  +  hexDigits.length());	  dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	33	None	replace
112	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +.length());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  expPos  +.length());	  dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	33	None	replace
113	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  catch  (NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  catch  (NumberFormatException  nfe)  {  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  catch  (NumberFormatException  nfe)  {  }	  }    else    if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch    (NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	26	None	replace
114	[BUG]  [BUGGY]  NeighborDecimal  d  =  createDouble(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  NeighborDecimal  d  =  createDouble(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  d  =  createDouble(str);	  NeighborDecimal    d    =    createMantDecimal(str);    	non-compiled	[CE]  ')'  expected	38	None	replace
115	[BUG]  [BUGGY]  NeighborDecimal  d  =  createInteger(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  NeighborDecimal  d  =  createInteger(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  d  =  createInteger(str);	  NeighborDecimal    d    =    createMantDecimal(str);    	non-compiled	[CE]  ')'  expected	38	None	replace
116	[BUG]  [BUGGY]  }  else  if(nfe  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(nfe  ==  null)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(nfe  ==  null)  {	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	16	None	replace
117	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()).length();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(expPos  +  1,  str.length()).length();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(expPos  +  1,  str.length()).length();	  exp    =    str.substring(expPos    +    1,    str.length()    +    1);    	non-compiled	[CE]  ')'  expected	7	None	replace
118	[BUG]  [BUGGY]  NeighborDecimal  d  =  createNeighborDecimal(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  NeighborDecimal  d  =  createNeighborDecimal(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  d  =  createNeighborDecimal(str);	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	18	None	replace
119	[BUG]  [BUGGY]  }  catch(NullPointerException  e)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(NullPointerException  e)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NullPointerException  e)  {	  }    catch(NumberFormatException    e)    {    	non-compiled	[CE]  ')'  expected	20	None	replace
120	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(str);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  aughtExceptionHandler.handleMissingName(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	aughtExceptionHandler.handleMissingName(str);	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
121	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssign( "msg.no.string ",  str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  aughtExceptionHandler.throwAssign( "msg.no.string ",  str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	aughtExceptionHandler.throwAssign( "msg.no.string ",  str);	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
122	[BUG]  [BUGGY]  }  else  if(dec  >=  null  &&  exp  ==  null)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  >=  null  &&  exp  ==  null)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  >=  null  &&  exp  ==  null)  {	  }    else    if(dec!=    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
123	[BUG]  [BUGGY]  }  else  if(dec!=  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec!=  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec!=  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  }    else    if(dec    ==    null    &&    exp!=    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
124	[BUG]  [BUGGY]  int  decPos  =  str.substring(decPos  +  1,  str.length());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  int  decPos  =  str.substring(decPos  +  1,  str.length());  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	int  decPos  =  str.substring(decPos  +  1,  str.length());	  dec    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	4	None	replace
125	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createNumber(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createNumber(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createNumber(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigDecimal(str);    	non-compiled	[CE]  ')'  expected	39	None	replace
126	[BUG]  [BUGGY]  }  catch(NoSuchElementException  ne)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(NoSuchElementException  ne)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(NoSuchElementException  ne)  {	  }    catch(NumberFormatException    ne)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
127	[BUG]  [BUGGY]  NeighborDecimal  d  =  createNumberDecimal(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  NeighborDecimal  d  =  createNumberDecimal(str);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	NeighborDecimal  d  =  createNumberDecimal(str);	  NeighborDecimal    d    =    createMantDecimal(str);    	non-compiled	[CE]  ')'  expected	38	None	replace
128	[BUG]  [BUGGY]  exp  =  str.substring(expPos  +  2,  str.length());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  exp  =  str.substring(expPos  +  2,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	exp  =  str.substring(expPos  +  2,  str.length());	  exp    =    str.substring(expPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	5	None	replace
129	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(decPos  +  1,  expPos  +  2);	  Dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	34	None	replace
130	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  3);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  3);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Dec  =  str.substring(decPos  +  1,  expPos  +  3);	  Dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	34	None	replace
131	[BUG]  [BUGGY]  else  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  else  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	else  if(dec  ==  null  &&  exp!=  null)  {  return  createBigInteger(str);  }	  else    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
132	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  3);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  3);  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos  +  3);	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	37	None	replace
133	[BUG]  [BUGGY]  }  else  if(denominator  ==  null  &&  exp  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(denominator  ==  null  &&  exp  ==  null)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(denominator  ==  null  &&  exp  ==  null)  {	  }    else    if(nfe    ==    null    &&    exp    ==    null)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
134	[BUG]  [BUGGY]  nisip  =  Integer.parseInt(str);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  nisip  =  Integer.parseInt(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	nisip  =  Integer.parseInt(str);	  if(null    ==    str)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
135	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  expPos  +  2);	  dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	33	None	replace
136	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	dec  =  str.substring(decPos  +  1,  expPos  -  1);	  dec    =    str.substring(decPos    +    1,    expPos.length());    	non-compiled	[CE]  ')'  expected	33	None	replace
137	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  exp  >  decPos)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  ||  exp  >  decPos)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null  ||  exp  >  decPos)  {	  }    else    if(dec    ==    null    &&    exp    ==    null    ||    decPos    <    decPos)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
138	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  &&  exp  <  decPos)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null  &&  exp  <  decPos)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null  &&  exp  <  decPos)  {	  }    else    if(dec    ==    null    &&    exp    ==    null    ||    decPos    <    decPos)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
139	[BUG]  [BUGGY]  Decimal  str  =  str.substring(decPos  +  1,  str.length());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Decimal  str  =  str.substring(decPos  +  1,  str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Decimal  str  =  str.substring(decPos  +  1,  str.length());	  Dec    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	25	None	replace
140	[BUG]  [BUGGY]  Integer  dec  =  createInteger(str  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  createInteger(str  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  createInteger(str  +  1);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	42	None	replace
141	[BUG]  [BUGGY]  Integer  dec  =  createInteger(str,  decPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  Integer  dec  =  createInteger(str,  decPos);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	Integer  dec  =  createInteger(str,  decPos);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	42	None	replace
142	[BUG]  [BUGGY]  }  catch(UnsupportedOperationException  nfe)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  catch(UnsupportedOperationException  nfe)  {  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  catch(UnsupportedOperationException  nfe)  {	  }    catch(Throwable    nfe)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
143	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	41	None	replace
144	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  null;  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [BUGGY]        }  try  {  return  createLong(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  return  createBigInteger(str);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	564	566	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	41	None	replace
