bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createLong(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Integer  f  =  NumberUtils.createLong(numeric);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Integer  f  =  NumberUtils.createLong(numeric);	  Integer    f    =    NumberUtils.createInteger(str);    	non-compiled	[CE]  ')'  expected	21	None	replace
2	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(str.floatValue());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(str.floatValue());  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(str.floatValue());	  Float    f    =    NumberUtils.createFloat(numeric.floatValue());    	non-compiled	[CE]  ')'  expected	2	None	replace
3	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue()  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue()  +  1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(numeric.floatValue()  +  1);	  Float    f    =    NumberUtils.createFloat(numeric.floatValue());    	non-compiled	[CE]  ')'  expected	2	None	replace
4	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue(),  str);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue(),  str);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(numeric.floatValue(),  str);	  Float    f    =    NumberUtils.createFloat(numeric.floatValue());    	non-compiled	[CE]  ')'  expected	2	None	replace
5	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!allZeros)))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!allZeros)))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0D    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
6	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0f  &&!allZeros)))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0f  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0f  &&!allZeros)))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0D    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
7	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0d  &&!allZeros)))  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0d  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0d  &&!allZeros)))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0D    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
8	[BUG]  [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros)))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros)))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0F    ||!allZeros)))    {    	non-compiled	[CE]  ')'  expected	27	None	replace
9	[BUG]  [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros)))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros)))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0F    ||!allZeros)))    {    	non-compiled	[CE]  ')'  expected	27	None	replace
10	[BUG]  [BUGGY]  float  f  =  NumberUtils.createDouble(numeric);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createDouble(numeric);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createDouble(numeric);	  float    f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	3	None	replace
11	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric.doubleValue()  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createFloat(numeric.doubleValue()  +  1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createFloat(numeric.doubleValue()  +  1);	  float    f    =    NumberUtils.createFloat(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	9	None	replace
12	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(str.doubleValue());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createFloat(str.doubleValue());  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createFloat(str.doubleValue());	  float    f    =    NumberUtils.createFloat(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	9	None	replace
13	[BUG]  [BUGGY]  float  f  =  NumberUtils.createLong(numeric.doubleValue());  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createLong(numeric.doubleValue());  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createLong(numeric.doubleValue());	  float    f    =    NumberUtils.createFloat(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	9	None	replace
14	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric.doubleValue()  -  1);  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createFloat(numeric.doubleValue()  -  1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createFloat(numeric.doubleValue()  -  1);	  float    f    =    NumberUtils.createFloat(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	9	None	replace
15	[BUG]  [BUGGY]  if(!f.isInfinite()  &&  f.floatValue()  ==  0.0F  ||!allZeros)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  &&  f.floatValue()  ==  0.0F  ||!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  &&  f.floatValue()  ==  0.0F  ||!allZeros)  {	  if(!f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||!allZeros)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
16	[BUG]  [BUGGY]  if(!f.isInfinite()  ||  f.floatValue()  ==  0.0F)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  ||  f.floatValue()  ==  0.0F)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  ||  f.floatValue()  ==  0.0F)  {	  if(!f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||!allZeros)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
17	[BUG]  [BUGGY]  if(!f.isInfinite()  ||  f.floatValue()  ==  0.0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  ||  f.floatValue()  ==  0.0)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  ||  f.floatValue()  ==  0.0)  {	  if(!f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||!allZeros)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
18	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  2);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  2);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(numeric  +  2);	  Float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	28	None	replace
19	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(str  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(str  +  1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(str  +  1);	  Float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	28	None	replace
20	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  3);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  3);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(numeric  +  3);	  Float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	28	None	replace
21	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()!=  0.0)&&!allZeros)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()!=  0.0)&&!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()!=  0.0)&&!allZeros)  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0)&&!allZeros)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
22	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0)&&!AllZeros)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0)&&!AllZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0)&&!AllZeros)  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0)&&!allZeros)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
23	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  1.0)&&!allZeros)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  1.0)&&!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  1.0)&&!allZeros)  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0)&&!allZeros)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
24	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  1.0  &&!allZeros))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  1.0  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  1.0  &&!allZeros))  {	  if(!(f.isNaN()    ||    f.floatValue()    ==    0.0F    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
25	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0D  &&!allZeros))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0D  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  0.0D  &&!allZeros))  {	  if(!(f.isNaN()    ||    f.floatValue()    ==    0.0F    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
26	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0f  &&!allZeros))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0f  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  0.0f  &&!allZeros))  {	  if(!(f.isNaN()    ||    f.floatValue()    ==    0.0F    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
27	[BUG]  [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0F    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	38	None	replace
28	[BUG]  [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  ||!allZeros))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0F    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	38	None	replace
29	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!allZeros))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!allZeros))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    1.0    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
30	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()!=  0.0  &&!allZeros))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()!=  0.0  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()!=  0.0  &&!allZeros))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    1.0    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
31	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(str.doubleValue());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(str.doubleValue());  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(str.doubleValue());	  Float    f    =    NumberUtils.createFloat(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	25	None	replace
32	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.doubleValue()  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.doubleValue()  +  1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(numeric.doubleValue()  +  1);	  Float    f    =    NumberUtils.createFloat(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	25	None	replace
33	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.doubleValue()  -  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.doubleValue()  -  1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(numeric.doubleValue()  -  1);	  Float    f    =    NumberUtils.createFloat(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	25	None	replace
34	[BUG]  [BUGGY]  float  f  =  NumberUtils.createLong(numeric).floatValue();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createLong(numeric).floatValue();  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createLong(numeric).floatValue();	  float    f    =    NumberUtils.createFloat(numeric).floatValue();    	non-compiled	[CE]  ')'  expected	36	None	replace
35	[BUG]  [BUGGY]  float  f  =  NumberUtils.createInteger(numeric).floatValue();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createInteger(numeric).floatValue();  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createInteger(numeric).floatValue();	  float    f    =    NumberUtils.createFloat(numeric).floatValue();    	non-compiled	[CE]  ')'  expected	36	None	replace
36	[BUG]  [BUGGY]  float  f  =  NumberUtils.createDouble(numeric).floatValue();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createDouble(numeric).floatValue();  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createDouble(numeric).floatValue();	  float    f    =    NumberUtils.createFloat(numeric).floatValue();    	non-compiled	[CE]  ')'  expected	36	None	replace
37	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  1.0  &&!allZeros)))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  1.0  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  1.0  &&!allZeros)))  {	  if(!(f.isNaN()    ||    f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
38	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0D  &&!allZeros)))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0D  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  0.0D  &&!allZeros)))  {	  if(!(f.isNaN()    ||    f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
39	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0L  &&!allZeros)))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0L  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  0.0L  &&!allZeros)))  {	  if(!(f.isNaN()    ||    f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
40	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!allZeros))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!allZeros))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    1.0    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
41	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.5  &&!allZeros))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.5  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.5  &&!allZeros))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    1.0    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
42	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()!=  0.0  &&!allZeros))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()!=  0.0  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()!=  0.0  &&!allZeros))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    1.0    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
43	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(str).intValue();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Integer  f  =  NumberUtils.createInteger(str).intValue();  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Integer  f  =  NumberUtils.createInteger(str).intValue();	  Integer    f    =    NumberUtils.createInteger(numeric).intValue();    	non-compiled	[CE]  ')'  expected	35	None	replace
44	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).floatValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).floatValue();  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Integer  f  =  NumberUtils.createInteger(numeric).floatValue();	  Integer    f    =    NumberUtils.createInteger(numeric).intValue();    	non-compiled	[CE]  ')'  expected	35	None	replace
45	[BUG]  [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros)))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros)))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0f    ||!allZeros)))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
46	[BUG]  [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros)))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros)))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0f    ||!allZeros)))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
47	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0)&&!allZeros)  {  [CE]  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0)&&!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0)&&!allZeros)  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0F)||!allZeros)    {    	non-compiled	[CE]  	24	None	replace
48	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()!=  0.0F)&&!allZeros)  {  [CE]  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()!=  0.0F)&&!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()!=  0.0F)&&!allZeros)  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0F)||!allZeros)    {    	non-compiled	[CE]  	24	None	replace
49	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F)&&!AllZeros)  {  [CE]  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F)&&!AllZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F)&&!AllZeros)  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0F)||!allZeros)    {    	non-compiled	[CE]  	24	None	replace
50	[BUG]  [BUGGY]  float  f  =  NumberUtils.createInteger(str);  [CE]  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createInteger(str);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createInteger(str);	  int    f    =    NumberUtils.createInteger(str);    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric.longValue());  [CE]  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createFloat(numeric.longValue());  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createFloat(numeric.longValue());	  float    f    =    NumberUtils.createLong(numeric.longValue());    	non-compiled	[CE]  	13	None	replace
52	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&  f.charAt(0)  ==  '-'))  {  [CE]  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&  f.charAt(0)  ==  '-'))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&  f.charAt(0)  ==  '-'))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    '-'))    {    	non-compiled	[CE]  	40	None	replace
53	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.value()  ==  0.0F  ||  f.charAt(0)  ==  '-'))  {  [CE]  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.value()  ==  0.0F  ||  f.charAt(0)  ==  '-'))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.value()  ==  0.0F  ||  f.charAt(0)  ==  '-'))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    '-'))    {    	non-compiled	[CE]  	40	None	replace
54	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(1)  ==  '-'))  {  [CE]  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(1)  ==  '-'))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(1)  ==  '-'))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    '-'))    {    	non-compiled	[CE]  	40	None	replace
55	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0f  &&!allZeros))  {  [CE]  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0f  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0f  &&!allZeros))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0D    &&!allZeros))    {    	non-compiled	[CE]  	11	None	replace
56	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()!=  0.0F)&&!allZeros)  {  [CE]  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()!=  0.0F)&&!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()!=  0.0F)&&!allZeros)  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F)&&!allZeros)    {    	non-compiled	[CE]  	33	None	replace
57	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0)&&!hasMoreElements())  {  [CE]  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0)&&!hasMoreElements())  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0)&&!hasMoreElements())  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!hasMoreElements()))    {    	non-compiled	[CE]  	34	None	replace
58	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!hasMoreElements()))  {  [CE]  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!hasMoreElements()))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0  &&!hasMoreElements()))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!hasMoreElements()))    {    	non-compiled	[CE]  	34	None	replace
59	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  1.0  &&!hasMoreElements()))  {  [CE]  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  1.0  &&!hasMoreElements()))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  1.0  &&!hasMoreElements()))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!hasMoreElements()))    {    	non-compiled	[CE]  	34	None	replace
60	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  0  <  =  allZeros))  {  [CE]  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  0  <  =  allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  0  <  =  allZeros))  {	  if(!(f.isInfinite()    ||    f.floatValue()    <    0.0F    ||!allZeros))    {    	non-compiled	[CE]  	41	None	replace
61	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  Float.isInfinite(numeric)))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  Float.isInfinite(numeric)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  Float.isInfinite(numeric)))  {	  if(!(f.isInfinite()    ||    f.floatValue()    <    0.0F    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
62	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(str).floatValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(str).floatValue();  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(str).floatValue();	  Float    f    =    NumberUtils.createFloat(numeric).floatValue();    	non-compiled	[CE]  ')'  expected	30	None	replace
63	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.5  &&!allZeros)))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.5  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.5  &&!allZeros)))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    1.0    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	18	None	replace
64	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    ')')    {    	non-compiled	[CE]  ')'  expected	39	None	replace
65	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.value()  ==  0.0F  ||  f.charAt(0)  ==  ')')  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.value()  ==  0.0F  ||  f.charAt(0)  ==  ')')  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.value()  ==  0.0F  ||  f.charAt(0)  ==  ')')  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    ')')    {    	non-compiled	[CE]  ')'  expected	39	None	replace
66	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&  f.charAt(0)  ==  ')')  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&  f.charAt(0)  ==  ')')  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&  f.charAt(0)  ==  ')')  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    ')')    {    	non-compiled	[CE]  ')'  expected	39	None	replace
67	[BUG]  [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0f    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
68	[BUG]  [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(f.isInfinite()  ||(f.floatValue()  ==  0.0f  ||!allZeros))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0f    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
69	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0  &&!allZeros))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0  &&!allZeros))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.5    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
70	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  >=  0.0F  &&!allZeros)))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  >=  0.0F  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  >=  0.0F  &&!allZeros)))  {	  if(!(f.isInfinite()    ||    f.floatValue()!=    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
71	[BUG]  [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {	  if(!f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
72	[BUG]  [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  ==  0.0F  &&!allZeros))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  ==  0.0F  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  &&(f.floatValue()  ==  0.0F  &&!allZeros))  {	  if(!f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
73	[BUG]  [BUGGY]  float  f  =  NumberUtils.createLong(numeric  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createLong(numeric  +  1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createLong(numeric  +  1);	  float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	31	None	replace
74	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  2);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  2);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createFloat(numeric  +  2);	  float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	31	None	replace
75	[BUG]  [BUGGY]  float  f  =  NumberUtils.createInteger(numeric  +  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createInteger(numeric  +  1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createInteger(numeric  +  1);	  float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	31	None	replace
76	[BUG]  [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {	  if(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
77	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F)&&!allZeros)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F)&&!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F)&&!allZeros)  {	  if(!(f.isNaN()    ||    f.floatValue()    ==    0.0F    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
78	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F  ||!allZeros))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F  ||!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F  ||!allZeros))  {	  if(!(f.isNaN()    ||    f.floatValue()    ==    0.0F    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
79	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F  ||!allZeros)))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F  ||!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F  ||!allZeros)))  {	  if(!(f.isNaN()    ||    f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
80	[BUG]  [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  ==  0.0f  ||!f.hasMoreElements()))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  ==  0.0f  ||!f.hasMoreElements()))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  &&(f.floatValue()  ==  0.0f  ||!f.hasMoreElements()))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0f    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
81	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric).doubleValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric).doubleValue();  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(numeric).doubleValue();	  Float    f    =    NumberUtils.createFloat(numeric).floatValue();    	non-compiled	[CE]  ')'  expected	30	None	replace
82	[BUG]  [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()!=  0.0f  ||!allZeros)))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()!=  0.0f  ||!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  &&(f.floatValue()!=  0.0f  ||!allZeros)))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0f    ||!allZeros)))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
83	[BUG]  [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  ==  0.0f  ||  Float.isInfinite(f.charAt(0))))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  ==  0.0f  ||  Float.isInfinite(f.charAt(0))))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  &&(f.floatValue()  ==  0.0f  ||  Float.isInfinite(f.charAt(0))))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0f    ||!allZeros)))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
84	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0f  &&!hasMoreElements()))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0f  &&!hasMoreElements()))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0f  &&!hasMoreElements()))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!hasMoreElements()))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
85	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F)&&!hasMoreElements())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F)&&!hasMoreElements())  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F)&&!hasMoreElements())  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!hasMoreElements()))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
86	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(1)  ==  ')')  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(1)  ==  ')')  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(1)  ==  ')')  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    ')')    {    	non-compiled	[CE]  ')'  expected	39	None	replace
87	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0d  &&!allZeros))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0d  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0d  &&!allZeros))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0D    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
88	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    1.0    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
89	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isLong()  ||  f.isInfinite()  ||  f.floatValue()  ==  1.0  &&!allZeros))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isLong()  ||  f.isInfinite()  ||  f.floatValue()  ==  1.0  &&!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isLong()  ||  f.isInfinite()  ||  f.floatValue()  ==  1.0  &&!allZeros))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    1.0    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
90	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  >=  0.0F  ||!allZeros))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  >=  0.0F  ||!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  >=  0.0F  ||!allZeros))  {	  if(!(f.isInfinite()    ||    f.floatValue()    <    0.0F    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
91	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Integer  f  =  NumberUtils.createInteger(1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Integer  f  =  NumberUtils.createInteger(1);	  Integer    f    =    NumberUtils.createInteger(0);    	non-compiled	[CE]  ')'  expected	22	None	replace
92	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()!=  0.0F  &&!allZeros)))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()!=  0.0F  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()!=  0.0F  &&!allZeros)))  {	  if(!(f.isInfinite()    ||    f.floatValue()!=    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
93	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F))  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F))  {	  if(!(f.isInfinite()    ||    f.floatValue()!=    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
94	[BUG]  [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  ==  0.0F  ||!f.isInfinite()))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  ==  0.0F  ||!f.isInfinite()))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  &&(f.floatValue()  ==  0.0F  ||!f.isInfinite()))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0F    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	38	None	replace
95	[BUG]  [BUGGY]  float  f  =  NumberUtils.createInteger(numeric.doubleValue());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createInteger(numeric.doubleValue());  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createInteger(numeric.doubleValue());	  float    f    =    NumberUtils.createFloat(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	9	None	replace
96	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createFloat(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Integer  f  =  NumberUtils.createFloat(numeric);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Integer  f  =  NumberUtils.createFloat(numeric);	  Integer    f    =    NumberUtils.createInteger(str);    	non-compiled	[CE]  ')'  expected	21	None	replace
97	[BUG]  [BUGGY]  if(!f.isInfinite()  ||  f.floatValue()!=  0.0F  ||!allZeros)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  ||  f.floatValue()!=  0.0F  ||!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  ||  f.floatValue()!=  0.0F  ||!allZeros)  {	  if(!f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||!allZeros)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
98	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).doubleValue();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).doubleValue();  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Integer  f  =  NumberUtils.createInteger(numeric).doubleValue();	  Integer    f    =    NumberUtils.createInteger(numeric).intValue();    	non-compiled	[CE]  ')'  expected	35	None	replace
99	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()!=  0.0  &&!allZeros)))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()!=  0.0  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()!=  0.0  &&!allZeros)))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    1.0    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	18	None	replace
100	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(nodeIndex)  ==  '-'))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(nodeIndex)  ==  '-'))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(nodeIndex)  ==  '-'))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    '-'))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
101	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')&&  Character.isDigit(f.charAt(0)))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')&&  Character.isDigit(f.charAt(0)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')&&  Character.isDigit(f.charAt(0)))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    '-'))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
102	[BUG]  [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!hasMoreElements()))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!hasMoreElements()))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!hasMoreElements()))  {	  if(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
103	[BUG]  [BUGGY]  if(f  ==  null  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(f  ==  null  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(f  ==  null  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {	  if(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
104	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  3);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  3);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createFloat(numeric  +  3);	  float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	31	None	replace
105	[BUG]  [BUGGY]  float  f  =  NumberUtils.createInteger(numeric.longValue());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createInteger(numeric.longValue());  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createInteger(numeric.longValue());	  float    f    =    NumberUtils.createLong(numeric.longValue());    	non-compiled	[CE]  ')'  expected	13	None	replace
106	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue()  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue()  -  1);  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	Float  f  =  NumberUtils.createFloat(numeric.floatValue()  -  1);	  Float    f    =    NumberUtils.createFloat(numeric.floatValue());    	non-compiled	[CE]  ')'  expected	2	None	replace
107	[BUG]  [BUGGY]  if(f  ==  null  ||!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(f  ==  null  ||!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(f  ==  null  ||!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {	  if(!f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
108	[BUG]  [BUGGY]  if(!f.isNaN()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isNaN()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isNaN()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {	  if(!f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
109	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.charAt(0)  ==  0.0)&&!allZeros)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.charAt(0)  ==  0.0)&&!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.charAt(0)  ==  0.0)&&!allZeros)  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0)&&!allZeros)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
110	[BUG]  [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  <  0.0f  ||!allZeros)))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  <  0.0f  ||!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  &&(f.floatValue()  <  0.0f  ||!allZeros)))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0f    ||!allZeros)))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
111	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  f.charAt(0)  ==  ')')  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  f.charAt(0)  ==  ')')  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  f.charAt(0)  ==  ')')  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    ')')    {    	non-compiled	[CE]  ')'  expected	39	None	replace
112	[BUG]  [BUGGY]  if(!f.isNaN()  &&(f.floatValue()  ==  0.0F  ||!allZeros))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isNaN()  &&(f.floatValue()  ==  0.0F  ||!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isNaN()  &&(f.floatValue()  ==  0.0F  ||!allZeros))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0F    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	38	None	replace
113	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0  ||  f.floatValue()  ==  0.0))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0  ||  f.floatValue()  ==  0.0))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0  ||  f.floatValue()  ==  0.0))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.5    &&!allZeros))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
114	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isLong()  ||  f.floatValue()  ==  0.0F)&&!allZeros)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isLong()  ||  f.floatValue()  ==  0.0F)&&!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isLong()  ||  f.floatValue()  ==  0.0F)&&!allZeros)  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F)&&!allZeros)    {    	non-compiled	[CE]  ')'  expected	33	None	replace
115	[BUG]  [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!Character.isDigit(f.charAt(0))))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!Character.isDigit(f.charAt(0))))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!Character.isDigit(f.charAt(0))))  {	  if(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
116	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F)||!allZeros)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F)||!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.floatValue()  ==  0.0F)||!allZeros)  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0F)||!allZeros)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
117	[BUG]  [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  <  0.0F  ||!allZeros)))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isInfinite()  &&(f.floatValue()  <  0.0F  ||!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isInfinite()  &&(f.floatValue()  <  0.0F  ||!allZeros)))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0F    ||!allZeros)))    {    	non-compiled	[CE]  ')'  expected	27	None	replace
118	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')&&  Character.isDigit(numeric.charAt(0)))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')&&  Character.isDigit(numeric.charAt(0)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')&&  Character.isDigit(numeric.charAt(0)))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    '-'))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
119	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')&&!Character.isDigit(f.charAt(0)))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')&&!Character.isDigit(f.charAt(0)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||  f.charAt(0)  ==  '-')&&!Character.isDigit(f.charAt(0)))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||    f.charAt(0)    ==    '-'))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
120	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||!allZeros)))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||!allZeros)))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||!allZeros)))  {	  if(!(f.isInfinite()    ||    f.floatValue()    ==    0.0F    ||!allZeros)))    {    	non-compiled	[CE]  ')'  expected	37	None	replace
121	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.value()  ==  0.0)&&!allZeros)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.value()  ==  0.0)&&!allZeros)  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.value()  ==  0.0)&&!allZeros)  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0)&&!allZeros)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
122	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  0  <  =  Float.POSITIVE_INFINITY))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  0  <  =  Float.POSITIVE_INFINITY))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  <  0.0F  ||  0  <  =  Float.POSITIVE_INFINITY))  {	  if(!(f.isInfinite()    ||    f.floatValue()    <    0.0F    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
123	[BUG]  [BUGGY]  if(!f.isNaN()  &&(f.floatValue()  ==  0.0f  ||!allZeros))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!f.isNaN()  &&(f.floatValue()  ==  0.0f  ||!allZeros))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!f.isNaN()  &&(f.floatValue()  ==  0.0f  ||!allZeros))  {	  if(!f.isInfinite()    &&(f.floatValue()    ==    0.0f    ||!allZeros))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
124	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric.floatValue());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  float  f  =  NumberUtils.createFloat(numeric.floatValue());  [BUGGY]      if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	float  f  =  NumberUtils.createFloat(numeric.floatValue());	  float    f    =    NumberUtils.createLong(numeric.longValue());    	non-compiled	[CE]  ')'  expected	13	None	replace
125	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||!hasMoreElements()))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        }  return  createBigInteger(numeric);  }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);      [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||!hasMoreElements()))  {  [BUGGY]        return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	522	522	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  ||!hasMoreElements()))  {	  if(!(f.isNaN()    ||    f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!hasMoreElements()))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
