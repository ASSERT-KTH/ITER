bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  catch(NumberFormatException  nfe)  {  //  NOPMD  //  ignore  the  bad  number  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]  }  catch(NumberFormatException  nfe)  {  //  NOPMD  //  ignore  the  bad  number  [BUGGY]    }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(NumberFormatException  nfe)  {  //  NOPMD  //  ignore  the  bad  number	}  catch  (NumberFormatException  nfe)  {  //  NOPMD    //  ignore  the  bad  number    }  	non-compiled	[CE]  ')'  expected	73	None	replace
2	[BUG]  [BUGGY]  }  catch(NumberFormatException  nfe)  {  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]  }  catch(NumberFormatException  nfe)  {  [BUGGY]    }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(NumberFormatException  nfe)  {	}  catch  (NumberFormatException  nfe)  {  //  NOPMD    //  ignore  the  bad  number    }  	non-compiled	[CE]  ')'  expected	73	None	replace
3	[BUG]  [BUGGY]  }  catch(NoSuchElementException  nfe)  {  //  NOPMD  //  ignore  the  bad  number  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]  }  catch(NoSuchElementException  nfe)  {  //  NOPMD  //  ignore  the  bad  number  [BUGGY]    }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(NoSuchElementException  nfe)  {  //  NOPMD  //  ignore  the  bad  number	}  catch  (NumberFormatException  nfe)  {  //  NOPMD    //  ignore  the  bad  number    }  	non-compiled	[CE]  ')'  expected	73	None	replace
4	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    [BUGGY]    }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	  	}  catch  (NumberFormatException  nfe)  {  //  NOPMD    //  ignore  the  bad  number    }  	non-compiled	[CE]  ')'  expected	73	None	replace
5	[BUG]  [BUGGY]    if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }		non-compiled	[CE]  ')'  expected	74	None	add
6	[BUG]  [BUGGY]    if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }		non-compiled	[CE]  ')'  expected	74	None	add
7	[BUG]  [BUGGY]    if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }		non-compiled	[CE]  ')'  expected	74	None	add
8	[BUG]  [BUGGY]    return  createLong(str);  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    return  createLong(str);  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    return  createLong(str);		non-compiled	[CE]  ')'  expected	74	None	add
9	[BUG]  [BUGGY]    if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  [CE]  ')'  expected  [FE]            AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }		non-compiled	[CE]  ')'  expected	74	None	add
10	[BUG]  [BUGGY]    return  createBigDecimal(str);  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    return  createBigDecimal(str);  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    return  createBigDecimal(str);		non-compiled	[CE]  ')'  expected	74	None	add
11	[BUG]  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }		non-compiled	[CE]  ')'  expected	74	None	add
12	[BUG]  [BUGGY]    return  createBigInteger(str);  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    return  createBigInteger(str);  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    return  createBigInteger(str);		non-compiled	[CE]  ')'  expected	74	None	add
13	[BUG]  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }		non-compiled	[CE]  ')'  expected	74	None	add
14	[BUG]  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]            AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }		non-compiled	[CE]  ')'  expected	74	None	add
15	[BUG]  [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  [BUGGY]    }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);	}  catch  (NumberFormatException  nfe)  {  //  NOPMD    //  ignore  the  bad  number    }  	non-compiled	[CE]  ')'  expected	73	None	replace
16	[BUG]  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }		non-compiled	[CE]  ')'  expected	74	None	add
17	[BUG]  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }		non-compiled	[CE]  ')'  expected	74	None	add
18	[BUG]  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }		non-compiled	[CE]  ')'  expected	74	None	add
19	[BUG]  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);  [BUGGY]    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]  }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	    if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }		non-compiled	[CE]  ')'  expected	74	None	add
