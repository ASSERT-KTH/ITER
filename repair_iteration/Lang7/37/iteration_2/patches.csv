bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
2	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
3	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
4	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
5	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
6	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  throw  new  NumberFormatException( " ");  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
7	[BUG]  [BUGGY]  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	||  exp  ==  null)  {  return  createBigInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
8	[BUG]  [BUGGY]  if(!allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }	  if(allZeros)    {    if(exp    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
9	[BUG]  [BUGGY]  if(allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }	  if(allZeros)    {    if(exp    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
10	[BUG]  [BUGGY]  if(!allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(str);  }	  if(allZeros)    {    if(exp    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
11	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	62	None	replace
12	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	62	None	replace
13	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	62	None	replace
14	[BUG]  [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	62	None	replace
15	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
16	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
17	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
18	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
19	[BUG]  [BUGGY]  }  catch(Throwable  e)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  catch(Throwable  e)  {  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(Throwable  e)  {	  }    catch(NumberFormatException    e)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
20	[BUG]  [BUGGY]  }  catch(Exception  e)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  catch(Exception  e)  {  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(Exception  e)  {	  }    catch(NumberFormatException    e)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
21	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createNull(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createNull(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createNull(str);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createNull(str);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
22	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createNull(str);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
23	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createNull(str);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
24	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  return  createBigInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createNull(str);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
25	[BUG]  [BUGGY]  Integer  dec  =  getDecimalInteger(0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalInteger(0);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalInteger(0);	  Integer    dec    =    getDecimalInteger();    	non-compiled	[CE]  ')'  expected	6	None	replace
26	[BUG]  [BUGGY]  Integer  dec  =  getDecimalInteger(1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalInteger(1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalInteger(1);	  Integer    dec    =    getDecimalInteger();    	non-compiled	[CE]  ')'  expected	6	None	replace
27	[BUG]  [BUGGY]  Integer  dec  =  getMinimumInteger();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getMinimumInteger();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getMinimumInteger();	  Integer    dec    =    getDecimalInteger();    	non-compiled	[CE]  ')'  expected	6	None	replace
28	[BUG]  [BUGGY]  Integer  dec  =  getInteger();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getInteger();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getInteger();	  Integer    dec    =    getDecimalInteger();    	non-compiled	[CE]  ')'  expected	6	None	replace
29	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
30	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
31	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
32	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
33	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	44	None	replace
34	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	44	None	replace
35	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	44	None	replace
36	[BUG]  [BUGGY]  if(allZeros)  {  if(exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	44	None	replace
37	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
38	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
39	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	60	None	replace
40	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	60	None	replace
41	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	60	None	replace
42	[BUG]  [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	61	None	replace
43	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	59	None	replace
44	[BUG]  [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	59	None	replace
45	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(1);    }    	non-compiled	[CE]  ')'  expected	42	None	replace
46	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(1);    }    	non-compiled	[CE]  ')'  expected	42	None	replace
47	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(1);    }    	non-compiled	[CE]  ')'  expected	42	None	replace
48	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(1);    }    	non-compiled	[CE]  ')'  expected	42	None	replace
49	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	52	None	replace
50	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	52	None	replace
51	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	52	None	replace
52	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
53	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
54	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createLong(str);  }	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
55	[BUG]  [BUGGY]  ||(!allZeros  &&  isAllZeros(exp)))  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  ||(!allZeros  &&  isAllZeros(exp)))  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	||(!allZeros  &&  isAllZeros(exp)))  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	56	None	replace
56	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	56	None	replace
57	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	56	None	replace
58	[BUG]  [BUGGY]  return  createBigDecimal(str,  exp  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  return  createBigDecimal(str,  exp  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	return  createBigDecimal(str,  exp  +  1);	  return    createBigDecimal(str,    exp);    	non-compiled	[CE]  ')'  expected	58	None	replace
59	[BUG]  [BUGGY]  return  createBigDecimal(str,  dec);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  return  createBigDecimal(str,  dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	return  createBigDecimal(str,  dec);	  return    createBigDecimal(str,    exp);    	non-compiled	[CE]  ')'  expected	58	None	replace
60	[BUG]  [BUGGY]  return  createBigInteger(str,  exp);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  return  createBigInteger(str,  exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	return  createBigInteger(str,  exp);	  return    createBigDecimal(str,    exp);    	non-compiled	[CE]  ')'  expected	58	None	replace
61	[BUG]  [BUGGY]  Integer  dec  =  createInteger(0);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createInteger(0);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createInteger(0);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	4	None	replace
62	[BUG]  [BUGGY]  Integer  dec  =  createLong(str);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createLong(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createLong(str);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	4	None	replace
63	[BUG]  [BUGGY]  Integer  dec  =  createInteger(exp);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createInteger(exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createInteger(exp);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	4	None	replace
64	[BUG]  [BUGGY]  if(!allZeros)  {  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	45	None	replace
65	[BUG]  [BUGGY]  tries  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  tries  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	tries  {  return  createBigInteger(str);  }	  if(exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	53	None	replace
66	[BUG]  [BUGGY]  tries  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  tries  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	tries  {  return  createBigDecimal(str);  }	  if(exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	53	None	replace
67	[BUG]  [BUGGY]  tries  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  tries  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	tries  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	53	None	replace
68	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwUnquotedException( " ");	  if(exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	53	None	replace
69	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
70	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
71	[BUG]  [BUGGY]  Integer  decPos  =  getDecimalPos()  +  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  getDecimalPos()  +  1;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  getDecimalPos()  +  1;	  Integer    decPos    =    getDecimalPos();    	non-compiled	[CE]  ')'  expected	25	None	replace
72	[BUG]  [BUGGY]  Integer  decPos  =  getDecimalPos()  -  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  getDecimalPos()  -  1;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  getDecimalPos()  -  1;	  Integer    decPos    =    getDecimalPos();    	non-compiled	[CE]  ')'  expected	25	None	replace
73	[BUG]  [BUGGY]  Integer  decPos  =  getDecimalIntegerPos();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  getDecimalIntegerPos();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  getDecimalIntegerPos();	  Integer    decPos    =    getDecimalPos();    	non-compiled	[CE]  ')'  expected	25	None	replace
74	[BUG]  [BUGGY]  Integer  decPos  =  getDecimalInteger();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  getDecimalInteger();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  getDecimalInteger();	  Integer    decPos    =    getDecimalPos();    	non-compiled	[CE]  ')'  expected	25	None	replace
75	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwInternal();	  if(exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
76	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSlotException( " ");  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwAsSlotException( " ");  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwAsSlotException( " ");	  if(exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
77	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSlot( "msg.no.string ",  str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwAsSlot( "msg.no.string ",  str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwAsSlot( "msg.no.string ",  str);	  if(exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
78	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
79	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
80	[BUG]  [BUGGY]  Iterator  <  Number>  it  =  exp.iterator();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  Number>  it  =  exp.iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  Number>  it  =  exp.iterator();	  Iterator    <    Number>    it    =    str.iterator();    	non-compiled	[CE]  ')'  expected	82	None	replace
81	[BUG]  [BUGGY]  Iterator  <  Number>  it  =  dec.iterator();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  Number>  it  =  dec.iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  Number>  it  =  dec.iterator();	  Iterator    <    Number>    it    =    str.iterator();    	non-compiled	[CE]  ')'  expected	82	None	replace
82	[BUG]  [BUGGY]  Iterator  <  Number>  it  =  this.str.iterator();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  Number>  it  =  this.str.iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  Number>  it  =  this.str.iterator();	  Iterator    <    Number>    it    =    str.iterator();    	non-compiled	[CE]  ')'  expected	82	None	replace
83	[BUG]  [BUGGY]  Integer  dec  =  getInteger(0);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getInteger(0);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getInteger(0);	  Integer    dec    =    getInteger(str);    	non-compiled	[CE]  ')'  expected	49	None	replace
84	[BUG]  [BUGGY]  Integer  dec  =  getInteger(exp);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getInteger(exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getInteger(exp);	  Integer    dec    =    getInteger(str);    	non-compiled	[CE]  ')'  expected	49	None	replace
85	[BUG]  [BUGGY]  Integer  dec  =  getInteger(1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getInteger(1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getInteger(1);	  Integer    dec    =    getInteger(str);    	non-compiled	[CE]  ')'  expected	49	None	replace
86	[BUG]  [BUGGY]  Integer  decPos  =  createInteger(0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  createInteger(0);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  createInteger(0);	  Integer    decPos    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	5	None	replace
87	[BUG]  [BUGGY]  Integer  decPos  =  createLong(str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  createLong(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  createLong(str);	  Integer    decPos    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	5	None	replace
88	[BUG]  [BUGGY]  Integer  decPos  =  createInteger(1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  createInteger(1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  createInteger(1);	  Integer    decPos    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	5	None	replace
89	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    	non-compiled	[CE]  ')'  expected	14	None	replace
90	[BUG]  [BUGGY]  nisip  =  Integer.parseInt(exp);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  nisip  =  Integer.parseInt(exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	nisip  =  Integer.parseInt(exp);	  nisip    =    Integer.parseInt(str);    	non-compiled	[CE]  ')'  expected	81	None	replace
91	[BUG]  [BUGGY]  nisip  =  Integer.parseInt(dec);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  nisip  =  Integer.parseInt(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	nisip  =  Integer.parseInt(dec);	  nisip    =    Integer.parseInt(str);    	non-compiled	[CE]  ')'  expected	81	None	replace
92	[BUG]  [BUGGY]  nisip  =  Long.parseLong(str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  nisip  =  Long.parseLong(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	nisip  =  Long.parseLong(str);	  nisip    =    Integer.parseInt(str);    	non-compiled	[CE]  ')'  expected	81	None	replace
93	[BUG]  [BUGGY]  nisip  =  Integer.parseInt(str)+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  nisip  =  Integer.parseInt(str)+  1;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	nisip  =  Integer.parseInt(str)+  1;	  nisip    =    Integer.parseInt(str);    	non-compiled	[CE]  ')'  expected	81	None	replace
94	[BUG]  [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createNull(str);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  catch(NumberFormatException  nfe)  {  return  createNull(str);  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(NumberFormatException  nfe)  {  return  createNull(str);	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	75	None	replace
95	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	51	None	replace
96	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	51	None	replace
97	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	51	None	replace
98	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	51	None	replace
99	[BUG]  [BUGGY]  if(allZeros)  {  if(exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	47	None	replace
100	[BUG]  [BUGGY]  Integer  d  =  createInteger(str);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  d  =  createInteger(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  d  =  createInteger(str);	  if(exp!=    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
101	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
102	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
103	[BUG]  [BUGGY]  if(!allZeros)  {  aughtExceptionHandler.handleMalformedException( " ");  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  aughtExceptionHandler.handleMalformedException( " ");  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  aughtExceptionHandler.handleMalformedException( " ");  }	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  ')'  expected	77	None	replace
104	[BUG]  [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  aughtExceptionHandler.handleMalformedException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  aughtExceptionHandler.handleMalformedException( " ");  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  ||  exp  ==  null)  {  aughtExceptionHandler.handleMalformedException( " ");  }	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  ')'  expected	77	None	replace
105	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
106	[BUG]  [BUGGY]  if(exp!=  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp!=  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp!=  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
107	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(!dec!=  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(!dec!=  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(!dec!=  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
108	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp!=  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp!=  null)  {  return  createBigDecimal(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(!dec  ==  null  &&  exp!=  null)  {  return  createBigDecimal(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
109	[BUG]  [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
110	[BUG]  [BUGGY]  ||  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  ||  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	||  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
111	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
112	[BUG]  [BUGGY]  catch(Throwable  nfe)  {  //  NOPMD  //  ignore  the  bad  number  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  catch(Throwable  nfe)  {  //  NOPMD  //  ignore  the  bad  number  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	catch(Throwable  nfe)  {  //  NOPMD  //  ignore  the  bad  number	  }    catch(Exception    nfe)    {    //    NOPMD    //    ignore    the    bad    number    	non-compiled	[CE]  ')'  expected	19	None	replace
113	[BUG]  [BUGGY]  Integer  dec  =  createBigInteger(exp);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createBigInteger(exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createBigInteger(exp);	  Integer    dec    =    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	63	None	replace
114	[BUG]  [BUGGY]  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	89	None	replace
115	[BUG]  [BUGGY]  throw  new  NumberFormatException( " ");  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  throw  new  NumberFormatException( " ");  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	throw  new  NumberFormatException( " ");	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	87	None	replace
116	[BUG]  [BUGGY]  NeighborDecimal  <  Integer>  dec  =  createNeighborDecimal(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  <  Integer>  dec  =  createNeighborDecimal(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  <  Integer>  dec  =  createNeighborDecimal(str);	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
117	[BUG]  [BUGGY]  NeighborDecimal  <  Integer>  dec  =  createNullDecimal(str);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  <  Integer>  dec  =  createNullDecimal(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  <  Integer>  dec  =  createNullDecimal(str);	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
118	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
119	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
120	[BUG]  [BUGGY]  return  createDouble(str);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  return  createDouble(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	return  createDouble(str);	  return    createInteger(str);    	non-compiled	[CE]  ')'  expected	2	None	replace
121	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(0);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(0);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(0);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(0);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
122	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(1);  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(1);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(1);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(0);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
123	[BUG]  [BUGGY]  if(!allZeros)  {  if(exp  ==  null  &&  exp  ==  null)  {  return  createBigInteger(0);  }  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(exp  ==  null  &&  exp  ==  null)  {  return  createBigInteger(0);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(exp  ==  null  &&  exp  ==  null)  {  return  createBigInteger(0);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(0);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
124	[BUG]  [BUGGY]  if(!allZeros)  {  if(exp  ==  null  &&  exp  ==  null)  {  return  createBigInteger(1);  }  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(exp  ==  null  &&  exp  ==  null)  {  return  createBigInteger(1);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(exp  ==  null  &&  exp  ==  null)  {  return  createBigInteger(1);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(0);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
125	[BUG]  [BUGGY]  Integer  dec  =  getDecimalInteger(exp);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalInteger(exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalInteger(exp);	  Integer    dec    =    getDecimalInteger(str);    	non-compiled	[CE]  ')'  expected	24	None	replace
126	[BUG]  [BUGGY]  Integer  dec  =  getDecimalInteger(dec);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalInteger(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalInteger(dec);	  Integer    dec    =    getDecimalInteger(str);    	non-compiled	[CE]  ')'  expected	24	None	replace
127	[BUG]  [BUGGY]  Integer  dec  =  getDecimalInteger(decPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalInteger(decPos);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalInteger(decPos);	  Integer    dec    =    getDecimalInteger(str);    	non-compiled	[CE]  ')'  expected	24	None	replace
128	[BUG]  [BUGGY]  Iterator  <  String>  it  =  exp.iterator();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  String>  it  =  exp.iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  String>  it  =  exp.iterator();	  Iterator    <    String>    it    =    str.iterator();    	non-compiled	[CE]  ')'  expected	83	None	replace
129	[BUG]  [BUGGY]  Iterator  <  String>  it  =  dec.iterator();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  String>  it  =  dec.iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  String>  it  =  dec.iterator();	  Iterator    <    String>    it    =    str.iterator();    	non-compiled	[CE]  ')'  expected	83	None	replace
130	[BUG]  [BUGGY]  }  catch(Throwable  t)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  catch(Throwable  t)  {  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(Throwable  t)  {	  }    catch(Exception    nfe)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
131	[BUG]  [BUGGY]  ||(!allZeros  &&  isAllZeros(exp)))  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  ||(!allZeros  &&  isAllZeros(exp)))  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	||(!allZeros  &&  isAllZeros(exp)))  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
132	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
133	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
134	[BUG]  [BUGGY]  ||(!allZeros  &&  isAllZeros(exp)))  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  ||(!allZeros  &&  isAllZeros(exp)))  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	||(!allZeros  &&  isAllZeros(exp)))  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
135	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
136	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
137	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
138	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
139	[BUG]  [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(0);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(0);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  exp  ==  null)  {  return  createInteger(0);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
140	[BUG]  [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  return  createBigInteger(0);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  exp  ==  null)  {  return  createBigInteger(0);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  exp  ==  null)  {  return  createBigInteger(0);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
141	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(1);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
142	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
143	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
144	[BUG]  [BUGGY]  Integer  str  =  createInteger(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  str  =  createInteger(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  str  =  createInteger(str);	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createNumber(str);    }    	non-compiled	[CE]  ')'  expected	36	None	replace
145	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
146	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
147	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
148	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
149	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
150	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	72	None	replace
151	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	72	None	replace
152	[BUG]  [BUGGY]  Integer  dec  =  getDecimalIntValue();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalIntValue();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalIntValue();	  Integer    dec    =    getDecimalValue();    	non-compiled	[CE]  ')'  expected	7	None	replace
153	[BUG]  [BUGGY]  Integer  dec  =  getDecimalIntegerValue();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalIntegerValue();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalIntegerValue();	  Integer    dec    =    getDecimalValue();    	non-compiled	[CE]  ')'  expected	7	None	replace
154	[BUG]  [BUGGY]  Integer  dec  =  getIntValue();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getIntValue();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getIntValue();	  Integer    dec    =    getDecimalValue();    	non-compiled	[CE]  ')'  expected	7	None	replace
155	[BUG]  [BUGGY]  Neighbor  exp  =  createNumber(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  exp  =  createNumber(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  exp  =  createNumber(str);	  Neighbor    exp    =    createNeighbor(str);    	non-compiled	[CE]  ')'  expected	84	None	replace
156	[BUG]  [BUGGY]  Neighbor  exp  =  createNeighbor(str.length());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  exp  =  createNeighbor(str.length());  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  exp  =  createNeighbor(str.length());	  Neighbor    exp    =    createNeighbor(str);    	non-compiled	[CE]  ')'  expected	84	None	replace
157	[BUG]  [BUGGY]  Neighbor  exp  =  createBigDecimal(str);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  exp  =  createBigDecimal(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  exp  =  createBigDecimal(str);	  Neighbor    exp    =    createNeighbor(str);    	non-compiled	[CE]  ')'  expected	84	None	replace
158	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
159	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
160	[BUG]  [BUGGY]  nfe.printStackTrace();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  nfe.printStackTrace();  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	nfe.printStackTrace();	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	3	None	replace
161	[BUG]  [BUGGY]  if(nfe  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(nfe  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(nfe  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  NumberFormatException( " ");  }	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	3	None	replace
162	[BUG]  [BUGGY]  if(nfe  ==  null)  {  e.printStackTrace();  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(nfe  ==  null)  {  e.printStackTrace();  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(nfe  ==  null)  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	3	None	replace
163	[BUG]  [BUGGY]  if(nfe  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(nfe  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(nfe  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	3	None	replace
164	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
165	[BUG]  [BUGGY]  NeighborDecimal  exp  =  createNeighborDecimal(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  exp  =  createNeighborDecimal(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  exp  =  createNeighborDecimal(str);	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
166	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createLong(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
167	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
168	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp!=  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp!=  null)  {  return  createLong(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(!dec  ==  null  &&  exp!=  null)  {  return  createLong(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
169	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(!dec!=  null  &&  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(!dec!=  null  &&  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(!dec!=  null  &&  exp  ==  null)  {  return  createLong(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
170	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	73	None	replace
171	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	73	None	replace
172	[BUG]  [BUGGY]  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	74	None	replace
173	[BUG]  [BUGGY]  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	74	None	replace
174	[BUG]  [BUGGY]  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	74	None	replace
175	[BUG]  [BUGGY]  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	74	None	replace
176	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	79	None	replace
177	[BUG]  [BUGGY]  if(exp!=  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp!=  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp!=  null)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	79	None	replace
178	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp!=  null)  {  return  createInteger(str);  }	  if(exp    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
179	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
180	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  [Delete]  catch(NoSuchElementException  nfe)  {  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(0);  }	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
181	[BUG]  [BUGGY]  ||  exp  ==  null)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  ||  exp  ==  null)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	||  exp  ==  null)  {  return  createLong(str);  }	  if(exp    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
182	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	73	None	replace
183	[BUG]  [BUGGY]  Iterator  <  Number>  it  =  allZeros.iterator();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  Number>  it  =  allZeros.iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  Number>  it  =  allZeros.iterator();	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
184	[BUG]  [BUGGY]  NeighborDecimal  dec  =  getDecimalDecimal(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  getDecimalDecimal(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  getDecimalDecimal(str);	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
185	[BUG]  [BUGGY]  NeighborDecimal  dec  =  getDecimalDecimal();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  getDecimalDecimal();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  getDecimalDecimal();	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
186	[BUG]  [BUGGY]  }  catch(NullPointerException  nfe)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  catch(NullPointerException  nfe)  {  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(NullPointerException  nfe)  {	  }    catch(Exception    nfe)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
187	[BUG]  [BUGGY]  NeighborDecimal  dec  =  createNeighborDecimal(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  createNeighborDecimal(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  createNeighborDecimal(str);	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
188	[BUG]  [BUGGY]  NeighborDecimal  dec  =  createNeighbor(str);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  createNeighbor(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  createNeighbor(str);	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
189	[BUG]  [BUGGY]  if(!allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(exp  ==  null  ||  exp  ==  null)  {  return  createBigInteger(str);  }	  if(exp    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
190	[BUG]  [BUGGY]  Nullable  <  Number>  dec  =  createNullable(str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Nullable  <  Number>  dec  =  createNullable(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Nullable  <  Number>  dec  =  createNullable(str);	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
191	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
192	[BUG]  [BUGGY]  Integer  dec  =  isAllZeros(mant)&&  isAllZeros(exp);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  isAllZeros(mant)&&  isAllZeros(exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  isAllZeros(mant)&&  isAllZeros(exp);	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
193	[BUG]  [BUGGY]  Integer  f  =  createInteger(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  f  =  createInteger(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  f  =  createInteger(str);	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
194	[BUG]  [BUGGY]  Integer  dec  =  isAllZeros(mant)?  createInteger(str):  null;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  isAllZeros(mant)?  createInteger(str):  null;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  isAllZeros(mant)?  createInteger(str):  null;	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
195	[BUG]  [BUGGY]  if(allZeros)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  return  createBigDecimal(str);  }	  if(exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
196	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	72	None	replace
197	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
198	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
199	[BUG]  [BUGGY]  Integer  dec  =  createInteger(str);  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(dec);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createInteger(str);  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(dec);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createInteger(str);  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(dec);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
200	[BUG]  [BUGGY]  Integer  dec  =  createInteger(str);  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createInteger(str);  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createInteger(str);  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
201	[BUG]  [BUGGY]  Integer  dec  =  createInteger(str);  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(d);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createInteger(str);  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(d);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createInteger(str);  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(d);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
202	[BUG]  [BUGGY]  Nullable  <  Number>  f  =  createBigInteger(str);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Nullable  <  Number>  f  =  createBigInteger(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Nullable  <  Number>  f  =  createBigInteger(str);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
203	[BUG]  [BUGGY]  NeighborDecimal  dec  =  getDecimalDecimal(dec);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  getDecimalDecimal(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  getDecimalDecimal(dec);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
204	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
205	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
206	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  aughtExceptionHandler.handleMalformedException( " ");  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  aughtExceptionHandler.handleMalformedException( " ");  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  aughtExceptionHandler.handleMalformedException( " ");  }	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  ')'  expected	77	None	replace
207	[BUG]  [BUGGY]  if(nfe!=  null)  {  e.printStackTrace();  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(nfe!=  null)  {  e.printStackTrace();  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(nfe!=  null)  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	3	None	replace
208	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	52	None	replace
209	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	67	None	replace
210	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(null,  str);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.handleMissingName(null,  str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.handleMissingName(null,  str);	  if(exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	53	None	replace
211	[BUG]  [BUGGY]  if(!(dec  ==  null  &&  exp!=  null))  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!(dec  ==  null  &&  exp!=  null))  {  return  createBigDecimal(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!(dec  ==  null  &&  exp!=  null))  {  return  createBigDecimal(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
212	[BUG]  [BUGGY]  Integer  dec  =  createInteger(str  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createInteger(str  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createInteger(str  +  1);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	4	None	replace
213	[BUG]  [BUGGY]  Integer  dec  =  createInteger(str,  exp);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createInteger(str,  exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createInteger(str,  exp);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	4	None	replace
214	[BUG]  [BUGGY]  Integer  dec  =  createInteger(dec);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createInteger(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createInteger(dec);	  Integer    dec    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	4	None	replace
215	[BUG]  [BUGGY]  }  catch(NoSuchElementException  e)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  catch(NoSuchElementException  e)  {  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(NoSuchElementException  e)  {	  }    catch(NumberFormatException    e)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
216	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
217	[BUG]  [BUGGY]  NegativeUtils.checkState(dec  ==  null);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NegativeUtils.checkState(dec  ==  null);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NegativeUtils.checkState(dec  ==  null);	  if(exp!=    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
218	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
219	[BUG]  [BUGGY]  }  catch(NumberFormatException  e)  {  return  createInteger(str);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  catch(NumberFormatException  e)  {  return  createInteger(str);  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(NumberFormatException  e)  {  return  createInteger(str);	  }    catch(NumberFormatException    nfe)    {    return    createLong(str);    	non-compiled	[CE]  ')'  expected	12	None	replace
220	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	62	None	replace
221	[BUG]  [BUGGY]  Iterator  <  String>  it  =  exp.values().iterator();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  String>  it  =  exp.values().iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  String>  it  =  exp.values().iterator();	  Iterator    <    String>    it    =    str.iterator();    	non-compiled	[CE]  ')'  expected	83	None	replace
222	[BUG]  [BUGGY]  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	74	None	replace
223	[BUG]  [BUGGY]  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }	  try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	74	None	replace
224	[BUG]  [BUGGY]  if(allZeros)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  return  createBigInteger(str);  }	  if(exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
225	[BUG]  [BUGGY]  if(allZeros)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  return  createLong(str);  }	  if(exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
226	[BUG]  [BUGGY]  Integer  dec  =  getInteger(dec);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getInteger(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getInteger(dec);	  Integer    dec    =    getInteger(str);    	non-compiled	[CE]  ')'  expected	49	None	replace
227	[BUG]  [BUGGY]  if(!(dec  ==  null  &&  exp  ==  null))  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!(dec  ==  null  &&  exp  ==  null))  {  return  createInteger(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!(dec  ==  null  &&  exp  ==  null))  {  return  createInteger(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
228	[BUG]  [BUGGY]  if(!(dec  ==  null  &&  exp  ==  null))  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!(dec  ==  null  &&  exp  ==  null))  {  return  createBigInteger(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!(dec  ==  null  &&  exp  ==  null))  {  return  createBigInteger(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
229	[BUG]  [BUGGY]  Integer  dec  =  isAllZeros(mant)?  createBigInteger(str):  null;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  isAllZeros(mant)?  createBigInteger(str):  null;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  isAllZeros(mant)?  createBigInteger(str):  null;	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
230	[BUG]  [BUGGY]  Integer  dec  =  isAllZeros(mant)?  createBigInteger(str):  0;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  isAllZeros(mant)?  createBigInteger(str):  0;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  isAllZeros(mant)?  createBigInteger(str):  0;	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
231	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    	non-compiled	[CE]  ')'  expected	14	None	replace
232	[BUG]  [BUGGY]  Iterator  <  Number>  it  =  exp.values().iterator();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  Number>  it  =  exp.values().iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  Number>  it  =  exp.values().iterator();	  Iterator    <    Number>    it    =    str.iterator();    	non-compiled	[CE]  ')'  expected	82	None	replace
233	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	75	None	replace
234	[BUG]  [BUGGY]  Integer  decPos  =  createInteger(str  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  createInteger(str  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  createInteger(str  +  1);	  Integer    decPos    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	5	None	replace
235	[BUG]  [BUGGY]  Integer  decPos  =  createInteger(dec);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  createInteger(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  createInteger(dec);	  Integer    decPos    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	5	None	replace
236	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	45	None	replace
237	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	45	None	replace
238	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	45	None	replace
239	[BUG]  [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)&&  isAllZeros(exp);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)&&  isAllZeros(exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  isAllZeros(mant)&&  isAllZeros(exp);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
240	[BUG]  [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createBigInteger(str):  Integer.valueOf(dec);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createBigInteger(str):  Integer.valueOf(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  isAllZeros(mant)?  createBigInteger(str):  Integer.valueOf(dec);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
241	[BUG]  [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createBigInteger(str):  null;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createBigInteger(str):  null;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  isAllZeros(mant)?  createBigInteger(str):  null;	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
242	[BUG]  [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createBigInteger(str):  Integer.parseInt(exp);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createBigInteger(str):  Integer.parseInt(exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  isAllZeros(mant)?  createBigInteger(str):  Integer.parseInt(exp);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
243	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	61	None	replace
244	[BUG]  [BUGGY]  if(!allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!allZeros)  {  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	59	None	replace
245	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	59	None	replace
246	[BUG]  [BUGGY]  Integer  decPos  =  getDecimalPos(dec);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  getDecimalPos(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  getDecimalPos(dec);	  Integer    decPos    =    getDecimalPos();    	non-compiled	[CE]  ')'  expected	25	None	replace
247	[BUG]  [BUGGY]  Integer  dec  =  isAllZeros(mant)&&  isAllZeros(dec);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  isAllZeros(mant)&&  isAllZeros(dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  isAllZeros(mant)&&  isAllZeros(dec);	  if(allZeros)    {    if(exp    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
248	[BUG]  [BUGGY]  if(exp  ==  null  ||  dec  ==  null)  {  return  createInteger(0);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  dec  ==  null)  {  return  createInteger(0);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  dec  ==  null)  {  return  createInteger(0);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	76	None	replace
249	[BUG]  [BUGGY]  if(exp  ==  null  ||  dec  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  dec  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  dec  ==  null)  {  return  createBigInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	55	None	replace
250	[BUG]  [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	51	None	replace
251	[BUG]  [BUGGY]  Neighbor  exp  =  createNeighbor(str  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  exp  =  createNeighbor(str  +  1);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  exp  =  createNeighbor(str  +  1);	  Neighbor    exp    =    createNeighbor(str);    	non-compiled	[CE]  ')'  expected	84	None	replace
252	[BUG]  [BUGGY]  Neighbor  exp  =  createNeighbor(str,  dec);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  exp  =  createNeighbor(str,  dec);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  exp  =  createNeighbor(str,  dec);	  Neighbor    exp    =    createNeighbor(str);    	non-compiled	[CE]  ')'  expected	84	None	replace
253	[BUG]  [BUGGY]  Neighbor  exp  =  createNeighbor(str)+  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  exp  =  createNeighbor(str)+  1;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  exp  =  createNeighbor(str)+  1;	  Neighbor    exp    =    createNeighbor(str);    	non-compiled	[CE]  ')'  expected	84	None	replace
254	[BUG]  [BUGGY]  NeighborDecimal  dec  =  getNeighborDecimal(str);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  getNeighborDecimal(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  getNeighborDecimal(str);	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
255	[BUG]  [BUGGY]  Integer  dec  =  createBigDecimal(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  createBigDecimal(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  createBigDecimal(str);	  Integer    dec    =    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	63	None	replace
256	[BUG]  [BUGGY]  Integer  dec  =  getDecimalValue()  +  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalValue()  +  1;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalValue()  +  1;	  Integer    dec    =    getDecimalValue();    	non-compiled	[CE]  ')'  expected	7	None	replace
257	[BUG]  [BUGGY]  Integer  dec  =  getDecimalValue().intValue();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalValue().intValue();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalValue().intValue();	  Integer    dec    =    getDecimalValue();    	non-compiled	[CE]  ')'  expected	7	None	replace
258	[BUG]  [BUGGY]  NeighborDecimal  dec  =  createNullDecimal(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  createNullDecimal(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  createNullDecimal(str);	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
259	[BUG]  [BUGGY]  }  catch(Throwable  nfe)  {  return  createBigDecimal(str);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  catch(Throwable  nfe)  {  return  createBigDecimal(str);  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(Throwable  nfe)  {  return  createBigDecimal(str);	  }    catch(Throwable    nfe)    {    //    NOPMD    //    ignore    the    bad    number    	non-compiled	[CE]  ')'  expected	18	None	replace
260	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
261	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createBigDecimal(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
262	[BUG]  [BUGGY]  Integer  decPos  =  createInteger(str,  expPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  createInteger(str,  expPos);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  createInteger(str,  expPos);	  Integer    decPos    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	5	None	replace
263	[BUG]  [BUGGY]  Integer  decPos  =  createBigInteger(str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  decPos  =  createBigInteger(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  decPos  =  createBigInteger(str);	  Integer    decPos    =    createInteger(str);    	non-compiled	[CE]  ')'  expected	5	None	replace
264	[BUG]  [BUGGY]  NeighborDecl  d  =  createNeighborDecl(str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecl  d  =  createNeighborDecl(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecl  d  =  createNeighborDecl(str);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
265	[BUG]  [BUGGY]  Neighbor  <  Number>  exp  =  createNumber(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  <  Number>  exp  =  createNumber(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  <  Number>  exp  =  createNumber(str);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
266	[BUG]  [BUGGY]  Neighbor  <  Number>  exp  =  getExp(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  <  Number>  exp  =  getExp(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  <  Number>  exp  =  getExp(str);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
267	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssign( "msg.no.string ",  str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwAssign( "msg.no.string ",  str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwAssign( "msg.no.string ",  str);	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	46	None	replace
268	[BUG]  [BUGGY]  State  state  =  createState(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  State  state  =  createState(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	State  state  =  createState(str);	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	46	None	replace
269	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	88	None	replace
270	[BUG]  [BUGGY]  e.printStackTrace(dec);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  e.printStackTrace(dec);  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	e.printStackTrace(dec);	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	3	None	replace
271	[BUG]  [BUGGY]  e.printStackTrace(System.err);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  e.printStackTrace(System.err);  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	e.printStackTrace(System.err);	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	3	None	replace
272	[BUG]  [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
273	[BUG]  [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createInteger(str):  null;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createInteger(str):  null;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  isAllZeros(mant)?  createInteger(str):  null;	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
274	[BUG]  [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createBigDecimal(str):  null;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  dec  =  isAllZeros(mant)?  createBigDecimal(str):  null;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  dec  =  isAllZeros(mant)?  createBigDecimal(str):  null;	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
275	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
276	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
277	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp!=  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp!=    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
278	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.exp.iterator();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  String>  it  =  this.exp.iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  String>  it  =  this.exp.iterator();	  Iterator    <    String>    it    =    str.iterator();    	non-compiled	[CE]  ')'  expected	83	None	replace
279	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigDecimal(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createDecimal(str);    	non-compiled	[CE]  ')'  expected	13	None	replace
280	[BUG]  [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createNumber(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  &&  exp  ==  null)  {  return  createNumber(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  &&  exp  ==  null)  {  return  createNumber(str);  }	  if(exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
281	[BUG]  [BUGGY]  NeighborDecl.DEFAULT_CLOUD_ZERO  =  isAllZeros(exp);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecl.DEFAULT_CLOUD_ZERO  =  isAllZeros(exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecl.DEFAULT_CLOUD_ZERO  =  isAllZeros(exp);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
282	[BUG]  [BUGGY]  NeighborDecl.DEFAULT_CONSTRUCTOR,  str);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecl.DEFAULT_CONSTRUCTOR,  str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecl.DEFAULT_CONSTRUCTOR,  str);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(0);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
283	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  }    catch(NumberFormatException    nfe)    {    return    createLong(str);    	non-compiled	[CE]  ')'  expected	12	None	replace
284	[BUG]  [BUGGY]  Integer  dec  =  getDecimalInteger(str,  exp);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalInteger(str,  exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalInteger(str,  exp);	  Integer    dec    =    getDecimalInteger(str);    	non-compiled	[CE]  ')'  expected	24	None	replace
285	[BUG]  [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
286	[BUG]  [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  return  createBigInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
287	[BUG]  [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
288	[BUG]  [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  return  createBigInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
289	[BUG]  [BUGGY]  Iterator  <  Number>  it  =  this.exp.iterator();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Iterator  <  Number>  it  =  this.exp.iterator();  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Iterator  <  Number>  it  =  this.exp.iterator();	  Iterator    <    Number>    it    =    str.iterator();    	non-compiled	[CE]  ')'  expected	82	None	replace
290	[BUG]  [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null)  {  if(!dec  ==  null  &&  exp  ==  null)  {  return  createBigInteger(str);  }	  if(!(dec    ==    null    &&    exp    ==    null))    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
291	[BUG]  [BUGGY]  Neighbor  exp  =  getInteger(str);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  exp  =  getInteger(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  exp  =  getInteger(str);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
292	[BUG]  [BUGGY]  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	62	None	replace
293	[BUG]  [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	56	None	replace
294	[BUG]  [BUGGY]  try  ==  [Delete]  catch  (NumberFormatException  nfe)  {  if(!allZeros)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch  (NumberFormatException  nfe)  {  if(!allZeros)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch  (NumberFormatException  nfe)  {  if(!allZeros)  {  return  createInteger(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	56	None	replace
295	[BUG]  [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createInteger(str);  }	  if(exp    ==    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
296	[BUG]  [BUGGY]  if(!(dec  ==  null  &&  exp  ==  null))  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(!(dec  ==  null  &&  exp  ==  null))  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(!(dec  ==  null  &&  exp  ==  null))  {  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	79	None	replace
297	[BUG]  [BUGGY]  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createBigInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	79	None	replace
298	[BUG]  [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  return  createBigDecimal(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
299	[BUG]  [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(!allZeros)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
300	[BUG]  [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(dec  ==  null  &&  exp  ==  null)  {  return  createBigDecimal(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
301	[BUG]  [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  ==  [Delete]  catch(NumberFormatException  nfe)  {  if(allZeros)  {  return  createBigDecimal(str);  }	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
302	[BUG]  [BUGGY]  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createLong(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	73	None	replace
303	[BUG]  [BUGGY]  NeighborDecl  t  =  createNeighborDecl(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecl  t  =  createNeighborDecl(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecl  t  =  createNeighborDecl(str);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createNull(str);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
304	[BUG]  [BUGGY]  NeighborDecimal  exp  =  createNeighbor(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  NeighborDecimal  exp  =  createNeighbor(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	NeighborDecimal  exp  =  createNeighbor(str);	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createNull(str);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
305	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.no.string ",  str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.no.string ",  str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwAsIAE( "msg.no.string ",  str);	  if(exp!=    null)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
306	[BUG]  [BUGGY]  aughtExceptionHandler(null,  str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler(null,  str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler(null,  str);	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
307	[BUG]  [BUGGY]  aughtExceptionHandler(null,  dec,  exp);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler(null,  dec,  exp);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler(null,  dec,  exp);	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
308	[BUG]  [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createBigInteger(str);  }	  if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
309	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( " ");  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwAsIAE( " ");  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwAsIAE( " ");	  if(exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	53	None	replace
310	[BUG]  [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  else  if(dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	89	None	replace
311	[BUG]  [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  else  if(dec  ==  null  ||  exp  ==  null)  {  try  {  return  createBigDecimal(str);  }  catch(NumberFormatException  nfe)  {  return  createLong(str);  }	  }    else    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createBigDecimal(str);    }    catch(NumberFormatException    nfe)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	89	None	replace
312	[BUG]  [BUGGY]  if(exp  ==  null  ||  dec  ==  null)  {  return  createBigDecimal(str);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  dec  ==  null)  {  return  createBigDecimal(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  dec  ==  null)  {  return  createBigDecimal(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createBigDecimal(str);    }    	non-compiled	[CE]  ')'  expected	11	None	replace
313	[BUG]  [BUGGY]  Neighbor  exp  =  getNeighbor(str);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  exp  =  getNeighbor(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  exp  =  getNeighbor(str);	  if(allZeros)    {    if(exp    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
314	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.no.string.value ");  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.no.string.value ");  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwAsIAE( "msg.no.string.value ");	  if(allZeros)    {    if(exp    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
315	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.no.character ");  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.no.character ");  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwAsIAE( "msg.no.character ");	  if(allZeros)    {    if(exp    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
316	[BUG]  [BUGGY]  Neighbor  exp  =  createNegative(str);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Neighbor  exp  =  createNegative(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Neighbor  exp  =  createNegative(str);	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
317	[BUG]  [BUGGY]  Integer  dec  =  isAllZeros(mant)?  createInteger(str):  0;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  isAllZeros(mant)?  createInteger(str):  0;  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  isAllZeros(mant)?  createInteger(str):  0;	  if(!allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    try    {    return    createLong(str);    }    catch(NumberFormatException    nfe)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
318	[BUG]  [BUGGY]  }  catch(NumberFormatException  e)  {  return  createBigDecimal(str);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  }  catch(NumberFormatException  e)  {  return  createBigDecimal(str);  [BUGGY]        }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	}  catch(NumberFormatException  e)  {  return  createBigDecimal(str);	  }    catch(NumberFormatException    nfe)    {    return    createInteger(str);    	non-compiled	[CE]  ')'  expected	14	None	replace
319	[BUG]  [BUGGY]  aughtException( " ");  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtException( " ");  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtException( " ");	  if(allZeros)    {    if(dec    ==    null    ||    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
320	[BUG]  [BUGGY]  Integer  dec  =  getDecimalValue(str);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  Integer  dec  =  getDecimalValue(str);  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	Integer  dec  =  getDecimalValue(str);	  Integer    dec    =    getDecimalValue();    	non-compiled	[CE]  ')'  expected	7	None	replace
321	[BUG]  [BUGGY]  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	try  {  return  createInteger(str);  }  catch(NumberFormatException  nfe)  {  }	  if(dec    ==    null    ||    exp    ==    null)    {    try    {    return    createInteger(str);    }    catch(NumberFormatException    nfe)    {    }    	non-compiled	[CE]  ')'  expected	59	None	replace
322	[BUG]  [BUGGY]  if(exp  ==  null  ||  dec  ==  null)  {  return  createInteger(str);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  if(exp  ==  null  ||  dec  ==  null)  {  return  createInteger(str);  }  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	if(exp  ==  null  ||  dec  ==  null)  {  return  createInteger(str);  }	  if(dec    ==    null    ||    exp    ==    null)    {    return    createInteger(str);    }    	non-compiled	[CE]  ')'  expected	85	None	replace
323	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.no.string.dec ");  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (dec  ==  null  &&  exp  ==  null)  {  try  {  return  createInteger(str);  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  try  {  return  createLong(str);      [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.no.string.dec ");  [BUGGY]      }  catch  (NumberFormatException  nfe)  {  //  NOPMD      //  ignore  the  bad  number        }  }  return  createBigInteger(str);  }  else  {  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);  try  {  Float  f  =  createFloat(str);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	569	571	1	replace	aughtExceptionHandler.throwAsIAE( "msg.no.string.dec ");	  if(allZeros)    {    if(dec    ==    null    &&    exp    ==    null)    {    return    createLong(str);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
