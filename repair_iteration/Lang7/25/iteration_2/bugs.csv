bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException( " ");  }	      	non-compiled	[CE]  ')'  expected	5	None	replace
2	[BUG]  [BUGGY]  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }	      	non-compiled	[CE]  ')'  expected	5	None	replace
3	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number. ");  }  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number. ");  }  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number. ");  }	      	non-compiled	[CE]  ')'  expected	5	None	replace
4	[BUG]  [BUGGY]  f  =  NumberUtils.createDouble(numeric);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  f  =  NumberUtils.createDouble(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	f  =  NumberUtils.createDouble(numeric);	      f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	8	None	replace
5	[BUG]  [BUGGY]  return  f.floatValue();  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  return  f.floatValue();  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.floatValue();	  return    f.longValue();    	non-compiled	[CE]  ')'  expected	3	None	replace
6	[BUG]  [BUGGY]  return  f.longValue()  +  1;  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  return  f.longValue()  +  1;  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.longValue()  +  1;	  return    f.longValue();    	non-compiled	[CE]  ')'  expected	3	None	replace
7	[BUG]  [BUGGY]  double  f  =  NumberUtils.createDouble(numeric);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  double  f  =  NumberUtils.createDouble(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  f  =  NumberUtils.createDouble(numeric);	      float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	14	None	replace
8	[BUG]  [BUGGY]  double  f  =  NumberUtils.createFloat(numeric);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  double  f  =  NumberUtils.createFloat(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  f  =  NumberUtils.createFloat(numeric);	      float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	14	None	replace
9	[BUG]  [BUGGY]  double  mant  =  NumberUtils.createFloat(numeric);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  double  mant  =  NumberUtils.createFloat(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  mant  =  NumberUtils.createFloat(numeric);	      float    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	12	None	replace
10	[BUG]  [BUGGY]  float  mant  =  NumberUtils.createFloat(f);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  float  mant  =  NumberUtils.createFloat(f);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  mant  =  NumberUtils.createFloat(f);	      float    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	12	None	replace
11	[BUG]  [BUGGY]  double  mant  =  NumberUtils.createDouble(numeric);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  double  mant  =  NumberUtils.createDouble(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  mant  =  NumberUtils.createDouble(numeric);	      float    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	12	None	replace
12	[BUG]  [BUGGY]  return  f.intValue()  +  1;  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  return  f.intValue()  +  1;  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.intValue()  +  1;	  return    f.intValue();    	non-compiled	[CE]  ')'  expected	4	None	replace
13	[BUG]  [BUGGY]  Number  f  =  NumberUtils.createNumber(numeric);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Number  f  =  NumberUtils.createNumber(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Number  f  =  NumberUtils.createNumber(numeric);	      Number    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	10	None	replace
14	[BUG]  [BUGGY]  Number  f  =  NumberUtils.createInteger(numeric);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Number  f  =  NumberUtils.createInteger(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Number  f  =  NumberUtils.createInteger(numeric);	      Number    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	10	None	replace
15	[BUG]  [BUGGY]  return  f.doubleValue()  +  1;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  return  f.doubleValue()  +  1;  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.doubleValue()  +  1;	  return    f.doubleValue();    	non-compiled	[CE]  ')'  expected	2	None	replace
16	[BUG]  [BUGGY]  return  f.doubleValue()  +  2;  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  return  f.doubleValue()  +  2;  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.doubleValue()  +  2;	  return    f.doubleValue();    	non-compiled	[CE]  ')'  expected	2	None	replace
17	[BUG]  [BUGGY]  return  f.infinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros));  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  return  f.infinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros));  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros));	  return    f.infinite();    	non-compiled	[CE]  ')'  expected	1	None	replace
18	[BUG]  [BUGGY]  return  f.infinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  return  f.infinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros);  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros);	  return    f.infinite();    	non-compiled	[CE]  ')'  expected	1	None	replace
19	[BUG]  [BUGGY]  return  f.infinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  return  f.infinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {	  return    f.infinite();    	non-compiled	[CE]  ')'  expected	1	None	replace
20	[BUG]  [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Double  f  =  NumberUtils.createDouble(numeric);	      Integer    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	13	None	replace
21	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(0);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Integer  f  =  NumberUtils.createInteger(0);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(0);	      Integer    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	13	None	replace
22	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createInteger(numeric);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Float  f  =  NumberUtils.createInteger(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createInteger(numeric);	      Float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	6	None	replace
23	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue());  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric.floatValue());	      Float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	6	None	replace
24	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.intValue());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.intValue());  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric.intValue());	      Integer    f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	11	None	replace
25	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.doubleValue());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.doubleValue());  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric.doubleValue());	      Integer    f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	11	None	replace
26	[BUG]  [BUGGY]  f  =  NumberUtils.createBigInteger(numeric);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  f  =  NumberUtils.createBigInteger(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	f  =  NumberUtils.createBigInteger(numeric);	      f    =    NumberUtils.createLong(numeric);    	non-compiled	[CE]  ')'  expected	9	None	replace
27	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return;  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return;  }  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return;  }	      	non-compiled	[CE]  ')'  expected	5	None	replace
28	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  continue;  }  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  continue;  }	      	non-compiled	[CE]  ')'  expected	5	None	replace
29	[BUG]  [BUGGY]  float  f  =  NumberUtils.createInteger(numeric);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  float  f  =  NumberUtils.createInteger(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  f  =  NumberUtils.createInteger(numeric);	      float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	14	None	replace
30	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  1);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  f  =  NumberUtils.createFloat(numeric  +  1);	      float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	14	None	replace
31	[BUG]  [BUGGY]  float  mant  =  NumberUtils.createInteger(numeric);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  float  mant  =  NumberUtils.createInteger(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  mant  =  NumberUtils.createInteger(numeric);	      float    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	12	None	replace
32	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInt(numeric);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Integer  f  =  NumberUtils.createInt(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInt(numeric);	      Integer    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	13	None	replace
33	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  1);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  1);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric  +  1);	      Float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	6	None	replace
34	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric,  0.0F);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric,  0.0F);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric,  0.0F);	      Float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	6	None	replace
35	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric).floatValue();  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric).floatValue();  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric).floatValue();	      Float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	6	None	replace
36	[BUG]  [BUGGY]  f  =  NumberUtils.createInteger(0);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  f  =  NumberUtils.createInteger(0);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	f  =  NumberUtils.createInteger(0);	      f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	8	None	replace
37	[BUG]  [BUGGY]  return  f.infinite()  +  1;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  return  f.infinite()  +  1;  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  +  1;	  return    f.infinite();    	non-compiled	[CE]  ')'  expected	1	None	replace
38	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).intValue();  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).intValue();  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric).intValue();	      Integer    f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	11	None	replace
39	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric,  0.0F);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric,  0.0F);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric,  0.0F);	      Integer    f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	11	None	replace
40	[BUG]  [BUGGY]  f  =  NumberUtils.createFloat(numeric  +  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  f  =  NumberUtils.createFloat(numeric  +  1);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	f  =  NumberUtils.createFloat(numeric  +  1);	      f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	7	None	replace
41	[BUG]  [BUGGY]  int  mant  =  NumberUtils.createFloat(numeric);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  int  mant  =  NumberUtils.createFloat(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	int  mant  =  NumberUtils.createFloat(numeric);	      float    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	12	None	replace
42	[BUG]  [BUGGY]  Number  f  =  NumberUtils.createFloat(numeric,  0.0F);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Number  f  =  NumberUtils.createFloat(numeric,  0.0F);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Number  f  =  NumberUtils.createFloat(numeric,  0.0F);	      Number    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	10	None	replace
43	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  NumberUtils.createNumber(numeric);  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  NumberUtils.createNumber(numeric);  }  [BUGGY]    }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  NumberUtils.createNumber(numeric);  }	      	non-compiled	[CE]  ')'  expected	5	None	replace
44	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createFloat(numeric).intValue();  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Integer  f  =  NumberUtils.createFloat(numeric).intValue();  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createFloat(numeric).intValue();	      Integer    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	13	None	replace
45	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric)+  1;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric)+  1;  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric)+  1;	      Integer    f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	11	None	replace
46	[BUG]  [BUGGY]  float  f  =  NumberUtils.createLong(numeric);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {      [BUGGY]  float  f  =  NumberUtils.createLong(numeric);  [BUGGY]    return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  f  =  NumberUtils.createLong(numeric);	      float    f    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	14	None	replace
