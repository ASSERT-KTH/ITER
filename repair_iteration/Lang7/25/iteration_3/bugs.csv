bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  float  mant  =  NumberUtils.createLong(numeric);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  float  mant  =  NumberUtils.createLong(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  mant  =  NumberUtils.createLong(numeric);	  float    mant    =    NumberUtils.createFloat(f);    	non-compiled	[CE]  ')'  expected	10	None	replace
2	[BUG]  [BUGGY]  int  mant  =  NumberUtils.createInteger(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  int  mant  =  NumberUtils.createInteger(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	int  mant  =  NumberUtils.createInteger(numeric);	  int    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	41	None	replace
3	[BUG]  [BUGGY]  Float  mant  =  NumberUtils.createFloat(numeric);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  mant  =  NumberUtils.createFloat(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  mant  =  NumberUtils.createFloat(numeric);	  int    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	41	None	replace
4	[BUG]  [BUGGY]  long  mant  =  NumberUtils.createLong(numeric);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  long  mant  =  NumberUtils.createLong(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	long  mant  =  NumberUtils.createLong(numeric);	  int    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	41	None	replace
5	[BUG]  [BUGGY]  return  f.infinite()  &&  f.floatValue()  ==  0.0F  &&!allZeros)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return  f.infinite()  &&  f.floatValue()  ==  0.0F  &&!allZeros)  {  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  &&  f.floatValue()  ==  0.0F  &&!allZeros)  {	  return    f.infinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
6	[BUG]  [BUGGY]  return  f.infinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return  f.infinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros))  {  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros))  {	  return    f.infinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
7	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  2);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  2);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  f  =  NumberUtils.createFloat(numeric  +  2);	  float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	30	None	replace
8	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  1L);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  1L);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  f  =  NumberUtils.createFloat(numeric  +  1L);	  float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	30	None	replace
9	[BUG]  [BUGGY]  Double  mant  =  NumberUtils.createDouble(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Double  mant  =  NumberUtils.createDouble(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Double  mant  =  NumberUtils.createDouble(numeric);	  double    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	9	None	replace
10	[BUG]  [BUGGY]  double  mant  =  NumberUtils.createDouble(f);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  mant  =  NumberUtils.createDouble(f);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  mant  =  NumberUtils.createDouble(f);	  double    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	9	None	replace
11	[BUG]  [BUGGY]  return  f.infinite()  &&(f.floatValue()  ==  0.0F  &&!allZeros));  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return  f.infinite()  &&(f.floatValue()  ==  0.0F  &&!allZeros));  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  &&(f.floatValue()  ==  0.0F  &&!allZeros));	  return    f.infinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros));    	non-compiled	[CE]  ')'  expected	17	None	replace
12	[BUG]  [BUGGY]  return  f.infinite()  ||(f.floatValue()  ==  0.0D  &&!allZeros));  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return  f.infinite()  ||(f.floatValue()  ==  0.0D  &&!allZeros));  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  ||(f.floatValue()  ==  0.0D  &&!allZeros));	  return    f.infinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros));    	non-compiled	[CE]  ')'  expected	17	None	replace
13	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric,  0.0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric,  0.0);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric,  0.0);	  Integer    f    =    NumberUtils.createInteger(numeric,    0.0F);    	non-compiled	[CE]  ')'  expected	39	None	replace
14	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric,  1.0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric,  1.0);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric,  1.0);	  Integer    f    =    NumberUtils.createInteger(numeric,    0.0F);    	non-compiled	[CE]  ')'  expected	39	None	replace
15	[BUG]  [BUGGY]  f  =  NumberUtils.createInteger(numeric  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  f  =  NumberUtils.createInteger(numeric  +  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	f  =  NumberUtils.createInteger(numeric  +  1);	  f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
16	[BUG]  [BUGGY]  f  =  NumberUtils.createLong(numeric  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  f  =  NumberUtils.createLong(numeric  +  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	f  =  NumberUtils.createLong(numeric  +  1);	  f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	40	None	replace
17	[BUG]  [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric.doubleValue());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric.doubleValue());  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Double  f  =  NumberUtils.createDouble(numeric.doubleValue());	  Double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	20	None	replace
18	[BUG]  [BUGGY]  Double  f  =  NumberUtils.createDouble(str);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Double  f  =  NumberUtils.createDouble(str);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Double  f  =  NumberUtils.createDouble(str);	  Double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	20	None	replace
19	[BUG]  [BUGGY]  return(f.doubleValue()  ==  0.0F)?  f.doubleValue()  :  f.doubleValue();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  ==  0.0F)?  f.doubleValue()  :  f.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  ==  0.0F)?  f.doubleValue()  :  f.doubleValue();	  return    f.doubleValue()    +    1;    	non-compiled	[CE]  ')'  expected	15	None	replace
20	[BUG]  [BUGGY]  return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  +  1  :  f.doubleValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  +  1  :  f.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  +  1  :  f.doubleValue();	  return    f.doubleValue()    +    1;    	non-compiled	[CE]  ')'  expected	15	None	replace
21	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  2);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  2);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric  +  2);	  Float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	33	None	replace
22	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  1L);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  1L);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric  +  1L);	  Float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	33	None	replace
23	[BUG]  [BUGGY]  Number  f  =  NumberUtils.createInteger(numeric,  0.0F);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Number  f  =  NumberUtils.createInteger(numeric,  0.0F);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Number  f  =  NumberUtils.createInteger(numeric,  0.0F);	  Number    f    =    NumberUtils.createFloat(numeric,    0.0F);    	non-compiled	[CE]  ')'  expected	42	None	replace
24	[BUG]  [BUGGY]  Number  f  =  NumberUtils.createNumber(numeric,  0.0F);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Number  f  =  NumberUtils.createNumber(numeric,  0.0F);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Number  f  =  NumberUtils.createNumber(numeric,  0.0F);	  Number    f    =    NumberUtils.createFloat(numeric,    0.0F);    	non-compiled	[CE]  ')'  expected	42	None	replace
25	[BUG]  [BUGGY]  Number  f  =  NumberUtils.createInteger(0);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Number  f  =  NumberUtils.createInteger(0);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Number  f  =  NumberUtils.createInteger(0);	  Number    f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	14	None	replace
26	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.intValue()  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.intValue()  +  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric.intValue()  +  1);	  Integer    f    =    NumberUtils.createInteger(numeric.intValue());    	non-compiled	[CE]  ')'  expected	24	None	replace
27	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.floatValue());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.floatValue());  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric.floatValue());	  Integer    f    =    NumberUtils.createInteger(numeric.intValue());    	non-compiled	[CE]  ')'  expected	24	None	replace
28	[BUG]  [BUGGY]  return  f.infinite()  &&  f.floatValue()  ==  0.0F  &&!allZeros);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return  f.infinite()  &&  f.floatValue()  ==  0.0F  &&!allZeros);  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  &&  f.floatValue()  ==  0.0F  &&!allZeros);	  return    f.infinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros);    	non-compiled	[CE]  ')'  expected	18	None	replace
29	[BUG]  [BUGGY]  return  f.infinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return  f.infinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros;  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros;	  return    f.infinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros);    	non-compiled	[CE]  ')'  expected	18	None	replace
30	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(1);	  Integer    f    =    NumberUtils.createInteger(0);    	non-compiled	[CE]  ')'  expected	21	None	replace
31	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric)+  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric)+  2;  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric)+  2;	  Integer    f    =    NumberUtils.createInteger(numeric)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
32	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric)/  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric)/  1;  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric)/  1;	  Integer    f    =    NumberUtils.createInteger(numeric)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
33	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric)+  3;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric)+  3;  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric)+  3;	  Integer    f    =    NumberUtils.createInteger(numeric)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
34	[BUG]  [BUGGY]  double  f  =  NumberUtils.createLong(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  f  =  NumberUtils.createLong(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  f  =  NumberUtils.createLong(numeric);	  float    f    =    NumberUtils.createLong(numeric);    	non-compiled	[CE]  ')'  expected	46	None	replace
35	[BUG]  [BUGGY]  float  f  =  NumberUtils.createDouble(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  float  f  =  NumberUtils.createDouble(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  f  =  NumberUtils.createDouble(numeric);	  double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	7	None	replace
36	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createLong(numeric);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createLong(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createLong(numeric);	  Float    f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	22	None	replace
37	[BUG]  [BUGGY]  if(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }	  if(f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	2	None	replace
38	[BUG]  [BUGGY]  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }	  if(f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	2	None	replace
39	[BUG]  [BUGGY]  double  mant  =  NumberUtils.createDouble(numeric.doubleValue());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  mant  =  NumberUtils.createDouble(numeric.doubleValue());  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  mant  =  NumberUtils.createDouble(numeric.doubleValue());	  double    mant    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	11	None	replace
40	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric,  0.0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric,  0.0);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric,  0.0);	  Float    f    =    NumberUtils.createFloat(numeric,    0.0F);    	non-compiled	[CE]  ')'  expected	34	None	replace
41	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric,  0.0F  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric,  0.0F  +  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric,  0.0F  +  1);	  Float    f    =    NumberUtils.createFloat(numeric,    0.0F);    	non-compiled	[CE]  ')'  expected	34	None	replace
42	[BUG]  [BUGGY]  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
43	[BUG]  [BUGGY]  Context.checkState(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Context.checkState(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros);  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Context.checkState(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros);	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	1	None	replace
44	[BUG]  [BUGGY]  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||  f.isInfinite()  ||  f.floatValue()  ==  0.0F)  {  throw  new  NumberFormatException( " ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
45	[BUG]  [BUGGY]  ||  f.isInfinite())  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||  f.isInfinite())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||  f.isInfinite())  {  throw  new  NumberFormatException( " ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
46	[BUG]  [BUGGY]  return  f.floatValue()  +  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return  f.floatValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.floatValue()  +  1;	  return    f.intValue()    +    1;    	non-compiled	[CE]  ')'  expected	12	None	replace
47	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric).floatValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  float  f  =  NumberUtils.createFloat(numeric).floatValue();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  f  =  NumberUtils.createFloat(numeric).floatValue();	  Float    f    =    NumberUtils.createFloat(numeric).floatValue();    	non-compiled	[CE]  ')'  expected	35	None	replace
48	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createInteger(numeric).floatValue();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createInteger(numeric).floatValue();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createInteger(numeric).floatValue();	  Float    f    =    NumberUtils.createFloat(numeric).floatValue();    	non-compiled	[CE]  ')'  expected	35	None	replace
49	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue()  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue()  +  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric.floatValue()  +  1);	  Float    f    =    NumberUtils.createFloat(numeric.floatValue());    	non-compiled	[CE]  ')'  expected	23	None	replace
50	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(f.floatValue());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(f.floatValue());  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(f.floatValue());	  Float    f    =    NumberUtils.createFloat(numeric.floatValue());    	non-compiled	[CE]  ')'  expected	23	None	replace
51	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.doubleValue());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.doubleValue());  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric.doubleValue());	  Float    f    =    NumberUtils.createFloat(numeric.floatValue());    	non-compiled	[CE]  ')'  expected	23	None	replace
52	[BUG]  [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||(f.floatValue()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return    NumberUtils.createNumber(numeric);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
53	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return    NumberUtils.createNumber(numeric);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
54	[BUG]  [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||(f.floatValue()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return    NumberUtils.createNumber(numeric);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
55	[BUG]  [BUGGY]  ||  f.isInfinite())  {  return  NumberUtils.createNumber(numeric);  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||  f.isInfinite())  {  return  NumberUtils.createNumber(numeric);  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||  f.isInfinite())  {  return  NumberUtils.createNumber(numeric);  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return    NumberUtils.createNumber(numeric);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
56	[BUG]  [BUGGY]  double  mant  =  NumberUtils.createInteger(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  mant  =  NumberUtils.createInteger(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  mant  =  NumberUtils.createInteger(numeric);	  float    mant    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	31	None	replace
57	[BUG]  [BUGGY]  Double  mant  =  NumberUtils.createInteger(numeric);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Double  mant  =  NumberUtils.createInteger(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Double  mant  =  NumberUtils.createInteger(numeric);	  float    mant    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	31	None	replace
58	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).infinite();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).infinite();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric).infinite();	  Integer    f    =    NumberUtils.createInteger(numeric).intValue();    	non-compiled	[CE]  ')'  expected	38	None	replace
59	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).doubleValue();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).doubleValue();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric).doubleValue();	  Integer    f    =    NumberUtils.createInteger(numeric).intValue();    	non-compiled	[CE]  ')'  expected	38	None	replace
60	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
61	[BUG]  [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||(f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
62	[BUG]  [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  continue;  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  continue;  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  continue;	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
63	[BUG]  [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  }  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||(f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
64	[BUG]  [BUGGY]  return(f.infinite()  >=  0.0F)?  f.infinite()  :  f.floatValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.infinite()  >=  0.0F)?  f.infinite()  :  f.floatValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.infinite()  >=  0.0F)?  f.infinite()  :  f.floatValue();	  return    f.infinite()    +    1;    	non-compiled	[CE]  ')'  expected	37	None	replace
65	[BUG]  [BUGGY]  return(f.infinite()  >=  0.0F)?  f.infinite()  :  f.floatValue()  +  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.infinite()  >=  0.0F)?  f.infinite()  :  f.floatValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.infinite()  >=  0.0F)?  f.infinite()  :  f.floatValue()  +  1;	  return    f.infinite()    +    1;    	non-compiled	[CE]  ')'  expected	37	None	replace
66	[BUG]  [BUGGY]  return(f.infinite()  >=  0.0F)?  f.infinite()  :  f.infinite();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.infinite()  >=  0.0F)?  f.infinite()  :  f.infinite();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.infinite()  >=  0.0F)?  f.infinite()  :  f.infinite();	  return    f.infinite()    +    1;    	non-compiled	[CE]  ')'  expected	37	None	replace
67	[BUG]  [BUGGY]  double  f  =  NumberUtils.createInteger(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  f  =  NumberUtils.createInteger(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  f  =  NumberUtils.createInteger(numeric);	  float    f    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  ')'  expected	29	None	replace
68	[BUG]  [BUGGY]  ||!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	3	None	replace
69	[BUG]  [BUGGY]  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	3	None	replace
70	[BUG]  [BUGGY]  ||!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	3	None	replace
71	[BUG]  [BUGGY]  return(f.doubleValue()  ==  0.0F)?  f.doubleValue()  :  0;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  ==  0.0F)?  f.doubleValue()  :  0;  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  ==  0.0F)?  f.doubleValue()  :  0;	  return    f.doubleValue()    +    2;    	non-compiled	[CE]  ')'  expected	16	None	replace
72	[BUG]  [BUGGY]  return(f.doubleValue()  >=  0.0F)?  f.doubleValue()  :  0;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  >=  0.0F)?  f.doubleValue()  :  0;  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  >=  0.0F)?  f.doubleValue()  :  0;	  return    f.doubleValue()    +    2;    	non-compiled	[CE]  ')'  expected	16	None	replace
73	[BUG]  [BUGGY]  return(f.doubleValue()  ==  0.0F)?  1  :  f.doubleValue();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  ==  0.0F)?  1  :  f.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  ==  0.0F)?  1  :  f.doubleValue();	  return    f.doubleValue()    +    2;    	non-compiled	[CE]  ')'  expected	16	None	replace
74	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.doubleValue()  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.doubleValue()  +  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric.doubleValue()  +  1);	  Integer    f    =    NumberUtils.createInteger(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	25	None	replace
75	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(f.doubleValue());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(f.doubleValue());  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(f.doubleValue());	  Integer    f    =    NumberUtils.createInteger(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	25	None	replace
76	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.doubleValue()  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric.doubleValue()  -  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric.doubleValue()  -  1);	  Integer    f    =    NumberUtils.createInteger(numeric.doubleValue());    	non-compiled	[CE]  ')'  expected	25	None	replace
77	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return;  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return;  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
78	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
79	[BUG]  [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  return;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  ||(f.floatValue()  ==  0.0F  &&!allZeros))  {  return;  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	||(f.floatValue()  ==  0.0F  &&!allZeros))  {  return;  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
80	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  IllegalArgumentException( " ");  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
81	[BUG]  [BUGGY]  f  =  NumberUtils.createBigDecimal(numeric);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  f  =  NumberUtils.createBigDecimal(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	f  =  NumberUtils.createBigDecimal(numeric);	  f    =    NumberUtils.createBigInteger(numeric);    	non-compiled	[CE]  ')'  expected	26	None	replace
82	[BUG]  [BUGGY]  Number  f  =  NumberUtils.createNumber(numeric.doubleValue());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Number  f  =  NumberUtils.createNumber(numeric.doubleValue());  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Number  f  =  NumberUtils.createNumber(numeric.doubleValue());	  Number    f    =    NumberUtils.createNumber(numeric);    	non-compiled	[CE]  ')'  expected	13	None	replace
83	[BUG]  [BUGGY]  Number  f  =  NumberUtils.createNumber(str);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Number  f  =  NumberUtils.createNumber(str);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Number  f  =  NumberUtils.createNumber(str);	  Number    f    =    NumberUtils.createNumber(numeric);    	non-compiled	[CE]  ')'  expected	13	None	replace
84	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric,  1.0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric,  1.0);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric,  1.0);	  Float    f    =    NumberUtils.createFloat(numeric,    0.0F);    	non-compiled	[CE]  ')'  expected	34	None	replace
85	[BUG]  [BUGGY]  return(f.doubleValue()  >=  0)?  f.doubleValue()  :  f.doubleValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  >=  0)?  f.doubleValue()  :  f.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  >=  0)?  f.doubleValue()  :  f.doubleValue();	  return    f.doubleValue()    +    2;    	non-compiled	[CE]  ')'  expected	16	None	replace
86	[BUG]  [BUGGY]  return(f.doubleValue()  ==  0)?  f.doubleValue()  :  f.doubleValue();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  ==  0)?  f.doubleValue()  :  f.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  ==  0)?  f.doubleValue()  :  f.doubleValue();	  return    f.doubleValue()    +    2;    	non-compiled	[CE]  ')'  expected	16	None	replace
87	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).floatValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric).floatValue();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric).floatValue();	  Integer    f    =    NumberUtils.createInteger(numeric).intValue();    	non-compiled	[CE]  ')'  expected	38	None	replace
88	[BUG]  [BUGGY]  return  f.infinite()  ||(f.floatValue()!=  0.0F  &&!allZeros));  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return  f.infinite()  ||(f.floatValue()!=  0.0F  &&!allZeros));  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  ||(f.floatValue()!=  0.0F  &&!allZeros));	  return    f.infinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros));    	non-compiled	[CE]  ')'  expected	17	None	replace
89	[BUG]  [BUGGY]  double  f  =  NumberUtils.createDouble(numeric).doubleValue();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  f  =  NumberUtils.createDouble(numeric).doubleValue();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  f  =  NumberUtils.createDouble(numeric).doubleValue();	  double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	7	None	replace
90	[BUG]  [BUGGY]  double  f  =  NumberUtils.createDouble(numeric  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  f  =  NumberUtils.createDouble(numeric  +  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  f  =  NumberUtils.createDouble(numeric  +  1);	  double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	7	None	replace
91	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.isLongValue()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.isLongValue()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.isLongValue()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	1	None	replace
92	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException( " ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	1	None	replace
93	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.isFloat()))  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.isFloat()))  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.isFloat()))  {  throw  new  NumberFormatException( " ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	1	None	replace
94	[BUG]  [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric).doubleValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric).doubleValue();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Double  f  =  NumberUtils.createDouble(numeric).doubleValue();	  Double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	20	None	replace
95	[BUG]  [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric  +  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Double  f  =  NumberUtils.createDouble(numeric  +  1);	  Double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	20	None	replace
96	[BUG]  [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric,  0.0F);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric,  0.0F);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Double  f  =  NumberUtils.createDouble(numeric,  0.0F);	  Double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	20	None	replace
97	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  continue;  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
98	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  continue;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  continue;  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  continue;  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
99	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue()  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue()  -  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric.floatValue()  -  1);	  Float    f    =    NumberUtils.createFloat(numeric.floatValue());    	non-compiled	[CE]  ')'  expected	23	None	replace
100	[BUG]  [BUGGY]  Integer  mant  =  NumberUtils.createInteger(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  mant  =  NumberUtils.createInteger(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  mant  =  NumberUtils.createInteger(numeric);	  int    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	41	None	replace
101	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return    NumberUtils.createNumber(numeric);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
102	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()!=  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()!=  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.floatValue()!=  0.0F  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return    NumberUtils.createNumber(numeric);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
103	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  1.0  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  1.0  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  1.0  &&!allZeros))  {  return  NumberUtils.createNumber(numeric);  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return    NumberUtils.createNumber(numeric);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
104	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInt(numeric  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInt(numeric  +  1);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInt(numeric  +  1);	  Integer    f    =    NumberUtils.createInt(numeric);    	non-compiled	[CE]  ')'  expected	32	None	replace
105	[BUG]  [BUGGY]  double  mant  =  NumberUtils.createDouble(numeric).doubleValue();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  mant  =  NumberUtils.createDouble(numeric).doubleValue();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  mant  =  NumberUtils.createDouble(numeric).doubleValue();	  double    mant    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	11	None	replace
106	[BUG]  [BUGGY]  double  mant  =  NumberUtils.createDouble(numeric)+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  mant  =  NumberUtils.createDouble(numeric)+  1;  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  mant  =  NumberUtils.createDouble(numeric)+  1;	  double    mant    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	11	None	replace
107	[BUG]  [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  3);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  float  f  =  NumberUtils.createFloat(numeric  +  3);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	float  f  =  NumberUtils.createFloat(numeric  +  3);	  float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	30	None	replace
108	[BUG]  [BUGGY]  if(f.isInfinite()  ||  f.floatValue()  ==  0.0D  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(f.isInfinite()  ||  f.floatValue()  ==  0.0D  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(f.isInfinite()  ||  f.floatValue()  ==  0.0D  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }	  if(f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	2	None	replace
109	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  ')'  expected	3	None	replace
110	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.value()  ==  0.0F  &&!allZeros))  {  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ");  }	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  ')'  expected	3	None	replace
111	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  3);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric  +  3);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric  +  3);	  Float    f    =    NumberUtils.createFloat(numeric    +    1);    	non-compiled	[CE]  ')'  expected	33	None	replace
112	[BUG]  [BUGGY]  return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  :  0;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  :  0;  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  :  0;	  return    f.doubleValue()    +    1;    	non-compiled	[CE]  ')'  expected	15	None	replace
113	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createFloat(numeric).infinite();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createFloat(numeric).infinite();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createFloat(numeric).infinite();	  Integer    f    =    NumberUtils.createFloat(numeric).intValue();    	non-compiled	[CE]  ')'  expected	44	None	replace
114	[BUG]  [BUGGY]  return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  f.floatValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  f.floatValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  f.floatValue();	  return    f.infinite()    +    1;    	non-compiled	[CE]  ')'  expected	37	None	replace
115	[BUG]  [BUGGY]  return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  Integer.MIN_VALUE;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  Integer.MIN_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  Integer.MIN_VALUE;	  return    f.infinite()    +    1;    	non-compiled	[CE]  ')'  expected	37	None	replace
116	[BUG]  [BUGGY]  return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  Integer.valueOf(0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  Integer.valueOf(0);  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  Integer.valueOf(0);	  return    f.infinite()    +    1;    	non-compiled	[CE]  ')'  expected	37	None	replace
117	[BUG]  [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return;  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isNaN()  ||  f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return;  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
118	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric).doubleValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric).doubleValue();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric).doubleValue();	  Float    f    =    NumberUtils.createFloat(numeric).floatValue();    	non-compiled	[CE]  ')'  expected	35	None	replace
119	[BUG]  [BUGGY]  return(f.doubleValue()  >=  0.0F)?  f.doubleValue()  :  f.doubleValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  >=  0.0F)?  f.doubleValue()  :  f.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  >=  0.0F)?  f.doubleValue()  :  f.doubleValue();	  return    f.doubleValue()    +    2;    	non-compiled	[CE]  ')'  expected	16	None	replace
120	[BUG]  [BUGGY]  return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  :  f.doubleValue();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  :  f.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  :  f.doubleValue();	  return    f.doubleValue()    +    1;    	non-compiled	[CE]  ')'  expected	15	None	replace
121	[BUG]  [BUGGY]  return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  :  f.floatValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  :  f.floatValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.doubleValue()  ==  0.0F  &&!allZeros)?  f.doubleValue()  :  f.floatValue();	  return    f.doubleValue()    +    1;    	non-compiled	[CE]  ')'  expected	15	None	replace
122	[BUG]  [BUGGY]  aughtException(numeric,  f.getMask());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  aughtException(numeric,  f.getMask());  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	aughtException(numeric,  f.getMask());	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	1	None	replace
123	[BUG]  [BUGGY]  aughtException(numeric,  f.getMessage());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  aughtException(numeric,  f.getMessage());  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	aughtException(numeric,  f.getMessage());	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	1	None	replace
124	[BUG]  [BUGGY]  aughtException(numeric,  f.getMillis());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  aughtException(numeric,  f.getMillis());  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	aughtException(numeric,  f.getMillis());	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	1	None	replace
125	[BUG]  [BUGGY]  aughtException(numeric,  f.toString());  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  aughtException(numeric,  f.toString());  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	aughtException(numeric,  f.toString());	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	1	None	replace
126	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.getValue()  ==  0.0F  &&!allZeros))  {  continue;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.getValue()  ==  0.0F  &&!allZeros))  {  continue;  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.getValue()  ==  0.0F  &&!allZeros))  {  continue;  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
127	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F)&&!allZeros)  {  continue;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F)&&!allZeros)  {  continue;  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F)&&!allZeros)  {  continue;  }	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
128	[BUG]  [BUGGY]  aughtExceptionHandler(numeric,  f.toString());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  aughtExceptionHandler(numeric,  f.toString());  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	aughtExceptionHandler(numeric,  f.toString());	  if(!(f.isInfinite()    ||    (f.floatValue()    ==    0.0F    &&!allZeros)))    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  ')'  expected	3	None	replace
129	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createFloat(numeric).floatValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createFloat(numeric).floatValue();  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createFloat(numeric).floatValue();	  Integer    f    =    NumberUtils.createFloat(numeric).intValue();    	non-compiled	[CE]  ')'  expected	44	None	replace
130	[BUG]  [BUGGY]  return(f.infinite()  ==  0.0F)?  f.infinite()  :  f.floatValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.infinite()  ==  0.0F)?  f.infinite()  :  f.floatValue();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.infinite()  ==  0.0F)?  f.infinite()  :  f.floatValue();	  return    f.infinite()    +    1;    	non-compiled	[CE]  ')'  expected	37	None	replace
131	[BUG]  [BUGGY]  return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  Float.parseFloat(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  Float.parseFloat(numeric);  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.infinite()  ==  0.0F  &&!allZeros)?  f.infinite()  :  Float.parseFloat(numeric);	  return    f.infinite()    +    1;    	non-compiled	[CE]  ')'  expected	37	None	replace
132	[BUG]  [BUGGY]  char  mant  =  NumberUtils.createFloat(numeric);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  char  mant  =  NumberUtils.createFloat(numeric);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	char  mant  =  NumberUtils.createFloat(numeric);	  int    mant    =    NumberUtils.createFloat(numeric);    	non-compiled	[CE]  ')'  expected	41	None	replace
133	[BUG]  [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue(),  0.0F);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Float  f  =  NumberUtils.createFloat(numeric.floatValue(),  0.0F);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Float  f  =  NumberUtils.createFloat(numeric.floatValue(),  0.0F);	  Float    f    =    NumberUtils.createFloat(numeric.floatValue());    	non-compiled	[CE]  ')'  expected	23	None	replace
134	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(numeric);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  aughtExceptionHandler.handleMissingName(numeric);  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	aughtExceptionHandler.handleMissingName(numeric);	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
135	[BUG]  [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	aughtExceptionHandler.handleMalformedException( " ");	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
136	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	aughtExceptionHandler.handleMoreGuaranteed();	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
137	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(numeric,  str);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  aughtExceptionHandler.handleMissingName(numeric,  str);  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	aughtExceptionHandler.handleMissingName(numeric,  str);	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
138	[BUG]  [BUGGY]  return  f.infinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return  f.infinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros);  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return  f.infinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros);	  return    f.infinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros);    	non-compiled	[CE]  ')'  expected	18	None	replace
139	[BUG]  [BUGGY]  return(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros));  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  return(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros));  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	return(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros));	  return    f.infinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros));    	non-compiled	[CE]  ')'  expected	17	None	replace
140	[BUG]  [BUGGY]  NumberUtils.createNumber(numeric);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  NumberUtils.createNumber(numeric);  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	NumberUtils.createNumber(numeric);	  if(!(f.isInfinite()    ||(f.floatValue()    ==    0.0F    &&!allZeros)))    {    return    NumberUtils.createNumber(numeric);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
141	[BUG]  [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric,  0.0F,  0.0001);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Integer  f  =  NumberUtils.createInteger(numeric,  0.0F,  0.0001);  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Integer  f  =  NumberUtils.createInteger(numeric,  0.0F,  0.0001);	  Integer    f    =    NumberUtils.createInteger(numeric,    0.0F);    	non-compiled	[CE]  ')'  expected	39	None	replace
142	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException( ". ");  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException( ". ");  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException( ". ");  }	  if(f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	2	None	replace
143	[BUG]  [BUGGY]  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException(numeric);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException(numeric);  }  [BUGGY]      }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  throw  new  NumberFormatException(numeric);  }	  if(f.isInfinite()    ||    f.floatValue()    ==    0.0F    &&!allZeros)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ')'  expected	2	None	replace
144	[BUG]  [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric)+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  Double  f  =  NumberUtils.createDouble(numeric)+  1;  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	Double  f  =  NumberUtils.createDouble(numeric)+  1;	  Double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	20	None	replace
145	[BUG]  [BUGGY]  double  f  =  NumberUtils.createDouble(numeric)+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {        [BUGGY]  double  f  =  NumberUtils.createDouble(numeric)+  1;  [BUGGY]      return  f;  }  }  catch  (NumberFormatException  nfe)  {  //  NOPMD  }  case  'd'  :  case  'D'  :  try  {  Double  d  =  NumberUtils.createDouble(numeric);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  	projects/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.7071067811865475	525	525	1	replace	double  f  =  NumberUtils.createDouble(numeric)+  1;	  double    f    =    NumberUtils.createDouble(numeric);    	non-compiled	[CE]  ')'  expected	7	None	replace
