projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=(List)this.minRows.get(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=(List)this.minRow.clone();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=(List)this.minRow.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=getRow(row,col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=(List)this.minRow.get(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<column){if(minRow>col){minRow=row;if(minRow>col){thrownewIllegalArgumentException("");}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<column){if(minRow>col){minRow=row;if(minRow>col){returnminRow;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<column){if(minRow>col){minRow=row;if(minRow>col){minRow=row;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<column){if(minRow>col){minRow=row.getColumnCount();if(minRow>col){minRow=row;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140intcol=tableau.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140intcol=table.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140List<Integer>minRatioPositions=table.getMinimumPositions();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140List<Integer>minRatioPositions=tableau.getRows();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140List<Integer>minRatioPositions=Tableau.getIntegerSize();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139List<Integer>minRatioPositions=this.minRows.get(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139SimplexTableau<Integerrow=simplexTableau.getIntegerValue();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139SimplexTableau<Integerrow=simplexTableau.getIntegerColumn();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139List<Integer>minRatioPositions=this.minRows.get(row);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139List<Integer>minRatioPositions=table.getIntegerValue();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(row==tableau.getBasicRow(i)){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(row>table.getBasicRow(i)){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(row>tableau.getBasicRow(i)){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(row>table.getRowWidth()){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146if(row>col){if(minRow.getColumnCount()>1){minRow=row;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146if(row>col){if(minRow.getColumnCount()>1){row=row;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146if(row>col){if(minRow.getColumnCount()>1){minRow=column;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146row=table.getRowIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146row=table.getRowIndex(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144column=tableau.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144row=tableau.getRowIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144column=tableau.getColumnIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144row=table.getRowIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144i=tableau.getBasicColumn();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142for(;i<tableau.getWidth()-1&&minRow!=row;i++){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142for(;i<tableau.getWidth()&&minRow!=row;i++){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142for(;i<tableau.getWidth()&&row!=minRow;i++){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142for(;i<tableau.getWidth()&&column!=minRow;i++){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142for(;i<tableau.getWidth()&&i!=row;i++){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=table.getRowIndex(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=(Integer)tableau.getPivotRow(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=(Integer)tableau.getColumnFloat(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=(Integer)tableau.getColumnSize();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=(Integer)tableau.getPivotRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intcol=row.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intcol=table.getColumnFunctions();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intcol=table.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intcol=table.getColumnFunction(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intcol=table.getColumnIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=(Integer)this.minRow.clone();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=(Integer)this.minRow.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intcol=table.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=(Integer)this.minRow.toColumn();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=(Integer)this.minRow;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminIndex=tableau.getWidth();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminIndex=tableau.getHeight();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminIndex=table.getHeight();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminIndex=tableau.getColumnIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminIndex=tableau.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145minIndex=i;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145minIndex=i-1;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145minIndex-=i;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145minIndex=0;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146minRow=row;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146minRow=i;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146minRow=row-1;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146minRow=col;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146minRow=row-col;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138IntegerminRow=null;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138IntegerminRow=this.minRow;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138IntegerminRow=DEFAULT_EPSILON;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138IntegerminRow=this;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138IntegerminRow=row;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140for(Integerrow:minRatioPositions){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140for(Integerrow:minRows){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140for(Integerrow:col){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140for(Integerrow:minRow){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141inti=tableau.getNumObjectiveFunctions();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141inti=tableau.getHeight();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141inti=tableau.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141inti=tableau.getColumnIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141inti=table.getHeight();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(i<minIndex){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(i>minIndex){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(i>minRow){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(minIndex<i){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(i+1<minIndex){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138Tableautableau=Tableau.createInstance(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138Tableautableau=Tableau.getInstance(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138intcolumn=getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138intcol=getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138Tableautableau=Tableau.createInstance(col,null);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150row=table.getColumnIndex(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150row=table.getColumnIndex(col);minRow=row;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150row=table.getColumnIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150row=table.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150row=table.getColumnIndex(col);minRow=col;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143intminRow=tableau.getLength();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=(Integer)tableau.getRowWidth();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143intminRow=tableau.getColumnWidth();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=(SimplexTableau)this.getRow(minIndex);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143intminRow=tableau.getLength()-1;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140List<Integer>minRatioPositions=tableau.getPositions();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140List<Integer>minRatioPositions=tableau.getRowWidth();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140List<Integer>minRatioPositions=tableau.getMinimumPositions();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140List<Integer>minRatioPositions=tableau.getRowCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140List<Integer>minRatioPositions=tableau.getMinimumFunction();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminIndex=tableau.getMinimumFunctionIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150returntableau.getPivotRow(minIndex);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150row=(SimplexTableau)this.getBasicRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150row=(SimplexTableau)tableau.getBasicRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150table.setIndex(minIndex);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150row=(SimplexTableau)this.getPivotRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141inti=row.getNumObjectiveFunctions();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141inti=tableau.getLength();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142for(;i<tableau.getWidth()&&row!=minIndex;i++){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142for(;i<tableau.getWidth()&&minIndex!=row;i++){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144row=tableau.getBasicRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144row=tableau.getRowWidth();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144intminIndex=table.getMinimumObjectiveFunction();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144intminIndex=table.getBasicIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144column=tableau.getColumn();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(minIndex<0){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(i>maxUlps){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=(Integer)tableau.getBasicRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=(SimplexTableau)tableau.getBasicRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=(SimplexTableau)table.getBasicRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145column=tableau.getColumnWidth();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=tableau.getBasicRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138IntegerminRow=(int)this.minRow;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138IntegerminRow=this.minRatioPositions;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139List<Integer>row=(List)this.minRows.get(minRow);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139List<Integer>minRatioPositions=(List)this.minRows.get(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139List<Integer>row=getRows();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139List<Integer>minRatioPositions=(List)this.minRows.get(row);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139List<Integer>row=(List)this.minRows.get(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146minRow=row*(i-minIndex);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146minRow=row+1;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146if(i>0){if(!(minRowinstanceofInteger)){return(Integer)rhs.divide(minRow,col);}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146if(i>0){if(!(minRowinstanceofInteger)){thrownewIllegalArgumentException("Invalidroworcolumnindexselection");}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146if(i>0){if(!(minRowinstanceofInteger)){thrownewIllegalArgumentException("Invalidroworcolumnselection");}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146if(i>0){if(!(minRowinstanceofInteger)){return(Integer)rhs.get(minIndex);}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146if(i>0){if(!(minRowinstanceofInteger)){return(Integer)rhs.intValue();}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(i==tableau.getBasicRow(row)){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(i!=row){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(i==tableau.getBasicRow(i)){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(i!=column){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145minIndex=i+1;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145minIndex=i-2;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150column=tableau.getColumnIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150for(inti=row.getWidth()-1;i<minIndex;i++){Integercolumn=tableau.getColumnIndex(minIndex);if(col<0){column=col+1;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150for(inti=row.getWidth()-1;i<minIndex;i++){Integercolumn=table.getColumnIndex(minIndex);if(col<0){setPosition(col);}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=row.getMinimumFunction();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141row=(SimplexTableau)this.getRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141row=(SimplexTableau)this.getRowWidth();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=(int)this.minRow.clone();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=(int)this.minRow.getColumn();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140for(Integerrow:minIndex){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140for(Integerrow:minRatioPositions,col){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140for(Integerrow:minRatioPositions.size()-1){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138SimplexTableautableau=(SimplexTableau)this.getPivotRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138SimplexTableautableau=(SimplexTableau)getPivotRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138List<Integer>row=(List)this.minRows.get(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138SimplexTableautableau=getSimplexTableau();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138List<Integer>row=getRows();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intminRow=row.getMinimumRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intmaxUlps=Math.max(maxUlps,row.getMinimumNumber());
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intmaxUlps=Math.max(maxUlps,col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intminRow=(int)this.minRow.clone();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intmaxUlps=Math.max(maxUlps,i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=tableau.getBasicRow(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=tableau.getLength();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=getRowColumn();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=table.getLength();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java145row=(int)tab.getColumnIndex(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140for(Integerrow:this.minRatioPositions){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intmaxUlps=Math.max(maxUlps,row.getSize());
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intmaxUlps=Math.max(maxUlps,row.size()-1);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142intmaxUlps=Math.max(maxUlps,row.getLength());
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140intmaxUlps=tableau.getMaxUlps();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140intminRow=tableau.getHeight();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140intminRatioPositions=tableau.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140intmaxUlps=table.getMaximumFractionValue();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java140intmaxUlps=table.getMaxUlps();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<0){for(inti=1;i<tableau.getLength();i++){table.setIndex(minRow);}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150for(inti=1;i<tableau.getHeight();i++){if(!Table.contains(minRow)){table.setIndex(minRow);}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<0){for(inti=1;i<tableau.getLength();i++){table.setItem(minRow);}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150for(inti=1;i<tableau.getHeight();i++){if(!Table.contains(minRow)){minRow=col;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146i=table.getLength();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146row=getRowColumn();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146i=table.getBasicValue();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146i=tableau.getBasicValue(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146i=table.getBasicValue(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(i>0&&row==tableau.getBasicRow(i)){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(i==tableau.getNumObjectiveFunctions()){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143if(i==table.getBasicRow(i)){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intmaxUlps=Math.max(maxUlps,col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminRatioPositions=getMinimumRowPositions();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminRatioPositions=(int)Tableau.getPositions();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminRow=getMaxRow();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139IntegermaxRatioPositions=Math.max(16,col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=(int)table.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=(int)tabella.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=table.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=(int)tabell.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java141intminRow=table.getColumnIndex();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138SimplexTableautableau=getPivotTableau();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138SimplexTableautableau=(SimplexTableau)getPivotTableau();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138SimplexTableautableau=(SimplexTableau)getTableau();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138SimplexTableautableau=(SimplexTableau)getObject();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138SimplexTableautableau=(SimplexTableau)getDataArea(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(i>0){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(i<minRow){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144if(i<=minIndex){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146minRow-=row;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java146minRow=row+i;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=tableau.getColumnLength();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=(int)table.getObject();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=table.getColumnIndex(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=(int)tabella.getColumnIndex(col);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java143row=(int)tabella.getColumnCount();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142for(;i<tableau.getWidth()&&minRow!=col;i++){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java142for(;i<tableau.getWidth()&&minRow!=column;i++){
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<0){intmaxUlps=maxUlps-1;if(maxUlps>col){minRow=maxUlps;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<0){for(inti=row;i<tableau.getLength();i++){table.setIndex(minRow);}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<0){intmaxUlps=maxUlps-1;if(maxUlps>=minRow){maxUlps=Math.max(maxUlps,col);}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<0){intmaxUlps=maxUlps-1;if(maxUlps>=minRow){maxUlps=maxUlps;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java150if(col<0){intmaxUlps=Math.max(maxUlps,col);if(maxUlps>=minRow){minRow=row;}
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java139intminIndex=tableau.getWidth()-1;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138IntegerminRow=0;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java138IntegerminRow=col;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144row=tableau.getBasicRow(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144row=tableau.getBasicRow(i);minRow=col-1;
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144intminIndex=(int)table.getBasicValue();
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144intminIndex=(int)tab.getColumnIndex(i);
projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java144row=tableau.getRowLength();
