bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] Integer minRow = null; [FE] MaxCountExceededException [CONTEXT]          [BUGGY] Integer minRow = null; [BUGGY] int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	138	138	1	replace	
2	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]          [BUGGY] [BUGGY] Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	138	138	1	add	
3	[BUG] [BUGGY] int minIndex = tableau.getWidth(); [FE] MaxCountExceededException [CONTEXT]          Integer minRow = null; [BUGGY] int minIndex = tableau.getWidth(); [BUGGY] for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	139	139	1	replace	
4	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]          Integer minRow = null; [BUGGY] [BUGGY] int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	139	139	1	add	
5	[BUG] [BUGGY] for (Integer row : minRatioPositions) { [FE] MaxCountExceededException [CONTEXT]         Integer minRow = null; int minIndex = tableau.getWidth(); [BUGGY] for (Integer row : minRatioPositions) { [BUGGY] int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	140	140	1	replace	
6	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]         Integer minRow = null; int minIndex = tableau.getWidth(); [BUGGY] [BUGGY] for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	140	140	1	add	
7	[BUG] [BUGGY] int i = tableau.getNumObjectiveFunctions(); [FE] MaxCountExceededException [CONTEXT]        Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { [BUGGY] int i = tableau.getNumObjectiveFunctions(); [BUGGY] for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } return minRow; [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	141	141	1	replace	
8	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]        Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { [BUGGY] [BUGGY] int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } return minRow; [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	141	141	1	add	
9	[BUG] [BUGGY] for (; i < tableau.getWidth() - 1 && minRow != row; i++) { [FE] MaxCountExceededException [CONTEXT]       Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); [BUGGY] for (; i < tableau.getWidth() - 1 && minRow != row; i++) { [BUGGY] if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } return minRow; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	142	142	1	replace	
10	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]       Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); [BUGGY] [BUGGY] for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } return minRow; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	142	142	1	add	
11	[BUG] [BUGGY] if (row == tableau.getBasicRow(i)) { [FE] MaxCountExceededException [CONTEXT]      Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { [BUGGY] if (row == tableau.getBasicRow(i)) { [BUGGY] if (i < minIndex) { minIndex = i; minRow = row; } } } } return minRow; } return minRatioPositions.get(0); [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	143	143	1	replace	
12	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]      Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { [BUGGY] [BUGGY] if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } return minRow; } return minRatioPositions.get(0); [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	143	143	1	add	
13	[BUG] [BUGGY] if (i < minIndex) { [FE] MaxCountExceededException [CONTEXT]     Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { [BUGGY] if (i < minIndex) { [BUGGY] minIndex = i; minRow = row; } } } } return minRow; } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	144	144	1	replace	
14	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]     Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { [BUGGY] [BUGGY] if (i < minIndex) { minIndex = i; minRow = row; } } } } return minRow; } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	144	144	1	add	
15	[BUG] [BUGGY] minIndex = i; [FE] MaxCountExceededException [CONTEXT]    Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { [BUGGY] minIndex = i; [BUGGY] minRow = row; } } } } return minRow; } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	145	145	1	replace	
16	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]    Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { [BUGGY] [BUGGY] minIndex = i; minRow = row; } } } } return minRow; } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	145	145	1	add	
17	[BUG] [BUGGY] minRow = row; [FE] MaxCountExceededException [CONTEXT]   Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; [BUGGY] minRow = row; [BUGGY] } } } } return minRow; } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	146	146	1	replace	
18	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]   Integer minRow = null; int minIndex = tableau.getWidth(); for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; [BUGGY] [BUGGY] minRow = row; } } } } return minRow; } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	146	146	1	add	
19	[BUG] [BUGGY] } [FE] MaxCountExceededException [CONTEXT] for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } [BUGGY] } [BUGGY] return minRow; } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	150	150	1	replace	
20	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] for (Integer row : minRatioPositions) { int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } [BUGGY] [BUGGY] } return minRow; } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	150	150	1	add	
21	[BUG] [BUGGY] return minRow; [FE] MaxCountExceededException [CONTEXT] int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } [BUGGY] return minRow; [BUGGY] } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	151	151	1	replace	
22	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] int i = tableau.getNumObjectiveFunctions(); for (; i < tableau.getWidth() - 1 && minRow != row; i++) { if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } [BUGGY] [BUGGY] return minRow; } return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.5	151	151	1	add	
24	[BUG] [BUGGY] int column = i + tableau.getArtificialVariableOffset(); [FE] MaxCountExceededException [CONTEXT] } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { [BUGGY] int column = i + tableau.getArtificialVariableOffset(); [BUGGY] final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } } }     [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.3333333333333333	121	121	1	replace	
25	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { [BUGGY] [BUGGY] int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } } }     [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.3333333333333333	121	121	1	add	
26	[BUG] [BUGGY] final double entry = tableau.getEntry(row, column); [FE] MaxCountExceededException [CONTEXT] if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); [BUGGY] final double entry = tableau.getEntry(row, column); [BUGGY] if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } } }      [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.3333333333333333	122	122	1	replace	
27	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); [BUGGY] [BUGGY] final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } } }      [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.3333333333333333	122	122	1	add	
28	[BUG] [BUGGY] if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { [FE] MaxCountExceededException [CONTEXT] if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); [BUGGY] if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { [BUGGY] return row; } } }       [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.3333333333333333	123	123	1	replace	
29	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); [BUGGY] [BUGGY] if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } } }       [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.3333333333333333	123	123	1	add	
30	[BUG] [BUGGY] return row; [FE] MaxCountExceededException [CONTEXT] return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { [BUGGY] return row; [BUGGY] } } }        [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.3333333333333333	124	124	1	replace	
31	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { [BUGGY] [BUGGY] return row; } } }        [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.3333333333333333	124	124	1	add	
32	[BUG] [BUGGY] minRatioPositions.add(i); [FE] MaxCountExceededException [CONTEXT] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { [BUGGY] minRatioPositions.add(i); [BUGGY] } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.31622776601683794	104	104	1	replace	
33	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { [BUGGY] [BUGGY] minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.31622776601683794	104	104	1	add	
34	[BUG] [BUGGY] for (Integer row : minRatioPositions) { [FE] MaxCountExceededException [CONTEXT] } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   [BUGGY] for (Integer row : minRatioPositions) { [BUGGY] for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } } }   [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.31622776601683794	119	119	1	replace	
35	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   [BUGGY] [BUGGY] for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } } }   [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.31622776601683794	119	119	1	add	
36	[BUG] [BUGGY] for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { [FE] MaxCountExceededException [CONTEXT] } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { [BUGGY] for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { [BUGGY] int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } } }    [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.31622776601683794	120	120	1	replace	
37	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { [BUGGY] [BUGGY] for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } } }    [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.31622776601683794	120	120	1	add	
38	[BUG] [BUGGY] doIteration(tableau); [FE] MaxCountExceededException [CONTEXT] getConstraints(), getGoalType(), restrictToNonNegative(), epsilon, maxUlps); solvePhase1(tableau); tableau.dropPhase1Objective(); while (!tableau.isOptimal()) { [BUGGY] doIteration(tableau); [BUGGY] } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.25	227	227	1	replace	
39	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] getConstraints(), getGoalType(), restrictToNonNegative(), epsilon, maxUlps); solvePhase1(tableau); tableau.dropPhase1Objective(); while (!tableau.isOptimal()) { [BUGGY] [BUGGY] doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.25	227	227	1	add	
40	[BUG] [BUGGY] } [FE] MaxCountExceededException [CONTEXT] } while (!tableau.isOptimal()) { doIteration(tableau); }  if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { throw new NoFeasibleSolutionException(); } [BUGGY] } [BUGGY]  [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.22941573387056174	209	209	1	replace	
41	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] } while (!tableau.isOptimal()) { doIteration(tableau); }  if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { throw new NoFeasibleSolutionException(); } [BUGGY] [BUGGY] } [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.22941573387056174	209	209	1	add	
42	[BUG] [BUGGY] doIteration(tableau); [FE] MaxCountExceededException [CONTEXT] protected void solvePhase1(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {  if (tableau.getNumArtificialVariables() == 0) { return; } while (!tableau.isOptimal()) { [BUGGY] doIteration(tableau); [BUGGY] }  if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { throw new NoFeasibleSolutionException(); } } [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.2182178902359924	202	202	1	replace	
43	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] protected void solvePhase1(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {  if (tableau.getNumArtificialVariables() == 0) { return; } while (!tableau.isOptimal()) { [BUGGY] [BUGGY] doIteration(tableau); }  if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { throw new NoFeasibleSolutionException(); } } [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.2182178902359924	202	202	1	add	
44	[BUG] [BUGGY] while (!tableau.isOptimal()) { [FE] MaxCountExceededException [CONTEXT] protected void solvePhase1(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {  if (tableau.getNumArtificialVariables() == 0) { return; } [BUGGY] while (!tableau.isOptimal()) { [BUGGY] doIteration(tableau); }  if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { throw new NoFeasibleSolutionException(); } } [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.21320071635561041	201	201	1	replace	
45	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] protected void solvePhase1(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {  if (tableau.getNumArtificialVariables() == 0) { return; } [BUGGY] [BUGGY] while (!tableau.isOptimal()) { doIteration(tableau); }  if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { throw new NoFeasibleSolutionException(); } } [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.21320071635561041	201	201	1	add	
46	[BUG] [BUGGY] if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { [FE] MaxCountExceededException [CONTEXT]  if (tableau.getNumArtificialVariables() == 0) { return; } while (!tableau.isOptimal()) { doIteration(tableau); }  [BUGGY] if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { [BUGGY] throw new NoFeasibleSolutionException(); } } [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.21320071635561041	206	206	1	replace	
47	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT]  if (tableau.getNumArtificialVariables() == 0) { return; } while (!tableau.isOptimal()) { doIteration(tableau); }  [BUGGY] [BUGGY] if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { throw new NoFeasibleSolutionException(); } } [CLASS] SimplexSolver [METHOD] solvePhase1 [RETURN_TYPE] void  SimplexTableau tableau [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.21320071635561041	206	206	1	add	
48	[BUG] [BUGGY] tableau.dropPhase1Objective(); [FE] MaxCountExceededException [CONTEXT] throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException { final SimplexTableau tableau = new SimplexTableau(getFunction(), getConstraints(), getGoalType(), restrictToNonNegative(), epsilon, maxUlps); solvePhase1(tableau); [BUGGY] tableau.dropPhase1Objective(); [BUGGY]  while (!tableau.isOptimal()) { doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20851441405707477	224	224	1	replace	
49	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException { final SimplexTableau tableau = new SimplexTableau(getFunction(), getConstraints(), getGoalType(), restrictToNonNegative(), epsilon, maxUlps); solvePhase1(tableau); [BUGGY] [BUGGY] tableau.dropPhase1Objective(); while (!tableau.isOptimal()) { doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20851441405707477	224	224	1	add	
50	[BUG] [BUGGY] while (!tableau.isOptimal()) { [FE] MaxCountExceededException [CONTEXT] new SimplexTableau(getFunction(), getConstraints(), getGoalType(), restrictToNonNegative(), epsilon, maxUlps); solvePhase1(tableau); tableau.dropPhase1Objective(); [BUGGY] while (!tableau.isOptimal()) { [BUGGY] doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20851441405707477	226	226	1	replace	
51	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] new SimplexTableau(getFunction(), getConstraints(), getGoalType(), restrictToNonNegative(), epsilon, maxUlps); solvePhase1(tableau); tableau.dropPhase1Objective(); [BUGGY] [BUGGY] while (!tableau.isOptimal()) { doIteration(tableau); } return tableau.getSolution(); } [CLASS] SimplexSolver [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue multiplier pivotVal ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20851441405707477	226	226	1	add	
52	[BUG] [BUGGY] double minValue = 0; [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { [BUGGY] double minValue = 0; [BUGGY] Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; minPos = i; } } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	70	70	1	replace	
53	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { [BUGGY] [BUGGY] double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; minPos = i; } } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	70	70	1	add	
54	[BUG] [BUGGY] Integer minPos = null; [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; [BUGGY] Integer minPos = null; [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; minPos = i; } } return minPos; [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	71	71	1	replace	
55	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; [BUGGY] [BUGGY] Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; minPos = i; } } return minPos; [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	71	71	1	add	
56	[BUG] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [BUGGY] final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	72	72	1	replace	
57	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; [BUGGY] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	72	72	1	add	
58	[BUG] [BUGGY] final double entry = tableau.getEntry(0, i); [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [BUGGY] final double entry = tableau.getEntry(0, i); [BUGGY]   if (entry < minValue) { minValue = entry; minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	73	73	1	replace	
59	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [BUGGY] [BUGGY] final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	73	73	1	add	
60	[BUG] [BUGGY] if (entry < minValue) { [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   [BUGGY] if (entry < minValue) { [BUGGY] minValue = entry; minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	76	76	1	replace	
61	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   [BUGGY] [BUGGY] if (entry < minValue) { minValue = entry; minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	76	76	1	add	
62	[BUG] [BUGGY] minValue = entry; [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { [BUGGY] minValue = entry; [BUGGY] minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	77	77	1	replace	
63	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { [BUGGY] [BUGGY] minValue = entry; minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	77	77	1	add	
64	[BUG] [BUGGY] minPos = i; [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; [BUGGY] minPos = i; [BUGGY] } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	78	78	1	replace	
65	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; [BUGGY] [BUGGY] minPos = i; } } return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	78	78	1	add	
66	[BUG] [BUGGY] return minPos; [FE] MaxCountExceededException [CONTEXT] Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; minPos = i; } } [BUGGY] return minPos; [BUGGY] } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	81	81	1	replace	
67	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i);   if (entry < minValue) { minValue = entry; minPos = i; } } [BUGGY] [BUGGY] return minPos; } [CLASS] SimplexSolver [METHOD] getPivotColumn [RETURN_TYPE] Integer  SimplexTableau tableau [VARIABLES] Integer minPos boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minValue int DEFAULT_ULPS i maxUlps  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	81	81	1	add	
68	[BUG] [BUGGY] List<Integer> minRatioPositions = new ArrayList<Integer>(); [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  [BUGGY] List<Integer> minRatioPositions = new ArrayList<Integer>(); [BUGGY] double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	92	92	1	replace	
69	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  [BUGGY] [BUGGY] List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	92	92	1	add	
70	[BUG] [BUGGY] double minRatio = Double.MAX_VALUE; [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); [BUGGY] double minRatio = Double.MAX_VALUE; [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	93	93	1	replace	
71	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); [BUGGY] [BUGGY] double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	93	93	1	add	
72	[BUG] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { [BUGGY] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	94	94	1	replace	
73	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; [BUGGY] [BUGGY] for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	94	94	1	add	
74	[BUG] [BUGGY] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { [BUGGY] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); [BUGGY] final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	95	95	1	replace	
75	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { [BUGGY] [BUGGY] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	95	95	1	add	
76	[BUG] [BUGGY] final double entry = tableau.getEntry(i, col); [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); [BUGGY] final double entry = tableau.getEntry(i, col); [BUGGY]  if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	96	96	1	replace	
77	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); [BUGGY] [BUGGY] final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	96	96	1	add	
78	[BUG] [BUGGY] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); [BUGGY] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [BUGGY] final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	98	98	1	replace	
79	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); [BUGGY] [BUGGY] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	98	98	1	add	
80	[BUG] [BUGGY] final double ratio = rhs / entry; [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [BUGGY] final double ratio = rhs / entry; [BUGGY]   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	99	99	1	replace	
81	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] private Integer getPivotRow(SimplexTableau tableau, final int col) {  List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [BUGGY] [BUGGY] final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	99	99	1	add	
82	[BUG] [BUGGY] final int cmp = Double.compare(ratio, minRatio); [FE] MaxCountExceededException [CONTEXT] List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   [BUGGY] final int cmp = Double.compare(ratio, minRatio); [BUGGY] if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } }  [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	102	102	1	replace	
83	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] List<Integer> minRatioPositions = new ArrayList<Integer>(); double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   [BUGGY] [BUGGY] final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } }  [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	102	102	1	add	
84	[BUG] [BUGGY] if (cmp == 0) { [FE] MaxCountExceededException [CONTEXT] double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); [BUGGY] if (cmp == 0) { [BUGGY] minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	103	103	1	replace	
85	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] double minRatio = Double.MAX_VALUE; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); [BUGGY] [BUGGY] if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	103	103	1	add	
86	[BUG] [BUGGY] } else if (cmp < 0) { [FE] MaxCountExceededException [CONTEXT] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); [BUGGY] } else if (cmp < 0) { [BUGGY] minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	105	105	1	replace	
87	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); [BUGGY] [BUGGY] } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	105	105	1	add	
88	[BUG] [BUGGY] minRatio = ratio; [FE] MaxCountExceededException [CONTEXT] final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { [BUGGY] minRatio = ratio; [BUGGY] minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {  [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	106	106	1	replace	
89	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] final double entry = tableau.getEntry(i, col); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { [BUGGY] [BUGGY] minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {  [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	106	106	1	add	
90	[BUG] [BUGGY] minRatioPositions = new ArrayList<Integer>(); [FE] MaxCountExceededException [CONTEXT] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; [BUGGY] minRatioPositions = new ArrayList<Integer>(); [BUGGY] minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	107	107	1	replace	
91	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; [BUGGY] [BUGGY] minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	107	107	1	add	
92	[BUG] [BUGGY] minRatioPositions.add(i); [FE] MaxCountExceededException [CONTEXT] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); [BUGGY] minRatioPositions.add(i); [BUGGY] } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {    [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	108	108	1	replace	
93	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { final double ratio = rhs / entry;   final int cmp = Double.compare(ratio, minRatio); if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); [BUGGY] [BUGGY] minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {    [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	108	108	1	add	
94	[BUG] [BUGGY] if (minRatioPositions.size() == 0) { [FE] MaxCountExceededException [CONTEXT] if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } [BUGGY] if (minRatioPositions.size() == 0) { [BUGGY] return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	113	113	1	replace	
95	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] if (cmp == 0) { minRatioPositions.add(i); } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } [BUGGY] [BUGGY] if (minRatioPositions.size() == 0) { return null; } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	113	113	1	add	
96	[BUG] [BUGGY] } else if (minRatioPositions.size() > 1) { [FE] MaxCountExceededException [CONTEXT] } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; [BUGGY] } else if (minRatioPositions.size() > 1) { [BUGGY]    for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	115	115	1	replace	
97	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] } else if (cmp < 0) { minRatio = ratio; minRatioPositions = new ArrayList<Integer>(); minRatioPositions.add(i); } } } if (minRatioPositions.size() == 0) { return null; [BUGGY] [BUGGY] } else if (minRatioPositions.size() > 1) {   for (Integer row : minRatioPositions) { for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { int column = i + tableau.getArtificialVariableOffset(); final double entry = tableau.getEntry(row, column); if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { return row; } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	115	115	1	add	
98	[BUG] [BUGGY] return minRatioPositions.get(0); [FE] MaxCountExceededException [CONTEXT] if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } return minRow; } [BUGGY] return minRatioPositions.get(0); [BUGGY] } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	153	153	1	replace	
99	[BUG] [BUGGY] [FE] MaxCountExceededException [CONTEXT] if (row == tableau.getBasicRow(i)) { if (i < minIndex) { minIndex = i; minRow = row; } } } } return minRow; } [BUGGY] [BUGGY] return minRatioPositions.get(0); } [CLASS] SimplexSolver [METHOD] getPivotRow [RETURN_TYPE] Integer  SimplexTableau tableau final int col [VARIABLES] Integer minRow row List minRatioPositions boolean SimplexTableau tableau double DEFAULT_EPSILON entry epsilon minRatio minValue ratio rhs int DEFAULT_ULPS cmp col column i maxUlps minIndex  	projects/Math28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	0.20412414523193154	153	153	1	add	
