bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  2;	      int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
2	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	      int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
3	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  3;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  3;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  3;	      int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
4	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  decPos)  {  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  if(decPos  >  -1  &&  expPos  <  decPos)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1  &&  expPos  <  decPos)  {	  if(decPos    <    decPos)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
5	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;	      int    expPos    =    val.indexOf('.');    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
6	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  char  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	char  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	      int    expPos    =    val.indexOf('.');    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
7	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;	      int    expPos    =    val.indexOf('.');    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
8	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  <  decPos)  {  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  if(expPos  >  -1  &&  expPos  <  decPos)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >  -1  &&  expPos  <  decPos)  {	  if(expPos    <    decPos)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
9	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
10	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
11	[BUG]  [BUGGY]  result.add(val.substring(decPos,  expPos));  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  result.add(val.substring(decPos,  expPos));  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	result.add(val.substring(decPos,  expPos));	      if(expPos    >    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
12	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	      if(expPos    >    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
13	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(expPos    >    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
14	[BUG]  [BUGGY]  if(decPos  <  expPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  if(decPos  <  expPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  <  expPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(expPos    <    decPos)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	11	None	replace
15	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
16	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  0  ||  expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
17	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
18	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
19	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  1;	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	4	None	replace
20	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  expPos);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('.',  expPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  expPos);	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	4	None	replace
21	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(expPos    >    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
22	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.');  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  decPos  =  val.indexOf('.');  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  decPos  =  val.indexOf('.');	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
23	[BUG]  [BUGGY]  Integer  dec  =  val.substring(decPos  +  1,  expPos);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  Integer  dec  =  val.substring(decPos  +  1,  expPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  dec  =  val.substring(decPos  +  1,  expPos);	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
24	[BUG]  [BUGGY]  Integer  decPos  =  val.indexOf('.');  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  Integer  decPos  =  val.indexOf('.');  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  decPos  =  val.indexOf('.');	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
25	[BUG]  [BUGGY]  Integer  dec  =  val.substring(decPos  +  1);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  Integer  dec  =  val.substring(decPos  +  1);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  dec  =  val.substring(decPos  +  1);	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
26	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e');  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e');  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('e');	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	4	None	replace
27	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
28	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  1;	      int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
29	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  1;	      int    expPos    =    val.indexOf('.');    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
30	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  if(expPos  <  decPos)  {  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  <  decPos)  {  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	12	None	replace
31	[BUG]  [BUGGY]  if(decPos  >=  decPos)  {  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  if(decPos  >=  decPos)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >=  decPos)  {	  if(expPos    >    -1)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
32	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  expPos)  {  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  if(decPos  >  -1  &&  expPos  <  expPos)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1  &&  expPos  <  expPos)  {	  if(decPos    <    expPos)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
33	[BUG]  [BUGGY]  bucket  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  decPos)  {  throw  new  NumberFormatException( " ");  }	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
34	[BUG]  [BUGGY]  bucket  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  bucket  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
35	[BUG]  [BUGGY]  expPos  =  val.indexOf('.');  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  expPos  =  val.indexOf('.');  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.');	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
36	[BUG]  [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;	      if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	5	None	replace
37	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')+  1;	      int    expPos    =    val.indexOf('.');    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
38	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  1;	      int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
