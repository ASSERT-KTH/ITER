bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  2;	  int    expPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
2	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  3;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  3;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  3;	  int    expPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
3	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  1;	  int    expPos    =    val.indexOf('.')+    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	26	None	replace
4	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e'  +  1);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e'  +  1);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('e'  +  1);	  int    expPos    =    val.indexOf('.')+    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	26	None	replace
5	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  expPos);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  decPos  =  val.indexOf('.',  expPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  decPos  =  val.indexOf('.',  expPos);	  int    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	22	None	replace
6	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  1;	  int    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	22	None	replace
7	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
8	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  3;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  3;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  3;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
9	[BUG]  [BUGGY]  bucket  <  =  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  =  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  =  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	  bucket    <    0    ||    expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	10	None	replace
10	[BUG]  [BUGGY]  bucket  <  expPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  expPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  expPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	33	None	replace
11	[BUG]  [BUGGY]  bucket  <  expPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  expPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  expPos)  {  throw  new  NumberFormatException( " ");  }	  bucket    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	33	None	replace
12	[BUG]  [BUGGY]  Integer  dec  =  val.substring(decPos  +  1,  expPos  +  1);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  dec  =  val.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  dec  =  val.substring(decPos  +  1,  expPos  +  1);	  Integer    dec    =    val.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  orphaned  case	23	None	replace
13	[BUG]  [BUGGY]  int  dec  =  val.substring(decPos  +  1,  expPos);  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  dec  =  val.substring(decPos  +  1,  expPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  dec  =  val.substring(decPos  +  1,  expPos);	  Integer    dec    =    val.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  orphaned  case	23	None	replace
14	[BUG]  [BUGGY]  Integer  dec  =  val.substring(decPos  +  1,  expPos,  expPos);  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  dec  =  val.substring(decPos  +  1,  expPos,  expPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  dec  =  val.substring(decPos  +  1,  expPos,  expPos);	  Integer    dec    =    val.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  orphaned  case	23	None	replace
15	[BUG]  [BUGGY]  if(expPos  >=  decPos)  {  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  >=  decPos)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >=  decPos)  {	  if(decPos    >=    decPos)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
16	[BUG]  [BUGGY]  if(decPos  >=  expPos)  {  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >=  expPos)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >=  expPos)  {	  if(decPos    >=    decPos)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
17	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')/  2;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')/  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')/  2;	  int    expPos    =    val.indexOf('.');    expPos    =    val.indexOf('E')+    val.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	7	None	replace
18	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	  bucket    <    0    ||    expPos    <    0)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	16	None	replace
19	[BUG]  [BUGGY]  String  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  String  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	String  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	  char    expPos    =    val.indexOf('.');    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	6	None	replace
20	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  char  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	char  expPos  =  val.indexOf('.');  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;	  char    expPos    =    val.indexOf('.');    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	6	None	replace
21	[BUG]  [BUGGY]  result.add(val.substring(decPos,  expPos  +  1));  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  result.add(val.substring(decPos,  expPos  +  1));  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	result.add(val.substring(decPos,  expPos  +  1));	  result.add(val.substring(decPos,    expPos));    	non-compiled	[CE]  orphaned  case	11	None	replace
22	[BUG]  [BUGGY]  result.add(val.substring(0,  expPos));  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  result.add(val.substring(0,  expPos));  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	result.add(val.substring(0,  expPos));	  result.add(val.substring(decPos,    expPos));    	non-compiled	[CE]  orphaned  case	11	None	replace
23	[BUG]  [BUGGY]  result.add(val.substring(decPos,  expPos)+  1);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  result.add(val.substring(decPos,  expPos)+  1);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	result.add(val.substring(decPos,  expPos)+  1);	  result.add(val.substring(decPos,    expPos));    	non-compiled	[CE]  orphaned  case	11	None	replace
24	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	27	None	replace
25	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  3;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  3;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  3;	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	27	None	replace
26	[BUG]  [BUGGY]  if(decPos  >  -1  ||  expPos  <  decPos)  {  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1  ||  expPos  <  decPos)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1  ||  expPos  <  decPos)  {	  if(decPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
27	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  =  decPos)  {  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1  &&  expPos  <  =  decPos)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1  &&  expPos  <  =  decPos)  {	  if(decPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
28	[BUG]  [BUGGY]  bucket  <  =  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  =  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  =  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	13	None	replace
29	[BUG]  [BUGGY]  expPos  =  val.indexOf('.',  expPos);  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  expPos  =  val.indexOf('.',  expPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.',  expPos);	  expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	35	None	replace
30	[BUG]  [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  1;	  expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	35	None	replace
31	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	21	None	replace
32	[BUG]  [BUGGY]  if(expPos  >  -1  ||  expPos  <  decPos)  {  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  >  -1  ||  expPos  <  decPos)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >  -1  ||  expPos  <  decPos)  {	  if(expPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
33	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  <  =  decPos)  {  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  >  -1  &&  expPos  <  =  decPos)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >  -1  &&  expPos  <  =  decPos)  {	  if(expPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
34	[BUG]  [BUGGY]  if(decPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	9	None	replace
35	[BUG]  [BUGGY]  if(decPos  >  -1  ||  expPos  <  expPos)  {  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1  ||  expPos  <  expPos)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1  ||  expPos  <  expPos)  {	  if(decPos    >    -1    &&    expPos    <    expPos)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
36	[BUG]  [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.')+  val.indexOf('E')+  2;	  expPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
37	[BUG]  [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')+  3;  [CE]  orphaned  case  [FE]                            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')+  3;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.')+  val.indexOf('E')+  3;	  expPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
38	[BUG]  [BUGGY]  int  dec  =  val.substring(decPos  +  1);  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  dec  =  val.substring(decPos  +  1);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  dec  =  val.substring(decPos  +  1);	  Integer    dec    =    val.substring(decPos    +    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
39	[BUG]  [BUGGY]  Integer  dec  =  val.substring(decPos  +  2,  expPos);  [CE]  orphaned  case  [FE]                            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  dec  =  val.substring(decPos  +  2,  expPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  dec  =  val.substring(decPos  +  2,  expPos);	  Integer    dec    =    val.substring(decPos    +    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
40	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  2  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  2  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  2  +  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1    +    1;    	non-compiled	[CE]  orphaned  case	28	None	replace
41	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  2;	  int    expPos    =    val.indexOf('.')+    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	19	None	replace
42	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  3;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  3;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  val.indexOf('E')+  3;	  int    expPos    =    val.indexOf('.')+    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	19	None	replace
43	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.lastChar.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.lastChar.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.lastChar.indexOf('e')+  val.indexOf('E')+  1;	  int    expPos    =    val.indexOf('.')+    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	19	None	replace
44	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  2;	  int    expPos    =    val.indexOf('.',    lastChar)+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	29	None	replace
45	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  3;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  3;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  3;	  int    expPos    =    val.indexOf('.',    lastChar)+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	29	None	replace
46	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length()    -    1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	17	None	replace
47	[BUG]  [BUGGY]  if(decPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length()    -    1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	17	None	replace
48	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.. ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  <  decPos)  {  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.. ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  <  decPos)  {  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.. ");  }	  if(expPos    <    decPos)    {    if(decPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	30	None	replace
49	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  &&  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	12	None	replace
50	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')+  2;	  int    expPos    =    val.indexOf('.',    decPos)+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	37	None	replace
51	[BUG]  [BUGGY]  Integer  decPos  =  val.indexOf('.',  expPos);  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  decPos  =  val.indexOf('.',  expPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  decPos  =  val.indexOf('.',  expPos);	  Integer    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	24	None	replace
52	[BUG]  [BUGGY]  Integer  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;	  Integer    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	24	None	replace
53	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  4;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  4;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  4;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    3;    	non-compiled	[CE]  orphaned  case	3	None	replace
54	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
55	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  3;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  3;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  3;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
56	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')-  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')-  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')-  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
57	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  expPos  +  1);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  expPos  +  1);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  expPos  +  1);	  int    expPos    =    val.indexOf('.',    expPos);    	non-compiled	[CE]  orphaned  case	20	None	replace
58	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  expPos)+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  expPos)+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  expPos)+  1;	  int    expPos    =    val.indexOf('.',    expPos);    	non-compiled	[CE]  orphaned  case	20	None	replace
59	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	27	None	replace
60	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.substring(0,  val.indexOf('E')+  1);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.substring(0,  val.indexOf('E')+  1);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  decPos  =  val.indexOf('.')+  val.substring(0,  val.indexOf('E')+  1);	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	27	None	replace
61	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e');  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e');  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('e');	  int    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	22	None	replace
62	[BUG]  [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;	  expPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
63	[BUG]  [BUGGY]  expPos  =  val.indexOf('.')+  val.substring(decPos)+  1;  [CE]  orphaned  case  [FE]                            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  expPos  =  val.indexOf('.')+  val.substring(decPos)+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.')+  val.substring(decPos)+  1;	  expPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
64	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1  +  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
65	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;	  int    expPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
66	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  1  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')+  1  +  1;	  int    expPos    =    val.indexOf('.',    lastChar)+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	29	None	replace
67	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')+  1  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')+  1  +  1;	  int    expPos    =    val.indexOf('.',    decPos)+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	37	None	replace
68	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  0)  {  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1  &&  expPos  <  0)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1  &&  expPos  <  0)  {	  if(decPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
69	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  val.length())  {  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1  &&  expPos  <  val.length())  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1  &&  expPos  <  val.length())  {	  if(decPos    >    -1    &&    expPos    <    expPos)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
70	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >=  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number. ");  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >=  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number. ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  >=  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number. ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length())    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
71	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	13	None	replace
72	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >=  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >=  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  >=  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	13	None	replace
73	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.substring(0,  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.substring(0,  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.substring(0,  val.indexOf('e')+  val.indexOf('E')+  1;	  int    expPos    =    val.indexOf('.')+    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	19	None	replace
74	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1    +    1;    	non-compiled	[CE]  orphaned  case	28	None	replace
75	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  <  val.length())  {  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  >  -1  &&  expPos  <  val.length())  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >  -1  &&  expPos  <  val.length())  {	  if(expPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
76	[BUG]  [BUGGY]  if(decPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length()    -    1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	17	None	replace
77	[BUG]  [BUGGY]  if(expPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >  -1)  {  bucket  <  0  ||  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length()    -    1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	17	None	replace
78	[BUG]  [BUGGY]  result.add(val.substring(decPos  +  1,  expPos));  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  result.add(val.substring(decPos  +  1,  expPos));  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	result.add(val.substring(decPos  +  1,  expPos));	  result.add(val.substring(decPos,    expPos));    	non-compiled	[CE]  orphaned  case	11	None	replace
79	[BUG]  [BUGGY]  Integer  dec  =  val.substring(decPos  +  2);  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  dec  =  val.substring(decPos  +  2);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  dec  =  val.substring(decPos  +  2);	  Integer    dec    =    val.substring(decPos    +    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
80	[BUG]  [BUGGY]  Integer  dec  =  val.substring(decPos  +  1,  expPos)+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  dec  =  val.substring(decPos  +  1,  expPos)+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  dec  =  val.substring(decPos  +  1,  expPos)+  1;	  Integer    dec    =    val.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  orphaned  case	23	None	replace
81	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	12	None	replace
82	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >=  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  ||  expPos  >=  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  ||  expPos  >=  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	12	None	replace
83	[BUG]  [BUGGY]  bucket  <  =  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  =  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  =  0  ||  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	12	None	replace
84	[BUG]  [BUGGY]  Integer  decPos  =  val.indexOf('.'  +  1);  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  decPos  =  val.indexOf('.'  +  1);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  decPos  =  val.indexOf('.'  +  1);	  Integer    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	24	None	replace
85	[BUG]  [BUGGY]  Integer  decPos  =  val.indexOf('.',  decPos);  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  decPos  =  val.indexOf('.',  decPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  decPos  =  val.indexOf('.',  decPos);	  Integer    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	24	None	replace
86	[BUG]  [BUGGY]  expPos  =  val.indexOf('.')+  1;  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  expPos  =  val.indexOf('.')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.')+  1;	  expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	35	None	replace
87	[BUG]  [BUGGY]  expPos  =  val.indexOf('.'  +  decPos);  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  expPos  =  val.indexOf('.'  +  decPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.'  +  decPos);	  expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	35	None	replace
88	[BUG]  [BUGGY]  int  expPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
89	[BUG]  [BUGGY]  if(decPos  >  0  &&  expPos  <  decPos)  {  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  0  &&  expPos  <  decPos)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  0  &&  expPos  <  decPos)  {	  if(decPos    >    -1    &&    expPos    <    expPos)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
90	[BUG]  [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')/  1;  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  expPos  =  val.indexOf('.')+  val.indexOf('E')/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	expPos  =  val.indexOf('.')+  val.indexOf('E')/  1;	  expPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
91	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')-  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')-  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')-  1;	  int    expPos    =    val.indexOf('.',    lastChar)+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	29	None	replace
92	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')/  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  lastChar)+  val.indexOf('E')/  1;	  int    expPos    =    val.indexOf('.',    lastChar)+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	29	None	replace
93	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e',  decPos);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e',  decPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('e',  decPos);	  int    expPos    =    val.indexOf('.')+    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	26	None	replace
94	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  expPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  expPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >  -1)  {  if(decPos  <  expPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    expPos)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
95	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  decPos);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  decPos);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  decPos);	  int    expPos    =    val.indexOf('.',    expPos);    	non-compiled	[CE]  orphaned  case	20	None	replace
96	[BUG]  [BUGGY]  bucket  <  =  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  =  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  =  0  ||  expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	9	None	replace
97	[BUG]  [BUGGY]  if(expPos  >  0  &&  expPos  <  decPos)  {  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  >  0  &&  expPos  <  decPos)  {  [BUGGY]        if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >  0  &&  expPos  <  decPos)  {	  if(expPos    >    -1    &&    expPos    <    decPos)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
98	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number. ");  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number. ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length()  -  1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number. ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length()    -    1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	17	None	replace
99	[BUG]  [BUGGY]  if(decPos  >  -1)  {  bucket  <  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1)  {  bucket  <  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1)  {  bucket  <  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length()    -    1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	17	None	replace
100	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
101	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number. ");  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number. ");  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number. ");	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length())    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	15	None	replace
102	[BUG]  [BUGGY]  if(expPos  >  -1)  {  bucket  <  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  >  -1)  {  bucket  <  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  >  -1)  {  bucket  <  expPos  >  -1  ||  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length())    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	15	None	replace
103	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')/  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.',  decPos)+  val.indexOf('E')/  1;	  int    expPos    =    val.indexOf('.',    decPos)+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	37	None	replace
104	[BUG]  [BUGGY]  if(decPos  >  -1)  {  bucket  <  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(decPos  >  -1)  {  bucket  <  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(decPos  >  -1)  {  bucket  <  expPos  >  -1  ||  expPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  orphaned  case	12	None	replace
105	[BUG]  [BUGGY]  Integer  dec  =  val.indexOf('.');  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  dec  =  val.indexOf('.');  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  dec  =  val.indexOf('.');	  Integer    dec    =    val.substring(decPos    +    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
106	[BUG]  [BUGGY]  Integer  dec  =  val.indexOf('.',  decPos  +  1);  [CE]  orphaned  case  [FE]                            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  dec  =  val.indexOf('.',  decPos  +  1);  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  dec  =  val.indexOf('.',  decPos  +  1);	  Integer    dec    =    val.substring(decPos    +    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
107	[BUG]  [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	bucket  <  0  ||  expPos  >  -1  &&  expPos  <  val.length())  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    0    ||    expPos    >    -1    ||    expPos    <    val.length())    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
108	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')/  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('E')/  1;	  int    expPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
109	[BUG]  [BUGGY]  result.add(val.substring(decPos,  expPos  -  1));  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  result.add(val.substring(decPos,  expPos  -  1));  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	result.add(val.substring(decPos,  expPos  -  1));	  result.add(val.substring(decPos,    expPos));    	non-compiled	[CE]  orphaned  case	11	None	replace
110	[BUG]  [BUGGY]  Integer  decPos  =  val.indexOf('.')+  1;  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  Integer  decPos  =  val.indexOf('.')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	Integer  decPos  =  val.indexOf('.')+  1;	  Integer    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	24	None	replace
111	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  char  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	char  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;	  char    expPos    =    val.indexOf('.');    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	6	None	replace
112	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;      [BUGGY]  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  }  mant  =  val.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  bucket    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
