bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	15	None	replace
2	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  2;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	15	None	replace
3	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  4  +  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  4  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  4  +  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	15	None	replace
4	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)+  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)+    1;    	non-compiled	[CE]  orphaned  case	8	None	replace
5	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos)/  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos)/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos)/  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)+    1;    	non-compiled	[CE]  orphaned  case	8	None	replace
6	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)+  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)+    1;    	non-compiled	[CE]  orphaned  case	8	None	replace
7	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('-')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-')+  1;	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  orphaned  case	10	None	replace
8	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  lastChar);	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  orphaned  case	10	None	replace
9	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  decPos);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('-',  decPos);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  decPos);	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  orphaned  case	10	None	replace
10	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-'  +  lastChar);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('-'  +  lastChar);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-'  +  lastChar);	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  orphaned  case	10	None	replace
11	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
12	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  3;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  3;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  3;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
13	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
14	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  >  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
15	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
16	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  +  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  decPos  +  1;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
17	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)+  1;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
18	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)+  1;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
19	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.',  lastChar);	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	2	None	replace
20	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  decPos);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('.',  decPos);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.',  decPos);	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	2	None	replace
21	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('.')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.')+  1;	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	2	None	replace
22	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.'  +  lastChar);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('.'  +  lastChar);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.'  +  lastChar);	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	2	None	replace
23	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E');  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E');  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E');	      int    expPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	3	None	replace
24	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  decPos);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e',  decPos);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  decPos);	      int    expPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	3	None	replace
25	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('e')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')+  1;	      int    decPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	5	None	replace
26	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E');  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E');  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E');	      int    decPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	5	None	replace
27	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  1;	      int    expPos    =    val.indexOf('E');    	non-compiled	[CE]  orphaned  case	4	None	replace
28	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E',  decPos);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E',  decPos);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E',  decPos);	      int    expPos    =    val.indexOf('E');    	non-compiled	[CE]  orphaned  case	4	None	replace
29	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E'  +  1);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E'  +  1);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E'  +  1);	      int    expPos    =    val.indexOf('E');    	non-compiled	[CE]  orphaned  case	4	None	replace
30	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;	      int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
31	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	      int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
32	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;	      int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
33	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')+  2;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E')+  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	6	None	replace
34	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	13	None	replace
35	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  >  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	13	None	replace
36	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.indexOf('E')+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.indexOf('E')+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  mant.indexOf('E')+  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
37	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
38	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  decPos  +  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
39	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar);  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.',  lastChar);	      int    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	1	None	replace
40	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('.')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.')+  1;	      int    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	1	None	replace
41	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.'  +  lastChar);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('.'  +  lastChar);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.'  +  lastChar);	      int    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	1	None	replace
42	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  DEC_PREFIX);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('.',  DEC_PREFIX);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.',  DEC_PREFIX);	      int    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	1	None	replace
43	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')-  1;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')-  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E')-  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')-    1;    	non-compiled	[CE]  orphaned  case	11	None	replace
44	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)-  1;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)-  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')-    1;    	non-compiled	[CE]  orphaned  case	11	None	replace
45	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  DEC_PREFIX);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('-',  DEC_PREFIX);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  DEC_PREFIX);	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  orphaned  case	10	None	replace
46	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)/  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)/  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
47	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
48	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  1;	      int    expPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	3	None	replace
49	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('e');  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  char  expPos  =  val.indexOf('e');  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('e');	      int    expPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	3	None	replace
50	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
51	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	13	None	replace
52	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  >  -1)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	13	None	replace
53	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2  *  1;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2  *  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2  *  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	15	None	replace
54	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos)-  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos)-  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)+    1;    	non-compiled	[CE]  orphaned  case	8	None	replace
55	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  1;	      int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
56	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')-  2;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')-  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')-  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	6	None	replace
57	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos)+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos)+  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos)+  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
58	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e'  +  1);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('e'  +  1);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e'  +  1);	      int    decPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	5	None	replace
59	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')-  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.indexOf('e')-  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')-  1;	      int    decPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	5	None	replace
60	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)+  2;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)+  2;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)+  2;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
61	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')-  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')-  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')-  1;	      int    expPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	3	None	replace
62	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
63	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  2  +  1;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  2  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  2  +  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	15	None	replace
64	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  2  +  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  2  +  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  2  +  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	15	None	replace
65	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
66	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
67	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('e');  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  char  decPos  =  val.indexOf('e');  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('e');	      int    decPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	5	None	replace
68	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E'  +  decPos);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('E'  +  decPos);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E'  +  decPos);	      int    expPos    =    val.indexOf('E');    	non-compiled	[CE]  orphaned  case	4	None	replace
69	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
70	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  /  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  /  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  decPos  /  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
71	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.');  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  decPos  =  val.lastIndexOf('.');  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.lastIndexOf('.');	      int    decPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	1	None	replace
72	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)-  1;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)-  1;  [BUGGY]      if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')-    1;    	non-compiled	[CE]  orphaned  case	11	None	replace
73	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(decPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	13	None	replace
74	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');    [BUGGY]  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	      if(decPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	13	None	replace
