bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.'  +  mant);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('.'  +  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.'  +  mant);	  int    expPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	22	None	replace
2	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  lastChar;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('.')+  lastChar;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.')+  lastChar;	  int    expPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	22	None	replace
3	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	65	None	replace
4	[BUG]  [BUGGY]  if(decPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	65	None	replace
5	[BUG]  [BUGGY]  while(decPos  <  decPos)  {  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  while(decPos  <  decPos)  {  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	while(decPos  <  decPos)  {  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	65	None	replace
6	[BUG]  [BUGGY]  if(decPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	65	None	replace
7	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')/  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')/  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')/  1;	  int    expPos    =    val.indexOf('e')-    1;    	non-compiled	[CE]  orphaned  case	61	None	replace
8	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E',  decPos  +  1);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E',  decPos  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E',  decPos  +  1);	  int    expPos    =    val.indexOf('E'    +    1);    	non-compiled	[CE]  orphaned  case	29	None	replace
9	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('E'  +  1);  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('E'  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('E'  +  1);	  int    expPos    =    val.indexOf('E'    +    1);    	non-compiled	[CE]  orphaned  case	29	None	replace
10	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  0)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	50	None	replace
11	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  >  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	50	None	replace
12	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  2;	  int    decPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	31	None	replace
13	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	  int    decPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	31	None	replace
14	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.indexOf('E')/  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.indexOf('E')/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  mant.indexOf('E')/  2;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    2;    	non-compiled	[CE]  orphaned  case	2	None	replace
15	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  2  +  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  2  +  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    2;    	non-compiled	[CE]  orphaned  case	2	None	replace
16	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos  /  2;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos  /  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  decPos  /  2;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    2;    	non-compiled	[CE]  orphaned  case	2	None	replace
17	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  4;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  4;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  4;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2;    	non-compiled	[CE]  orphaned  case	1	None	replace
18	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  if(expPos  >  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
19	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  +  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  +  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  decPos  +  2;	  int    expPos    =    val.indexOf('e')+    decPos    +    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
20	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  DEC_POP  +  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  DEC_POP  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  DEC_POP  +  1;	  int    expPos    =    val.indexOf('e')+    decPos    +    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
21	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  lastChar);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.lastIndexOf('.',  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.lastIndexOf('.',  lastChar);	  int    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	71	None	replace
22	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  DEC_PREFIX);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.lastIndexOf('.',  DEC_PREFIX);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.lastIndexOf('.',  DEC_PREFIX);	  int    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	71	None	replace
23	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E'  +  1);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E'  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E'  +  1);	  int    expPos    =    val.indexOf('e')+    val.indexOf('E');    	non-compiled	[CE]  orphaned  case	23	None	replace
24	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E')+  1;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	33	None	replace
25	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  2;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	33	None	replace
26	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')+  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')+  2;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	33	None	replace
27	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  2;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('e')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')+  2;	  int    decPos    =    val.indexOf('e')+    1;    	non-compiled	[CE]  orphaned  case	25	None	replace
28	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  mant);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-',  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  mant);	  int    decPos    =    val.indexOf('-',    lastChar);    	non-compiled	[CE]  orphaned  case	8	None	replace
29	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar)+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar)+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  lastChar)+  1;	  int    decPos    =    val.indexOf('-',    lastChar);    	non-compiled	[CE]  orphaned  case	8	None	replace
30	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('-',  lastChar);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('-',  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('-',  lastChar);	  int    decPos    =    val.indexOf('-',    lastChar);    	non-compiled	[CE]  orphaned  case	8	None	replace
31	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.indexOf('E')+  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  mant.indexOf('E')+  2;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	37	None	replace
32	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.indexOf('E')/  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.indexOf('E')/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  mant.indexOf('E')/  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
33	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos  /  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos  /  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  decPos  /  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
34	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.charAt(decPos)/  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.charAt(decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.charAt(decPos)/  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
35	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  decPos;	  int    expPos    =    val.indexOf('E'    +    decPos);    	non-compiled	[CE]  orphaned  case	68	None	replace
36	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E'  +  mant);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E'  +  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E'  +  mant);	  int    expPos    =    val.indexOf('E'    +    decPos);    	non-compiled	[CE]  orphaned  case	68	None	replace
37	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E'  +  lastChar);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E'  +  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E'  +  lastChar);	  int    expPos    =    val.indexOf('E'    +    decPos);    	non-compiled	[CE]  orphaned  case	68	None	replace
38	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.substring(0,  decPos)+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.substring(0,  decPos)+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  mant.substring(0,  decPos)+  1;	  int    expPos    =    val.indexOf('E')+    val.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	57	None	replace
39	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos  +  1)+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos  +  1)+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos  +  1)+  1;	  int    expPos    =    val.indexOf('E')+    val.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	57	None	replace
40	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E'  +  1);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E'  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E'  +  1);	  int    decPos    =    val.indexOf('e')+    val.indexOf('E');    	non-compiled	[CE]  orphaned  case	26	None	replace
41	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  lastChar.indexOf('E')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  lastChar.indexOf('E')+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  lastChar.indexOf('E')+  1;	  int    expPos    =    val.indexOf('E')+    mant.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
42	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  0)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	51	None	replace
43	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  >  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	51	None	replace
44	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E',  lastChar);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E',  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E',  lastChar);	  int    expPos    =    val.indexOf('E',    decPos);    	non-compiled	[CE]  orphaned  case	28	None	replace
45	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('E',  decPos);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('E',  decPos);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('E',  decPos);	  int    expPos    =    val.indexOf('E',    decPos);    	non-compiled	[CE]  orphaned  case	28	None	replace
46	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('e'  +  1);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('e'  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('e'  +  1);	  int    decPos    =    val.indexOf('e'    +    1);    	non-compiled	[CE]  orphaned  case	58	None	replace
47	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e',  lastChar  +  1);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('e',  lastChar  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e',  lastChar  +  1);	  int    decPos    =    val.indexOf('e'    +    1);    	non-compiled	[CE]  orphaned  case	58	None	replace
48	[BUG]  [BUGGY]  String  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  String  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	String  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;	  char    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	32	None	replace
49	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  decPos  +  1);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('.',  decPos  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.',  decPos  +  1);	  int    expPos    =    val.indexOf('.',    decPos);    	non-compiled	[CE]  orphaned  case	20	None	replace
50	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('.',  decPos);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('.',  decPos);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('.',  decPos);	  int    expPos    =    val.indexOf('.',    decPos);    	non-compiled	[CE]  orphaned  case	20	None	replace
51	[BUG]  [BUGGY]  int  expPos  =  val.lastIndexOf('.',  decPos);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.lastIndexOf('.',  decPos);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.lastIndexOf('.',  decPos);	  int    expPos    =    val.indexOf('.',    decPos);    	non-compiled	[CE]  orphaned  case	20	None	replace
52	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  2;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('.')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.')+  2;	  int    expPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	21	None	replace
53	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('.')+  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('.')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('.')+  1;	  int    expPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	21	None	replace
54	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  orphaned  case	69	None	replace
55	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E',  decPos)/  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E',  decPos)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E',  decPos)/  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  orphaned  case	69	None	replace
56	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  lastChar)/  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  lastChar)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  lastChar)/  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  orphaned  case	69	None	replace
57	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  3;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  3;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  3;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  orphaned  case	69	None	replace
58	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')-  2;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')-  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E')-  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')-    2;    	non-compiled	[CE]  orphaned  case	56	None	replace
59	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-')+  2;	  int    decPos    =    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
60	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('-')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('-')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('-')+  1;	  int    decPos    =    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
61	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	35	None	replace
62	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  if(expPos  >  0)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	35	None	replace
63	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  2;	  int    expPos    =    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	27	None	replace
64	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('E')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('E')+  1;	  int    expPos    =    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	27	None	replace
65	[BUG]  [BUGGY]  if(decPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	73	None	replace
66	[BUG]  [BUGGY]  if(decPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  0)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	73	None	replace
67	[BUG]  [BUGGY]  if(decPos  <  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	73	None	replace
68	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')-  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')-  1;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')-    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
69	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  decPos  +  1);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e',  decPos  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  decPos  +  1);	  int    expPos    =    val.indexOf('e',    decPos);    	non-compiled	[CE]  orphaned  case	24	None	replace
70	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  lastChar);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e',  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  lastChar);	  int    expPos    =    val.indexOf('e',    decPos);    	non-compiled	[CE]  orphaned  case	24	None	replace
71	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('e',  decPos);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('e',  decPos);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('e',  decPos);	  int    expPos    =    val.indexOf('e',    decPos);    	non-compiled	[CE]  orphaned  case	24	None	replace
72	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  lastChar)/  2  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  lastChar)/  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  lastChar)/  2  +  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    2    +    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
73	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	66	None	replace
74	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  DEC_PREFIX  +  1);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-',  DEC_PREFIX  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  DEC_PREFIX  +  1);	  int    decPos    =    val.indexOf('-',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	45	None	replace
75	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('-',  DEC_PREFIX);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('-',  DEC_PREFIX);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('-',  DEC_PREFIX);	  int    decPos    =    val.indexOf('-',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	45	None	replace
76	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  1);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-',  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  1);	  int    decPos    =    val.indexOf('-',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	45	None	replace
77	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)/  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)/  2;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos    +    1)+    1;    	non-compiled	[CE]  orphaned  case	17	None	replace
78	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)/  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)/  1;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos    +    1)+    1;    	non-compiled	[CE]  orphaned  case	17	None	replace
79	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E',  decPos)-  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E',  decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E',  decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)-    1;    	non-compiled	[CE]  orphaned  case	72	None	replace
80	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  mant);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('.',  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.',  mant);	  int    expPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	19	None	replace
81	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('.',  lastChar);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('.',  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('.',  lastChar);	  int    expPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	19	None	replace
82	[BUG]  [BUGGY]  String  decPos  =  val.indexOf('e');  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  String  decPos  =  val.indexOf('e');  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	String  decPos  =  val.indexOf('e');	  char    decPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	67	None	replace
83	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('e')+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('e')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('e')+  1;	  char    decPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	67	None	replace
84	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-'  +  mant);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-'  +  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-'  +  mant);	  int    decPos    =    val.indexOf('-'    +    lastChar);    	non-compiled	[CE]  orphaned  case	10	None	replace
85	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  lastChar;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-')+  lastChar;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-')+  lastChar;	  int    decPos    =    val.indexOf('-'    +    lastChar);    	non-compiled	[CE]  orphaned  case	10	None	replace
86	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos  +  2;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  decPos  +  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  decPos  +  2;	  int    expPos    =    val.indexOf('E')+    decPos    +    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
87	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  DEC_POP  +  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  DEC_POP  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  DEC_POP  +  1;	  int    expPos    =    val.indexOf('E')+    decPos    +    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
88	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.'  +  mant);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.'  +  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.'  +  mant);	  int    decPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	41	None	replace
89	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  lastChar;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.')+  lastChar;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.')+  lastChar;	  int    decPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	41	None	replace
90	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)/  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)/  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)/    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
91	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos)/  2;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos)/  2;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)/    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
92	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)/  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)/  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)/    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
93	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  2)/  1;  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  2)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  2)/  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)/    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
94	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)-  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)-  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)-    1;    	non-compiled	[CE]  orphaned  case	54	None	replace
95	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)-  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)-    1;    	non-compiled	[CE]  orphaned  case	54	None	replace
96	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('e')+  val.charAt(decPos)-  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('e')+  val.charAt(decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('e')+  val.charAt(decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)-    1;    	non-compiled	[CE]  orphaned  case	54	None	replace
97	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  -  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  -  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  decPos  -  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)-    1;    	non-compiled	[CE]  orphaned  case	54	None	replace
98	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  /  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  /  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  decPos  /  2;	  int    expPos    =    val.indexOf('e')+    decPos    /    1;    	non-compiled	[CE]  orphaned  case	70	None	replace
99	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  DEC_POPS  /  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  DEC_POPS  /  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  DEC_POPS  /  1;	  int    expPos    =    val.indexOf('e')+    decPos    /    1;    	non-compiled	[CE]  orphaned  case	70	None	replace
100	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  mant);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.',  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.',  mant);	  int    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	39	None	replace
101	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar)+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar)+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.',  lastChar)+  1;	  int    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	39	None	replace
102	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.',  lastChar);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('.',  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('.',  lastChar);	  int    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	39	None	replace
103	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos  +  1)+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos  +  1)+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos  +  1)+  1;	  int    expPos    =    val.indexOf('e')+    mant.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	18	None	replace
104	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)+  2;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)+  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)+  2;	  int    expPos    =    val.indexOf('e')+    mant.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	18	None	replace
105	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  -1)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    val.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
106	[BUG]  [BUGGY]  ||  expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  ||  expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	||  expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    val.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
107	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')/  2  +  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')/  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')/  2  +  1;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	63	None	replace
108	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  +  2  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  +  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  decPos  +  2  +  1;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	63	None	replace
109	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')/  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('e')/  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')/  1;	  int    decPos    =    val.indexOf('e')-    1;    	non-compiled	[CE]  orphaned  case	59	None	replace
110	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  3  +  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  3  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  3  +  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    4    +    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
111	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  0)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  0)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
112	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  2;	  int    expPos    =    val.indexOf('e')+    val.charAt(val.length()    -    1)/    1;    	non-compiled	[CE]  orphaned  case	47	None	replace
113	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  3;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  3;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  3;	  int    expPos    =    val.indexOf('e')+    val.charAt(val.length()    -    1)/    1;    	non-compiled	[CE]  orphaned  case	47	None	replace
114	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  4;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  4;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(val.length()  -  1)/  4;	  int    expPos    =    val.indexOf('e')+    val.charAt(val.length()    -    1)/    1;    	non-compiled	[CE]  orphaned  case	47	None	replace
115	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)/  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)/  2;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)/    1;    	non-compiled	[CE]  orphaned  case	46	None	replace
116	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)/  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)/  1;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)/    1;    	non-compiled	[CE]  orphaned  case	46	None	replace
117	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  decPos  +  1);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-',  decPos  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  decPos  +  1);	  int    decPos    =    val.indexOf('-',    decPos);    	non-compiled	[CE]  orphaned  case	9	None	replace
118	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('-',  decPos);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('-',  decPos);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('-',  decPos);	  int    decPos    =    val.indexOf('-',    decPos);    	non-compiled	[CE]  orphaned  case	9	None	replace
119	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('-',  decPos);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.lastIndexOf('-',  decPos);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.lastIndexOf('-',  decPos);	  int    decPos    =    val.indexOf('-',    decPos);    	non-compiled	[CE]  orphaned  case	9	None	replace
120	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2  +  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2  +  1;	  int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1    +    1;    	non-compiled	[CE]  orphaned  case	55	None	replace
121	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')/  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  lastChar.indexOf('E')/  1;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	11	None	replace
122	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  DEC_PREFIX  +  1);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.',  DEC_PREFIX  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.',  DEC_PREFIX  +  1);	  int    decPos    =    val.indexOf('.',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	42	None	replace
123	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.',  DEC_PREFIX);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('.',  DEC_PREFIX);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('.',  DEC_PREFIX);	  int    decPos    =    val.indexOf('.',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	42	None	replace
124	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)/  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)/  2;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos    +    1)+    1;    	non-compiled	[CE]  orphaned  case	4	None	replace
125	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('e')+  val.charAt(decPos  +  1)+  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos    +    1)+    1;    	non-compiled	[CE]  orphaned  case	4	None	replace
126	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)-  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)-  1;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)-    1;    	non-compiled	[CE]  orphaned  case	44	None	replace
127	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)-  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.substring(0,  decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)-    1;    	non-compiled	[CE]  orphaned  case	44	None	replace
128	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.charAt(decPos)+  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.charAt(decPos)+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  lastChar.charAt(decPos)+  1;	  int    expPos    =    val.indexOf('e')+    mant.charAt(decPos)+    1;    	non-compiled	[CE]  orphaned  case	6	None	replace
129	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos  +  1)+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos  +  1)+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.charAt(decPos  +  1)+  1;	  int    expPos    =    val.indexOf('e')+    mant.charAt(decPos)+    1;    	non-compiled	[CE]  orphaned  case	6	None	replace
130	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.')+  2;	  int    decPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	40	None	replace
131	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('.')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('.')+  1;	  int    decPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	40	None	replace
132	[BUG]  [BUGGY]  String  expPos  =  val.indexOf('e');  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  String  expPos  =  val.indexOf('e');  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	String  expPos  =  val.indexOf('e');	  char    expPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	49	None	replace
133	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('e')+  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  expPos  =  val.indexOf('e')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  expPos  =  val.indexOf('e')+  1;	  char    expPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	49	None	replace
134	[BUG]  [BUGGY]  if(decPos  <  exp)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  exp)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  exp)  {  throw  new  NumberFormatException( " ");  }	  if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	74	None	replace
135	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)+  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)+  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos  +  1)+  2;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)+    2;    	non-compiled	[CE]  orphaned  case	60	None	replace
136	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2  *  4;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2  *  4;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  2  *  4;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    *    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
137	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  4  *  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  4  *  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')/  4  *  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    *    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
138	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  3;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  3;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  3;	  int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	30	None	replace
139	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  2  +  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  2  +  1;	  int    expPos    =    val.indexOf('E')+    decPos    +    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
140	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  DEC_POP);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-',  DEC_POP);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  DEC_POP);	  int    decPos    =    val.indexOf('-',    decPos);    	non-compiled	[CE]  orphaned  case	9	None	replace
141	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  -  1)/  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  -  1)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos  -  1)/  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)/    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
142	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant  /  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant  /  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant  /  1;	  int    expPos    =    val.indexOf('e')+    decPos    /    1;    	non-compiled	[CE]  orphaned  case	70	None	replace
143	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  DEC_POP)/  2  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  DEC_POP)/  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  DEC_POP)/  2  +  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    2    +    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
144	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('e',  decPos);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('e',  decPos);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('e',  decPos);	  char    decPos    =    val.indexOf('e');    	non-compiled	[CE]  orphaned  case	67	None	replace
145	[BUG]  [BUGGY]  Integer  decPos  =  val.indexOf('.');  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  Integer  decPos  =  val.indexOf('.');  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	Integer  decPos  =  val.indexOf('.');	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	73	None	replace
146	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)-  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)-  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)-  2;	  int    expPos    =    val.indexOf('e')+    val.substring(0,    decPos)+    2;    	non-compiled	[CE]  orphaned  case	60	None	replace
147	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)/  2  +  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)/  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)/  2  +  1;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	63	None	replace
148	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  16);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-',  16);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  16);	  int    decPos    =    val.indexOf('-',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	45	None	replace
149	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos)+  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos)+  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos)+  2;	  int    expPos    =    val.indexOf('E')+    val.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	57	None	replace
150	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.charAt(val.length()  -  1)/  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.charAt(val.length()  -  1)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.charAt(val.length()  -  1)/  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
151	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos)/  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.substring(0,  decPos)/  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
152	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)/  3;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)/  3;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(0,  decPos)/  3;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    3;    	non-compiled	[CE]  orphaned  case	12	None	replace
153	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)+  2;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)+  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.charAt(decPos)+  2;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	33	None	replace
154	[BUG]  [BUGGY]  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(expPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	66	None	replace
155	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1  +  1;	  int    decPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	31	None	replace
156	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  2  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  2  +  1;	  int    expPos    =    val.indexOf('e')+    decPos    +    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
157	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  1  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-')+  1  +  1;	  int    decPos    =    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
158	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;	  char    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	32	None	replace
159	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(decPos,  decPos)-  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(decPos,  decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(decPos,  decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)-    1;    	non-compiled	[CE]  orphaned  case	72	None	replace
160	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  DEC_POP)-  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  DEC_POP)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  DEC_POP)-  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)-    1;    	non-compiled	[CE]  orphaned  case	72	None	replace
161	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  -  1)-  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.charAt(decPos  -  1)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.charAt(decPos  -  1)-  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)-    1;    	non-compiled	[CE]  orphaned  case	54	None	replace
162	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(decPos)-  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.substring(decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.substring(decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)-    1;    	non-compiled	[CE]  orphaned  case	54	None	replace
163	[BUG]  [BUGGY]  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	65	None	replace
164	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E',  DEC_POP);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E',  DEC_POP);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E',  DEC_POP);	  int    expPos    =    val.indexOf('E',    decPos);    	non-compiled	[CE]  orphaned  case	28	None	replace
165	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E',  decPos)+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E',  decPos)+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E',  decPos)+  1;	  int    expPos    =    val.indexOf('E',    decPos);    	non-compiled	[CE]  orphaned  case	28	None	replace
166	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  DEC_POP)/  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  DEC_POP)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  DEC_POP)/  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  orphaned  case	69	None	replace
167	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)/  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  decPos)/  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  orphaned  case	69	None	replace
168	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  2;	  int    expPos    =    val.indexOf('e')+    1;    	non-compiled	[CE]  orphaned  case	48	None	replace
169	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  decPos);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.',  decPos);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.',  decPos);	  int    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	39	None	replace
170	[BUG]  [BUGGY]  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	74	None	replace
171	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  4;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  4;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')/  4;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    2;    	non-compiled	[CE]  orphaned  case	2	None	replace
172	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  firstChar);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.',  firstChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.',  firstChar);	  int    decPos    =    val.indexOf('.',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	42	None	replace
173	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  decPos)+  1;	  int    expPos    =    val.indexOf('e',    decPos);    	non-compiled	[CE]  orphaned  case	24	None	replace
174	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  1  +  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('e')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('e')+  1  +  1;	  int    decPos    =    val.indexOf('e')+    1;    	non-compiled	[CE]  orphaned  case	25	None	replace
175	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  1  +  1;	  int    expPos    =    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	27	None	replace
176	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  1  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.')+  1  +  1;	  int    decPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	40	None	replace
177	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.charAt(decPos)+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  mant.charAt(decPos)+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  mant.charAt(decPos)+  1;	  int    expPos    =    val.indexOf('E')+    mant.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
178	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  1  +  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('.')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.')+  1  +  1;	  int    expPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	21	None	replace
179	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  decPos)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
180	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(val.length()  -  1)/  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.charAt(val.length()  -  1)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.charAt(val.length()  -  1)/  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(val.length()    -    1)/    1;    	non-compiled	[CE]  orphaned  case	47	None	replace
181	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.lastIndexOf('.')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.lastIndexOf('.')+  1;	  int    decPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	40	None	replace
182	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.');  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.');  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('.');	  int    decPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	41	None	replace
183	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val.substring(decPos  +  1,  expPos));  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  decPos)  {  throw  new  NumberFormatException(val.substring(decPos  +  1,  expPos));  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  decPos)  {  throw  new  NumberFormatException(val.substring(decPos  +  1,  expPos));  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	65	None	replace
184	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E',  decPos)/  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E',  decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E',  decPos)/  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  orphaned  case	69	None	replace
185	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')/  val.indexOf('E',  decPos)/  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')/  val.indexOf('E',  decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')/  val.indexOf('E',  decPos)/  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  orphaned  case	69	None	replace
186	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')/  decPos  +  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')/  decPos  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')/  decPos  +  1;	  int    expPos    =    val.indexOf('E')+    decPos    +    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
187	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)+  val.charAt(decPos)-  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)+  val.charAt(decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  decPos)+  val.charAt(decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos)-    1;    	non-compiled	[CE]  orphaned  case	54	None	replace
188	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
189	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	34	None	replace
190	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-');  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-');  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-')+  val.indexOf('-');	  int    decPos    =    val.indexOf('-'    +    lastChar);    	non-compiled	[CE]  orphaned  case	10	None	replace
191	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('_');  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('_');  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-')+  val.indexOf('_');	  int    decPos    =    val.indexOf('-'    +    lastChar);    	non-compiled	[CE]  orphaned  case	10	None	replace
192	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  decPos  +  lastChar);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('.',  decPos  +  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('.',  decPos  +  lastChar);	  int    expPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	22	None	replace
193	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  decPos)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	35	None	replace
194	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  >=  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  if(expPos  >=  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  >  -1)  {  if(expPos  >=  0)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	35	None	replace
195	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')/  decPos  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')/  decPos  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')/  decPos  +  1;	  int    expPos    =    val.indexOf('e')+    decPos    +    1;    	non-compiled	[CE]  orphaned  case	16	None	replace
196	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)+  val.charAt(decPos  +  1)+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)+  val.charAt(decPos  +  1)+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  decPos)+  val.charAt(decPos  +  1)+  1;	  int    expPos    =    val.indexOf('e')+    val.charAt(decPos    +    1)+    1;    	non-compiled	[CE]  orphaned  case	4	None	replace
197	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  decPos)+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.indexOf('-',  decPos)+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.indexOf('-',  decPos)+  1;	  int    decPos    =    val.indexOf('-',    decPos);    	non-compiled	[CE]  orphaned  case	9	None	replace
198	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	50	None	replace
199	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.substring(0,  decPos)+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  lastChar.substring(0,  decPos)+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  lastChar.substring(0,  decPos)+  1;	  int    expPos    =    val.indexOf('e')+    mant.substring(0,    decPos)+    1;    	non-compiled	[CE]  orphaned  case	18	None	replace
200	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	51	None	replace
201	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(expPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	51	None	replace
202	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)+  val.indexOf('E',  decPos)-  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)+  val.indexOf('E',  decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  decPos)+  val.indexOf('E',  decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)-    1;    	non-compiled	[CE]  orphaned  case	72	None	replace
203	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)-  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  decPos)-  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)-    1;    	non-compiled	[CE]  orphaned  case	72	None	replace
204	[BUG]  [BUGGY]  int  expPos  =  val.lastIndexOf('.',  lastChar);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.lastIndexOf('.',  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.lastIndexOf('.',  lastChar);	  int    expPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	19	None	replace
205	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)-  2;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)-  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)-  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')-    2;    	non-compiled	[CE]  orphaned  case	56	None	replace
206	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('e'  +  1);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  decPos  =  val.lastIndexOf('e'  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  decPos  =  val.lastIndexOf('e'  +  1);	  int    decPos    =    val.indexOf('e'    +    1);    	non-compiled	[CE]  orphaned  case	58	None	replace
207	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(decPos  <  decPos)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    val.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
208	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  >  -1)  {  if(expPos  <  val.length())  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    val.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	52	None	replace
209	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  +  1  +  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  +  1  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  decPos  +  1  +  1;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')/    2    +    1;    	non-compiled	[CE]  orphaned  case	63	None	replace
210	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  3;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  3;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  3;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    3;    	non-compiled	[CE]  orphaned  case	12	None	replace
211	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  2  *  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  2  *  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  mant.indexOf('E')/  2  *  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    *    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
212	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  /  2  *  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos  /  2  *  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  decPos  /  2  *  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')/    2    *    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
213	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  decPos;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  decPos;	  int    expPos    =    val.indexOf('e')+    mant.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	33	None	replace
214	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	if(expPos  >  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(val  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(val    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
215	[BUG]  [BUGGY]  int  expPos  =  val.lastIndexOf('.')+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.lastIndexOf('.')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.lastIndexOf('.')+  1;	  int    expPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	21	None	replace
216	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)/  2  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e',  decPos)/  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e',  decPos)/  2  +  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    2    +    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
217	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  2  *  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  2  *  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E',  decPos)/  2  *  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E',    decPos)/    2    +    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
218	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E',  decPos)/  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E',  decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E',  decPos)/  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')/    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
219	[BUG]  [BUGGY]  while(decPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');      [BUGGY]  while(decPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  dec  =  val.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	while(decPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  orphaned  case	73	None	replace
