bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (val == null) { [FE] StringIndexOutOfBoundsException [CONTEXT] public static Number createNumber(String val) throws NumberFormatException { [BUGGY] if (val == null) { [BUGGY] return null; } if (val.length() == 0) { throw new NumberFormatException("\"\" is not a valid number."); } if (val.startsWith("--")) {     [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	139	139	1	replace	
2	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] public static Number createNumber(String val) throws NumberFormatException { [BUGGY] [BUGGY] if (val == null) { return null; } if (val.length() == 0) { throw new NumberFormatException("\"\" is not a valid number."); } if (val.startsWith("--")) {     [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	139	139	1	add	
3	[BUG] [BUGGY] if (val.length() == 0) { [FE] StringIndexOutOfBoundsException [CONTEXT] public static Number createNumber(String val) throws NumberFormatException { if (val == null) { return null; } [BUGGY] if (val.length() == 0) { [BUGGY] throw new NumberFormatException("\"\" is not a valid number."); } if (val.startsWith("--")) {     return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	142	142	1	replace	
4	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] public static Number createNumber(String val) throws NumberFormatException { if (val == null) { return null; } [BUGGY] [BUGGY] if (val.length() == 0) { throw new NumberFormatException("\"\" is not a valid number."); } if (val.startsWith("--")) {     return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	142	142	1	add	
5	[BUG] [BUGGY] if (val.startsWith("--")) { [FE] StringIndexOutOfBoundsException [CONTEXT] public static Number createNumber(String val) throws NumberFormatException { if (val == null) { return null; } if (val.length() == 0) { throw new NumberFormatException("\"\" is not a valid number."); } [BUGGY] if (val.startsWith("--")) { [BUGGY]     return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	145	145	1	replace	
6	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] public static Number createNumber(String val) throws NumberFormatException { if (val == null) { return null; } if (val.length() == 0) { throw new NumberFormatException("\"\" is not a valid number."); } [BUGGY] [BUGGY] if (val.startsWith("--")) {     return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	145	145	1	add	
7	[BUG] [BUGGY] if (val.startsWith("0x") || val.startsWith("-0x")) { [FE] StringIndexOutOfBoundsException [CONTEXT] if (val.length() == 0) { throw new NumberFormatException("\"\" is not a valid number."); } if (val.startsWith("--")) {     return null; } [BUGGY] if (val.startsWith("0x") || val.startsWith("-0x")) { [BUGGY] return createInteger(val); } char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; int decPos = val.indexOf('.'); int expPos = val.indexOf('e') + val.indexOf('E') + 1; if (decPos > -1) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	152	152	1	replace	
8	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] if (val.length() == 0) { throw new NumberFormatException("\"\" is not a valid number."); } if (val.startsWith("--")) {     return null; } [BUGGY] [BUGGY] if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; int decPos = val.indexOf('.'); int expPos = val.indexOf('e') + val.indexOf('E') + 1; if (decPos > -1) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	152	152	1	add	
9	[BUG] [BUGGY] char lastChar = val.charAt(val.length() - 1); [FE] StringIndexOutOfBoundsException [CONTEXT] if (val.startsWith("--")) {     return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } [BUGGY] char lastChar = val.charAt(val.length() - 1); [BUGGY] String mant; String dec; String exp; int decPos = val.indexOf('.'); int expPos = val.indexOf('e') + val.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	
10	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] if (val.startsWith("--")) {     return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } [BUGGY] [BUGGY] char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; int decPos = val.indexOf('.'); int expPos = val.indexOf('e') + val.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	add	
11	[BUG] [BUGGY] int decPos = val.indexOf('.'); [FE] StringIndexOutOfBoundsException [CONTEXT]  return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; [BUGGY] int decPos = val.indexOf('.'); [BUGGY] int expPos = val.indexOf('e') + val.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(val + " is not a valid number."); } dec = val.substring(decPos + 1, expPos); } else { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	
12	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT]  return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; [BUGGY] [BUGGY] int decPos = val.indexOf('.'); int expPos = val.indexOf('e') + val.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(val + " is not a valid number."); } dec = val.substring(decPos + 1, expPos); } else { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	add	
13	[BUG] [BUGGY] int expPos = val.indexOf('e') + val.indexOf('E') + 1; [FE] StringIndexOutOfBoundsException [CONTEXT] return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; int decPos = val.indexOf('.'); [BUGGY] int expPos = val.indexOf('e') + val.indexOf('E') + 1; [BUGGY]  if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(val + " is not a valid number."); } dec = val.substring(decPos + 1, expPos); } else { dec = val.substring(decPos + 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	replace	
14	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] return null; } if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; int decPos = val.indexOf('.'); [BUGGY] [BUGGY] int expPos = val.indexOf('e') + val.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(val + " is not a valid number."); } dec = val.substring(decPos + 1, expPos); } else { dec = val.substring(decPos + 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	160	160	1	add	
15	[BUG] [BUGGY] if (decPos > -1) { [FE] StringIndexOutOfBoundsException [CONTEXT] if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; int decPos = val.indexOf('.'); int expPos = val.indexOf('e') + val.indexOf('E') + 1; [BUGGY] if (decPos > -1) { [BUGGY]  if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(val + " is not a valid number."); } dec = val.substring(decPos + 1, expPos); } else { dec = val.substring(decPos + 1); } mant = val.substring(0, decPos); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	replace	
16	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] if (val.startsWith("0x") || val.startsWith("-0x")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; int decPos = val.indexOf('.'); int expPos = val.indexOf('e') + val.indexOf('E') + 1; [BUGGY] [BUGGY] if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(val + " is not a valid number."); } dec = val.substring(decPos + 1, expPos); } else { dec = val.substring(decPos + 1); } mant = val.substring(0, decPos); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	162	162	1	add	
17	[BUG] [BUGGY] if (expPos > -1) { [FE] StringIndexOutOfBoundsException [CONTEXT] if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(val + " is not a valid number."); } dec = val.substring(decPos + 1, expPos); } else { dec = val.substring(decPos + 1); } mant = val.substring(0, decPos); } else { [BUGGY] if (expPos > -1) { [BUGGY] mant = val.substring(0, expPos); } else { mant = val; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	174	174	1	replace	
18	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(val + " is not a valid number."); } dec = val.substring(decPos + 1, expPos); } else { dec = val.substring(decPos + 1); } mant = val.substring(0, decPos); } else { [BUGGY] [BUGGY] if (expPos > -1) { mant = val.substring(0, expPos); } else { mant = val; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	174	174	1	add	
19	[BUG] [BUGGY] mant = val; [FE] StringIndexOutOfBoundsException [CONTEXT] } dec = val.substring(decPos + 1, expPos); } else { dec = val.substring(decPos + 1); } mant = val.substring(0, decPos); } else { if (expPos > -1) { mant = val.substring(0, expPos); } else { [BUGGY] mant = val; [BUGGY] } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	177	177	1	replace	
20	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] } dec = val.substring(decPos + 1, expPos); } else { dec = val.substring(decPos + 1); } mant = val.substring(0, decPos); } else { if (expPos > -1) { mant = val.substring(0, expPos); } else { [BUGGY] [BUGGY] mant = val; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	177	177	1	add	
21	[BUG] [BUGGY] dec = null; [FE] StringIndexOutOfBoundsException [CONTEXT] } else { dec = val.substring(decPos + 1); } mant = val.substring(0, decPos); } else { if (expPos > -1) { mant = val.substring(0, expPos); } else { mant = val; } [BUGGY] dec = null; [BUGGY] } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	179	179	1	replace	
22	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] } else { dec = val.substring(decPos + 1); } mant = val.substring(0, decPos); } else { if (expPos > -1) { mant = val.substring(0, expPos); } else { mant = val; } [BUGGY] [BUGGY] dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	179	179	1	add	
23	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] } mant = val.substring(0, decPos); } else { if (expPos > -1) { mant = val.substring(0, expPos); } else { mant = val; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	181	181	1	replace	
24	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] } mant = val.substring(0, decPos); } else { if (expPos > -1) { mant = val.substring(0, expPos); } else { mant = val; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	181	181	1	add	
25	[BUG] [BUGGY] if (expPos > -1 && expPos < val.length() - 1) { [FE] StringIndexOutOfBoundsException [CONTEXT] mant = val.substring(0, decPos); } else { if (expPos > -1) { mant = val.substring(0, expPos); } else { mant = val; } dec = null; } if (!Character.isDigit(lastChar)) { [BUGGY] if (expPos > -1 && expPos < val.length() - 1) { [BUGGY] exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  String numeric = val.substring(0, val.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	182	182	1	replace	
26	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] mant = val.substring(0, decPos); } else { if (expPos > -1) { mant = val.substring(0, expPos); } else { mant = val; } dec = null; } if (!Character.isDigit(lastChar)) { [BUGGY] [BUGGY] if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  String numeric = val.substring(0, val.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	182	182	1	add	
27	[BUG] [BUGGY] exp = null; [FE] StringIndexOutOfBoundsException [CONTEXT] if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { [BUGGY] exp = null; [BUGGY] } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	185	185	1	replace	
28	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { [BUGGY] [BUGGY] exp = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	185	185	1	add	
29	[BUG] [BUGGY] String numeric = val.substring(0, val.length() - 1); [FE] StringIndexOutOfBoundsException [CONTEXT] } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  [BUGGY] String numeric = val.substring(0, val.length() - 1); [BUGGY] boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	188	188	1	replace	
30	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  [BUGGY] [BUGGY] String numeric = val.substring(0, val.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	188	188	1	add	
31	[BUG] [BUGGY] boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [FE] StringIndexOutOfBoundsException [CONTEXT] dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  String numeric = val.substring(0, val.length() - 1); [BUGGY] boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [BUGGY] switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	189	189	1	replace	
32	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  String numeric = val.substring(0, val.length() - 1); [BUGGY] [BUGGY] boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	189	189	1	add	
33	[BUG] [BUGGY] switch (lastChar) { [FE] StringIndexOutOfBoundsException [CONTEXT] } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  String numeric = val.substring(0, val.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [BUGGY] switch (lastChar) { [BUGGY] case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	190	190	1	replace	
34	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  String numeric = val.substring(0, val.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [BUGGY] [BUGGY] switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	190	190	1	add	
35	[BUG] [BUGGY] if (dec == null  && exp == null   && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { [FE] StringIndexOutOfBoundsException [CONTEXT] exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  String numeric = val.substring(0, val.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : [BUGGY] if (dec == null      && exp == null            && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { [BUGGY] && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } return createBigInteger(numeric); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	193	195	1	replace	
36	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null; }  String numeric = val.substring(0, val.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : [BUGGY] [BUGGY] if (dec == null      && exp == null            && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } return createBigInteger(numeric); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String val [VARIABLES] Float f boolean allZeros char lastChar NumberFormatException e nfe String dec exp mant numeric val Double d int decPos expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	193	195	1	add	
37	[BUG] [BUGGY] if (s == null) { [FE] StringIndexOutOfBoundsException [CONTEXT] private static boolean isAllZeros(String s) { [BUGGY] if (s == null) { [BUGGY] return true; } for (int i = s.length() - 1; i >= 0; i--) { if (s.charAt(i) != '0') { return false; } } return s.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String s [VARIABLES] boolean String s int i  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	297	297	1	replace	
38	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] private static boolean isAllZeros(String s) { [BUGGY] [BUGGY] if (s == null) { return true; } for (int i = s.length() - 1; i >= 0; i--) { if (s.charAt(i) != '0') { return false; } } return s.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String s [VARIABLES] boolean String s int i  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	297	297	1	add	
39	[BUG] [BUGGY] for (int i = s.length() - 1; i >= 0; i--) { [FE] StringIndexOutOfBoundsException [CONTEXT] private static boolean isAllZeros(String s) { if (s == null) { return true; } [BUGGY] for (int i = s.length() - 1; i >= 0; i--) { [BUGGY] if (s.charAt(i) != '0') { return false; } } return s.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String s [VARIABLES] boolean String s int i  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	300	300	1	replace	
40	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] private static boolean isAllZeros(String s) { if (s == null) { return true; } [BUGGY] [BUGGY] for (int i = s.length() - 1; i >= 0; i--) { if (s.charAt(i) != '0') { return false; } } return s.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String s [VARIABLES] boolean String s int i  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	300	300	1	add	
41	[BUG] [BUGGY] if (s.charAt(i) != '0') { [FE] StringIndexOutOfBoundsException [CONTEXT] private static boolean isAllZeros(String s) { if (s == null) { return true; } for (int i = s.length() - 1; i >= 0; i--) { [BUGGY] if (s.charAt(i) != '0') { [BUGGY] return false; } } return s.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String s [VARIABLES] boolean String s int i  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	301	301	1	replace	
42	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] private static boolean isAllZeros(String s) { if (s == null) { return true; } for (int i = s.length() - 1; i >= 0; i--) { [BUGGY] [BUGGY] if (s.charAt(i) != '0') { return false; } } return s.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String s [VARIABLES] boolean String s int i  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	301	301	1	add	
43	[BUG] [BUGGY] return false; [FE] StringIndexOutOfBoundsException [CONTEXT] private static boolean isAllZeros(String s) { if (s == null) { return true; } for (int i = s.length() - 1; i >= 0; i--) { if (s.charAt(i) != '0') { [BUGGY] return false; [BUGGY] } } return s.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String s [VARIABLES] boolean String s int i  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	302	302	1	replace	
44	[BUG] [BUGGY] [FE] StringIndexOutOfBoundsException [CONTEXT] private static boolean isAllZeros(String s) { if (s == null) { return true; } for (int i = s.length() - 1; i >= 0; i--) { if (s.charAt(i) != '0') { [BUGGY] [BUGGY] return false; } } return s.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String s [VARIABLES] boolean String s int i  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	302	302	1	add	
