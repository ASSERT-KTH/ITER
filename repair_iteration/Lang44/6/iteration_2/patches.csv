bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.')+  2;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('.')+  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	47	None	replace
2	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('.')+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('.')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.')+  val.indexOf('.')+  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	47	None	replace
3	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;	  int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
4	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.')+  2;	  int    decPos    =    val.indexOf('.')+    2;    	non-compiled	[CE]  orphaned  case	33	None	replace
5	[BUG]  [BUGGY]  String  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  String  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	String  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;	  char    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	28	None	replace
6	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;	  char    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	28	None	replace
7	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  DEC_PREFIX);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.',  DEC_PREFIX);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  DEC_PREFIX);	  int    decPos    =    val.lastIndexOf('.',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	19	None	replace
8	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  DEC_PREFIX  +  1);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.lastIndexOf('.',  DEC_PREFIX  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.',  DEC_PREFIX  +  1);	  int    decPos    =    val.lastIndexOf('.',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	19	None	replace
9	[BUG]  [BUGGY]  char  decPos  =  val.lastIndexOf('.',  DEC_PREFIX);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.lastIndexOf('.',  DEC_PREFIX);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.lastIndexOf('.',  DEC_PREFIX);	  int    decPos    =    val.lastIndexOf('.',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	19	None	replace
10	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('+')+  val.indexOf('-')+  2;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('+')+  val.indexOf('-')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('+')+  val.indexOf('-')+  2;	  int    decPos    =    val.indexOf('+')+    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	37	None	replace
11	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('+')+  val.indexOf('-')+  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('+')+  val.indexOf('-')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('+')+  val.indexOf('-')+  1;	  int    decPos    =    val.indexOf('+')+    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	37	None	replace
12	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  2;	  int    decPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	15	None	replace
13	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	  int    decPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	15	None	replace
14	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-')+  2;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  val.indexOf('-')+  2;	  int    decPos    =    val.indexOf('-')+    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
15	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('-')+  val.indexOf('-')+  1;  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('-')+  val.indexOf('-')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('-')+  val.indexOf('-')+  1;	  int    decPos    =    val.indexOf('-')+    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
16	[BUG]  [BUGGY]  String  decPos  =  val.indexOf('-');  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  String  decPos  =  val.indexOf('-');  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	String  decPos  =  val.indexOf('-');	  char    decPos    =    val.indexOf('-');    	non-compiled	[CE]  orphaned  case	5	None	replace
17	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('-')+  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('-')+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('-')+  1;	  char    decPos    =    val.indexOf('-');    	non-compiled	[CE]  orphaned  case	5	None	replace
18	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  +  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  +  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  +	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException    	non-compiled	[CE]  orphaned  case	6	None	replace
19	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2  +  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2  +  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2  +  1;	  int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1    +    1;    	non-compiled	[CE]  orphaned  case	43	None	replace
20	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.',  dec);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.',  dec);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.',  dec);	  int    decPos    =    val.indexOf('.',    dec);    	non-compiled	[CE]  orphaned  case	49	None	replace
21	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  DEC);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.',  DEC);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  DEC);	  int    decPos    =    val.indexOf('.',    dec);    	non-compiled	[CE]  orphaned  case	49	None	replace
22	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  mant);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-',  mant);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-',  mant);	  int    decPos    =    val.indexOf('-',    lastChar);    	non-compiled	[CE]  orphaned  case	50	None	replace
23	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar)+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar)+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-',  lastChar)+  1;	  int    decPos    =    val.indexOf('-',    lastChar);    	non-compiled	[CE]  orphaned  case	50	None	replace
24	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('-',  lastChar);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('-',  lastChar);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('-',  lastChar);	  int    decPos    =    val.indexOf('-',    lastChar);    	non-compiled	[CE]  orphaned  case	50	None	replace
25	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  lastChar;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-')+  lastChar;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  lastChar;	  int    decPos    =    val.indexOf('-'    +    lastChar);    	non-compiled	[CE]  orphaned  case	4	None	replace
26	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-'  +  mant);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-'  +  mant);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-'  +  mant);	  int    decPos    =    val.indexOf('-'    +    lastChar);    	non-compiled	[CE]  orphaned  case	4	None	replace
27	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-'  +  lastChar)+  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-'  +  lastChar)+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-'  +  lastChar)+  1;	  int    decPos    =    val.indexOf('-'    +    lastChar);    	non-compiled	[CE]  orphaned  case	4	None	replace
28	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.',  mant);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.',  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.',  mant);	  int    decPos    =    val.indexOf('.',    mant);    	non-compiled	[CE]  orphaned  case	30	None	replace
29	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  mant);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.lastIndexOf('.',  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.',  mant);	  int    decPos    =    val.indexOf('.',    mant);    	non-compiled	[CE]  orphaned  case	30	None	replace
30	[BUG]  [BUGGY]  int  decPos  =  val.lastChar.indexOf('.',  mant);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.lastChar.indexOf('.',  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastChar.indexOf('.',  mant);	  int    decPos    =    val.indexOf('.',    mant);    	non-compiled	[CE]  orphaned  case	30	None	replace
31	[BUG]  [BUGGY]  String  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  String  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	String  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;	  char    decPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	10	None	replace
32	[BUG]  [BUGGY]  String  decPos  =  val.indexOf('.',  lastChar);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  String  decPos  =  val.indexOf('.',  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	String  decPos  =  val.indexOf('.',  lastChar);	  char    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	31	None	replace
33	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('.');  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('.');  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  val.indexOf('.');	  int    decPos    =    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
34	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.'  +  lastChar);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.'  +  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('.'  +  lastChar);	  int    decPos    =    val.indexOf('.')+    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	44	None	replace
35	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.',  lastChar);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.',  lastChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('.',  lastChar);	  int    decPos    =    val.indexOf('.')+    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	44	None	replace
36	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  +  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  +  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(val  +	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException    	non-compiled	[CE]  orphaned  case	1	None	replace
37	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	14	None	replace
38	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  2;	  int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	14	None	replace
39	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.',  lastChar  +  1);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.',  lastChar  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.',  lastChar  +  1);	  int    decPos    =    val.indexOf('.',    lastChar    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
40	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  lastChar  +  1);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.lastIndexOf('.',  lastChar  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.',  lastChar  +  1);	  int    decPos    =    val.indexOf('.',    lastChar    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
41	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar  +  2);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar  +  2);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  lastChar  +  2);	  int    decPos    =    val.indexOf('.',    lastChar    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
42	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('D')+  1;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('D')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('D')+  1;	  int    decPos    =    val.indexOf('.')+    1    +    1;    	non-compiled	[CE]  orphaned  case	32	None	replace
43	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  mant;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  mant;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  mant;	  int    decPos    =    val.indexOf('.')+    lastChar;    	non-compiled	[CE]  orphaned  case	11	None	replace
44	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  lastChar;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.')+  lastChar;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.')+  lastChar;	  int    decPos    =    val.indexOf('.')+    lastChar;    	non-compiled	[CE]  orphaned  case	11	None	replace
45	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  mant);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('.',  mant);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.',  mant);	  int    expPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	24	None	replace
46	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('.',  lastChar);  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  expPos  =  val.indexOf('.',  lastChar);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  expPos  =  val.indexOf('.',  lastChar);	  int    expPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  	24	None	replace
47	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  1;  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar)+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.',  lastChar)+  1;	  int    expPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  	24	None	replace
48	[BUG]  [BUGGY]  String  decPos  =  val.lastIndexOf('.');  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  String  decPos  =  val.lastIndexOf('.');  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	String  decPos  =  val.lastIndexOf('.');	  char    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  	18	None	replace
49	[BUG]  [BUGGY]  char  decPos  =  val.lastIndexOf('.',  1);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.lastIndexOf('.',  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.lastIndexOf('.',  1);	  char    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	18	None	replace
50	[BUG]  [BUGGY]  char  decPos  =  val.lastIndexOf('.')+  1;  [CE]  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.lastIndexOf('.')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.lastIndexOf('.')+  1;	  char    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  	18	None	replace
51	[BUG]  [BUGGY]  char  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  	16	None	replace
52	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [CE]  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  2;	  int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  	16	None	replace
53	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('-')+  2;  [CE]  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('-')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('-')+  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('-')+    1;    	non-compiled	[CE]  	46	None	replace
54	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('-')+  1;  [CE]  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('-')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.')+  val.indexOf('-')+  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('-')+    1;    	non-compiled	[CE]  	46	None	replace
55	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.'  +  mant)+  1;  [CE]  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.'  +  mant)+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.'  +  mant)+  1;	  int    decPos    =    val.indexOf('.'    +    lastChar)+    1;    	non-compiled	[CE]  	13	None	replace
56	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('-'  +  1);  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('-'  +  1);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('-'  +  1);	  int    decPos    =    val.indexOf('-'    +    1);    	non-compiled	[CE]  	36	None	replace
57	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar  +  1);  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar  +  1);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-',  lastChar  +  1);	  int    decPos    =    val.indexOf('-'    +    1);    	non-compiled	[CE]  	36	None	replace
58	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	  int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.'  +  mant);  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('.'  +  mant);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.'  +  mant);	  int    expPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
60	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  lastChar;  [CE]  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('.')+  lastChar;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.')+  lastChar;	  int    expPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  	26	None	replace
61	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  lastChar)+  1;  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.lastIndexOf('.',  lastChar)+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.',  lastChar)+  1;	  int    decPos    =    val.lastIndexOf('.',    lastChar);    	non-compiled	[CE]  	17	None	replace
62	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('E')+  1;	  int    expPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
63	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('e')+  1;	  int    expPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
64	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length()  -  2);  [CE]  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  val  =  val.substring(0,  val.length()  -  2);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	val  =  val.substring(0,  val.length()  -  2);	  val    =    val.substring(0,    val.length());    	non-compiled	[CE]  	22	None	replace
65	[BUG]  [BUGGY]  if(allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    	non-compiled	[CE]  	39	None	replace
66	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar)+  2;  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar)+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  lastChar)+  2;	  int    decPos    =    val.indexOf('.',    lastChar)+    1;    	non-compiled	[CE]  	29	None	replace
67	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.',  lastChar)+  1;  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.',  lastChar)+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.',  lastChar)+  1;	  int    decPos    =    val.indexOf('.',    lastChar)+    1;    	non-compiled	[CE]  	29	None	replace
68	[BUG]  [BUGGY]  char  decPos  =  val.lastIndexOf('.',  dec);  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.lastIndexOf('.',  dec);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.lastIndexOf('.',  dec);	  int    decPos    =    val.lastIndexOf('.',    dec);    	non-compiled	[CE]  	48	None	replace
69	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('_')+  2;  [CE]  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('_')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('_')+  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('_')+    1;    	non-compiled	[CE]  	45	None	replace
70	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('_')+  1;  [CE]  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('_')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.')+  val.indexOf('_')+  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('_')+    1;    	non-compiled	[CE]  	45	None	replace
71	[BUG]  [BUGGY]  String  decPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [CE]  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  String  decPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	String  decPos  =  val.indexOf('.')+  val.indexOf('e')+  1;	  char    decPos    =    val.indexOf('.')+    val.indexOf('e')+    1;    	non-compiled	[CE]  	20	None	replace
72	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  mant);  [CE]  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  mant);	  int    decPos    =    val.indexOf('.'    +    mant);    	non-compiled	[CE]  	12	None	replace
73	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2  +  1;  [CE]  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2  +  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    1    +    1;    	non-compiled	[CE]  	42	None	replace
74	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    	non-compiled	[CE]  	35	None	replace
75	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=  int  [CE]  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=  int  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=  int	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    	non-compiled	[CE]  	35	None	replace
76	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  [Delete]  [CE]  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  [Delete]  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  [Delete]	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    	non-compiled	[CE]  	35	None	replace
77	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  ==  [CE]  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  ==  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  ==	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    	non-compiled	[CE]  	35	None	replace
78	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.')+  2;  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.lastIndexOf('.')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.')+  2;	  int    decPos    =    val.lastIndexOf('.')+    1;    	non-compiled	[CE]  	40	None	replace
79	[BUG]  [BUGGY]  if(allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    	non-compiled	[CE]  	34	None	replace
80	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	9	None	replace
81	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')-  2;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')-  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('E')-  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	9	None	replace
82	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.')+  1  +  1;  [CE]  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('.')+  1  +  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('.')+    1;    	non-compiled	[CE]  	47	None	replace
83	[BUG]  [BUGGY]  if(allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    	non-compiled	[CE]  orphaned  case	35	None	replace
84	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >>  [CE]  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >>  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >>	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    	non-compiled	[CE]  	35	None	replace
85	[BUG]  [BUGGY]  float  decPos  =  val.indexOf('-'  +  1);  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  float  decPos  =  val.indexOf('-'  +  1);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	float  decPos  =  val.indexOf('-'  +  1);	  int    decPos    =    val.indexOf('-'    +    1);    	non-compiled	[CE]  	36	None	replace
86	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-');  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-');  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  val.indexOf('-');	  int    decPos    =    val.indexOf('-'    +    lastChar);    	non-compiled	[CE]  	4	None	replace
87	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('_');  [CE]  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('_');  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  val.indexOf('_');	  int    decPos    =    val.indexOf('-'    +    lastChar);    	non-compiled	[CE]  	4	None	replace
88	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException    	non-compiled	[CE]  	6	None	replace
89	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('_')+  1  +  1;  [CE]  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('_')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('_')+  1  +  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('_')+    1;    	non-compiled	[CE]  	45	None	replace
90	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  firstChar);  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.',  firstChar);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  firstChar);	  int    decPos    =    val.indexOf('.',    mant);    	non-compiled	[CE]  	30	None	replace
91	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    	non-compiled	[CE]  	39	None	replace
92	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.'  +  1);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.'  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('.'  +  1);	  int    decPos    =    val.indexOf('.')+    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	44	None	replace
93	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e')-  2;  [CE]  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e')-  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('e')-  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('e')+    2;    	non-compiled	[CE]  	21	None	replace
94	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  1  +  1;  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-')+  1  +  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  1  +  1;	  int    decPos    =    val.indexOf('-')+    1;    	non-compiled	[CE]  	3	None	replace
95	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  lastChar  +  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  lastChar  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  lastChar  +  1;	  int    decPos    =    val.indexOf('.')+    lastChar;    	non-compiled	[CE]  orphaned  case	11	None	replace
96	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1  +  1;	  int    decPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	15	None	replace
97	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-')+  1  +  1;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  val.indexOf('-')+  1  +  1;	  int    decPos    =    val.indexOf('-')+    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	38	None	replace
98	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.')+  1  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.lastIndexOf('.')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.')+  1  +  1;	  int    decPos    =    val.lastIndexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	40	None	replace
99	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar)+  1  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar)+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  lastChar)+  1  +  1;	  int    decPos    =    val.indexOf('.',    lastChar)+    1;    	non-compiled	[CE]  orphaned  case	29	None	replace
100	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
101	[BUG]  [BUGGY]  Integer  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  Integer  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	Integer  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
102	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.');  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.');  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.');	  char    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	18	None	replace
103	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('-')+  1  +  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('-')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('-')+  1  +  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	46	None	replace
104	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar  +  mant);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar  +  mant);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  lastChar  +  mant);	  int    decPos    =    val.indexOf('.'    +    mant);    	non-compiled	[CE]  orphaned  case	12	None	replace
105	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('+')+  val.indexOf('-')+  1  +  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('+')+  val.indexOf('-')+  1  +  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('+')+  val.indexOf('-')+  1  +  1;	  int    decPos    =    val.indexOf('+')+    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	37	None	replace
106	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  dec  +  1);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.lastIndexOf('.',  dec  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.',  dec  +  1);	  int    decPos    =    val.lastIndexOf('.',    dec);    	non-compiled	[CE]  orphaned  case	48	None	replace
107	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  1);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.lastIndexOf('.',  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.',  1);	  int    decPos    =    val.lastIndexOf('.',    DEC_PREFIX);    	non-compiled	[CE]  orphaned  case	19	None	replace
108	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('e')+  2;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('e')+  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.')+  val.indexOf('e')+  2;	  char    decPos    =    val.indexOf('.')+    val.indexOf('e')+    1;    	non-compiled	[CE]  orphaned  case	20	None	replace
109	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length()  -  3);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  val  =  val.substring(0,  val.length()  -  3);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	val  =  val.substring(0,  val.length()  -  3);	  val    =    val.substring(0,    val.length());    	non-compiled	[CE]  orphaned  case	22	None	replace
110	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  1);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-',  1);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-',  1);	  int    decPos    =    val.indexOf('-',    lastChar);    	non-compiled	[CE]  orphaned  case	50	None	replace
111	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  1  +  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('.')+  1  +  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.')+  1  +  1;	  int    expPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	25	None	replace
112	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')/  2;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')/  2;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E')/  2;	  int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    2;    	non-compiled	[CE]  orphaned  case	27	None	replace
113	[BUG]  [BUGGY]  int  expPos  =  val.lastIndexOf('.',  lastChar);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.lastIndexOf('.',  lastChar);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.lastIndexOf('.',  lastChar);	  int    expPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	24	None	replace
114	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-'  +  1);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-'  +  1);  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  val.indexOf('-'  +  1);	  int    decPos    =    val.indexOf('-'    +    1);    	non-compiled	[CE]  orphaned  case	36	None	replace
115	[BUG]  [BUGGY]  Char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  Char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	Char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;	  char    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	28	None	replace
116	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  2;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('-')+  2;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  2;	  int    decPos    =    val.indexOf('-')+    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
117	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e')/  2;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e')/  2;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('e')/  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('e')+    2;    	non-compiled	[CE]  orphaned  case	21	None	replace
118	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  mant  +  1);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.',  mant  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  mant  +  1);	  int    decPos    =    val.indexOf('.',    lastChar    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
119	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  >=	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    	non-compiled	[CE]  orphaned  case	35	None	replace
120	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >!=  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >!=  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >!=	  if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    	non-compiled	[CE]  orphaned  case	35	None	replace
121	[BUG]  [BUGGY]  Char  decPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  Char  decPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	Char  decPos  =  val.indexOf('.')+  val.indexOf('e')+  1;	  char    decPos    =    val.indexOf('.')+    val.indexOf('e')+    1;    	non-compiled	[CE]  orphaned  case	20	None	replace
122	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  dec  +  1);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.',  dec  +  1);  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  dec  +  1);	  int    decPos    =    val.indexOf('.',    dec);    	non-compiled	[CE]  orphaned  case	49	None	replace
123	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length())+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  val  =  val.substring(0,  val.length())+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	val  =  val.substring(0,  val.length())+  1;	  val    =    val.substring(0,    val.length()    +    1);    	non-compiled	[CE]  orphaned  case	23	None	replace
124	[BUG]  [BUGGY]  int  expPos  =  val.lastIndexOf('.')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.lastIndexOf('.')+  1;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.lastIndexOf('.')+  1;	  int    expPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	25	None	replace
125	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('.')+  2;  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.')+  2;	  int    expPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	25	None	replace
126	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  mant.indexOf('-')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  decPos  =  val.indexOf('.')+  mant.indexOf('-')+  1;  [BUGGY]      int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  mant.indexOf('-')+  1;	  int    decPos    =    val.indexOf('.',    mant);    	non-compiled	[CE]  orphaned  case	30	None	replace
127	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('.');  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;      [BUGGY]  int  expPos  =  val.indexOf('.')+  val.indexOf('.');  [BUGGY]      int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +       "  is  not  a  valid  number.     ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.')+  val.indexOf('.');	  int    expPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	26	None	replace
