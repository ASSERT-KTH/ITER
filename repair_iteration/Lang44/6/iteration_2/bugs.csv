bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException	      if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;	      if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
3	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  1;  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('-')+  1;  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  1;	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-'  +  lastChar);  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('-'  +  lastChar);  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-'  +  lastChar);	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('-');  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  char  decPos  =  val.indexOf('-');  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('-');	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException	      if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
7	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(	      if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
8	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	      if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
9	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  lastChar;  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  lastChar;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  lastChar;	  int    decPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.'  +  mant);  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.'  +  mant);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.'  +  mant);	  int    decPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.'  +  lastChar)+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.'  +  lastChar)+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.'  +  lastChar)+  1;	  int    decPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	3	None	replace
14	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;	      	non-compiled	[CE]  orphaned  case	5	None	replace
15	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	      	non-compiled	[CE]  orphaned  case	5	None	replace
16	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;	      	non-compiled	[CE]  orphaned  case	5	None	replace
17	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  lastChar);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.lastIndexOf('.',  lastChar);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.',  lastChar);	  int    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	8	None	replace
18	[BUG]  [BUGGY]  char  decPos  =  val.lastIndexOf('.');  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  char  decPos  =  val.lastIndexOf('.');  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.lastIndexOf('.');	  int    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	8	None	replace
19	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  DEC_PREFIX);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.lastIndexOf('.',  DEC_PREFIX);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.',  DEC_PREFIX);	  int    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	8	None	replace
20	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  char  decPos  =  val.indexOf('.')+  val.indexOf('e')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.')+  val.indexOf('e')+  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('e')+    1;    	non-compiled	[CE]  orphaned  case	4	None	replace
21	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e')+  2;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('e')+  2;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('e')+  2;	  int    decPos    =    val.indexOf('.')+    val.indexOf('e')+    1;    	non-compiled	[CE]  orphaned  case	4	None	replace
22	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length());  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  val  =  val.substring(0,  val.length());  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	val  =  val.substring(0,  val.length());	      val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  orphaned  case	6	None	replace
23	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length()  +  1);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  val  =  val.substring(0,  val.length()  +  1);  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	val  =  val.substring(0,  val.length()  +  1);	      val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar);  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  expPos  =  val.indexOf('.',  lastChar);  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.',  lastChar);	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	11	None	replace
25	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.')+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  expPos  =  val.indexOf('.')+  1;  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.')+  1;	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	11	None	replace
26	[BUG]  [BUGGY]  int  expPos  =  val.indexOf('.'  +  lastChar);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  expPos  =  val.indexOf('.'  +  lastChar);  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  expPos  =  val.indexOf('.'  +  lastChar);	      int    expPos    =    val.indexOf('.');    	non-compiled	[CE]  orphaned  case	11	None	replace
27	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  2;	      int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
28	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1;	      int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
29	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar)+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar)+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  lastChar)+  1;	  int    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	2	None	replace
30	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  mant);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.',  mant);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  mant);	  int    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	2	None	replace
31	[BUG]  [BUGGY]  char  decPos  =  val.indexOf('.',  lastChar);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  char  decPos  =  val.indexOf('.',  lastChar);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	char  decPos  =  val.indexOf('.',  lastChar);	  int    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	2	None	replace
32	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  1  +  1;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  1  +  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  1  +  1;	  int    decPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
33	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  2;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  2;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  2;	  int    decPos    =    val.indexOf('.')+    1;    	non-compiled	[CE]  orphaned  case	7	None	replace
34	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {	      if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "    	non-compiled	[CE]  orphaned  case	12	None	replace
35	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')+  val.indexOf('E')+  1;  if(expPos  >	      if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "    	non-compiled	[CE]  orphaned  case	12	None	replace
36	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-'  +  1);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('-'  +  1);  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-'  +  1);	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  orphaned  case	10	None	replace
37	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('+')+  val.indexOf('-')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('+')+  val.indexOf('-')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('+')+  val.indexOf('-')+  1;	      	non-compiled	[CE]  orphaned  case	5	None	replace
38	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-')+  1;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('-')+  val.indexOf('-')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-')+  val.indexOf('-')+  1;	      	non-compiled	[CE]  orphaned  case	5	None	replace
39	[BUG]  [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	if(!allZeros)  {  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('E')+  val.indexOf('E')+  1;  if(expPos  >  -1)  {	      if(!allZeros)    {    int    decPos    =    val.indexOf('.');    int    expPos    =    val.indexOf('E')+    val.indexOf('E')+    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(   "    	non-compiled	[CE]  orphaned  case	13	None	replace
40	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.')+  1;  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.lastIndexOf('.')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.')+  1;	  int    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	8	None	replace
41	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar  +  1);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.',  lastChar  +  1);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  lastChar  +  1);	  int    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	2	None	replace
42	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('E')+  1  +  1;	  int    decPos    =    val.indexOf('.')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	1	None	replace
43	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  1;  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  1;  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('e')+  val.indexOf('E')+  1  +  1;	      int    decPos    =    val.indexOf('e')+    val.indexOf('E')+    1;    	non-compiled	[CE]  orphaned  case	9	None	replace
44	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.');  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.');  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('.');	  int    decPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	3	None	replace
45	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('_')+  1;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('_')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('_')+  1;	  int    decPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	3	None	replace
46	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('-')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('-')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('-')+  1;	  int    decPos    =    val.indexOf('.'    +    lastChar);    	non-compiled	[CE]  orphaned  case	3	None	replace
47	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.')+  1;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.')+  val.indexOf('.')+  1;  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.')+  val.indexOf('.')+  1;	      	non-compiled	[CE]  orphaned  case	5	None	replace
48	[BUG]  [BUGGY]  int  decPos  =  val.lastIndexOf('.',  dec);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.lastIndexOf('.',  dec);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.lastIndexOf('.',  dec);	  int    decPos    =    val.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	8	None	replace
49	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('.',  dec);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('.',  dec);  [BUGGY]    int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('.',  dec);	  int    decPos    =    val.indexOf('.',    lastChar);    	non-compiled	[CE]  orphaned  case	2	None	replace
50	[BUG]  [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      return  null;  }  if  (val.startsWith(   "0x   ")  ||  val.startsWith(   "-0x   "))  {  return  createInteger(val);  }  char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  val.indexOf('-',  lastChar);  [BUGGY]    int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(val  +     "  is  not  a  valid  number.   ");  }  dec  =  val.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	159	159	1	replace	int  decPos  =  val.indexOf('-',  lastChar);	      int    decPos    =    val.indexOf('-');    	non-compiled	[CE]  orphaned  case	10	None	replace
