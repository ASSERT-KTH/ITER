bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  val.startsWith( "-0 "))  {  return  createBigInteger(val);  }  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "-0 "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "-0 "))  {  return  createBigInteger(val);  }	  ||    val.startsWith(   "-0x   "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
2	[BUG]  [BUGGY]  ||  val.startsWith( "-0 "))  {  return  createInteger(val);  }  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "-0 "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "-0 "))  {  return  createInteger(val);  }	  ||    val.startsWith(   "-0x   "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
3	[BUG]  [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigInteger(val);  }  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigInteger(val);  }	  if(val.startsWith(   "-0x       ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
4	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.indexOf('-')+  2);  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.indexOf('-')+  2);  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.indexOf('-')+  2);	  char    lastChar    =    val.charAt(val.indexOf('-')+    1);    	non-compiled	[CE]  not  a  statement	41	None	replace
5	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.indexOf('-')+  3);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.indexOf('-')+  3);  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.indexOf('-')+  3);	  char    lastChar    =    val.charAt(val.indexOf('-')+    1);    	non-compiled	[CE]  not  a  statement	41	None	replace
6	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigInteger(val);  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
7	[BUG]  [BUGGY]  AllZeros)  {  if(val.startsWith( "-0x   ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  }  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  AllZeros)  {  if(val.startsWith( "-0x   ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	AllZeros)  {  if(val.startsWith( "-0x   ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
8	[BUG]  [BUGGY]  AllZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigInteger(val);  }  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  AllZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	AllZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
9	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  /  2);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  /  2);  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  /  2);	  char    lastChar    =    val.charAt(val.length()    *    2);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
10	[BUG]  [BUGGY]  String  lastChar  =  val.charAt(val.length()  *  2);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  lastChar  =  val.charAt(val.length()  *  2);  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  lastChar  =  val.charAt(val.length()  *  2);	  char    lastChar    =    val.charAt(val.length()    *    2);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
11	[BUG]  [BUGGY]  allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  }  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  }	  AllZeros)    {    if(val.startsWith(   "0x       ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "-1))  {  return  createBigInteger(val);  }  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "-1))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x   ")||  val.startsWith( "-1))  {  return  createBigInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "0x   ")||    val.startsWith(   "-1))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
13	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( ".-1))  {  return  createBigInteger(val);  }  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( ".-1))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( ".-1))  {  return  createBigInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "0x   ")||    val.startsWith(   "-1))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
14	[BUG]  [BUGGY]  ||  val.startsWith( "-   "))  {  return  createBigDecimal(val);  }  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "-   "))  {  return  createBigDecimal(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "-   "))  {  return  createBigDecimal(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createBigDecimal(val);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
15	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(val.startsWith( "-0x   ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(val.startsWith( "-0x   ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(val.startsWith( "-0x   ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
16	[BUG]  [BUGGY]  AllZeros)  {  if(val.startsWith( "-0x   ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  AllZeros)  {  if(val.startsWith( "-0x   ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	AllZeros)  {  if(val.startsWith( "-0x   ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
17	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  1)+  2;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  1)+  2;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  -  1)+  2;	  char    lastChar    =    val.charAt(val.length())+    2;    	non-compiled	[CE]  not  a  statement	10	None	replace
18	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length())/  2;  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length())/  2;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length())/  2;	  char    lastChar    =    val.charAt(val.length())+    2;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
19	[BUG]  [BUGGY]  ||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( ".- "))  {  return  createInteger(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   ".-   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
20	[BUG]  [BUGGY]  if(val.startsWith( ".0 ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [CE]  <identifier>  expected  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( ".0 ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( ".0 ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   ".-   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
21	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  /  1)+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  /  1)+  1;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  /  1)+  1;	  char    lastChar    =    val.charAt(val.length()    +    1)+    1;    	non-compiled	[CE]  not  a  statement	29	None	replace
22	[BUG]  [BUGGY]  Char  lastChar  =  val.charAt(val.length());  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  Char  lastChar  =  val.charAt(val.length());  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	Char  lastChar  =  val.charAt(val.length());	  char    lastChar    =    val.charAt(val.length()    -    2);    	non-compiled	[CE]  not  a  statement	3	None	replace
23	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()  -  1)+  1;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  val  =  val.substring(0,  val.length()  -  1)+  1;  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  val  =  val.substring(0,  val.length()  -  1)+  1;	  String    val    =    val.substring(0,    val.length())+    1;    	non-compiled	[CE]  not  a  statement	50	None	replace
24	[BUG]  [BUGGY]  char  val  =  val.substring(0,  val.length())+  1;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  val  =  val.substring(0,  val.length())+  1;  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  val  =  val.substring(0,  val.length())+  1;	  String    val    =    val.substring(0,    val.length())+    1;    	non-compiled	[CE]  not  a  statement	50	None	replace
25	[BUG]  [BUGGY]  char  dec  =  val.substring(0,  val.length());  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  dec  =  val.substring(0,  val.length());  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  dec  =  val.substring(0,  val.length());	  char    dec    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  not  a  statement	24	None	replace
26	[BUG]  [BUGGY]  Character  dec  =  val.substring(0,  val.length()  -  1);  [CE]  not  a  statement  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  Character  dec  =  val.substring(0,  val.length()  -  1);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	Character  dec  =  val.substring(0,  val.length()  -  1);	  char    dec    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  not  a  statement	24	None	replace
27	[BUG]  [BUGGY]  String  dec  =  val.substring(0,  val.length()  -  1)+  1;  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  dec  =  val.substring(0,  val.length()  -  1)+  1;  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  dec  =  val.substring(0,  val.length()  -  1)+  1;	  String    dec    =    val.substring(0,    val.length())+    1;    	non-compiled	[CE]  not  a  statement	36	None	replace
28	[BUG]  [BUGGY]  String  dec  =  val.substring(0,  val.length()  +  1)+  1;  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  dec  =  val.substring(0,  val.length()  +  1)+  1;  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  dec  =  val.substring(0,  val.length()  +  1)+  1;	  String    dec    =    val.substring(0,    val.length())+    1;    	non-compiled	[CE]  not  a  statement	36	None	replace
29	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  1)+  3;  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  1)+  3;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  -  1)+  3;	  char    lastChar    =    val.charAt(val.length()    -    1)+    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
30	[BUG]  [BUGGY]  if(val.startsWith( ".0 ")||  val.startsWith( ".0 "))  {  return  createInteger(val);  }  [CE]  not  a  statement  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( ".0 ")||  val.startsWith( ".0 "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( ".0 ")||  val.startsWith( ".0 "))  {  return  createInteger(val);  }	  if(val.startsWith(   ".   ")||    val.startsWith(   ".   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
31	[BUG]  [BUGGY]  ||  val.startsWith( ". "))  {  return  createInteger(val);  }  [CE]  not  a  statement  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( ". "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( ". "))  {  return  createInteger(val);  }	  if(val.startsWith(   ".   ")||    val.startsWith(   ".   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
32	[BUG]  [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  }  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  }	  try    {    [Delete]    catch(NumberFormatException    nfe)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
33	[BUG]  [BUGGY]  while(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  while(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	while(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  return  createBigInteger(val);	  try    {    [Delete]    catch(NumberFormatException    nfe)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
34	[BUG]  [BUGGY]  while(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  while(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	while(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {	  try    {    [Delete]    catch(NumberFormatException    nfe)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
35	[BUG]  [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "-1))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "-1))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x   ")||  val.startsWith( "-1))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "0x   ")||    val.startsWith(   "-1))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
36	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "-1))  {  return  createNumber(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "-1))  {  return  createNumber(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( "0x   ")||  val.startsWith( "-1))  {  return  createNumber(val);  }	  if(!allZeros)    {    if(val.startsWith(   "0x   ")||    val.startsWith(   "-1))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
37	[BUG]  [BUGGY]  ||  val.startsWith( "-1x "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "-1x "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "-1x "))  {  return  createInteger(val);  }	  if(val.startsWith(   "0x   ")||    val.startsWith(   "-1x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
38	[BUG]  [BUGGY]  if(val.startsWith( "-0 ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "-0 ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "-0 ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-0   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
39	[BUG]  [BUGGY]  char  val  =  val.substring(0,  val.length());  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  val  =  val.substring(0,  val.length());  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  val  =  val.substring(0,  val.length());	  char    val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
40	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length();  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  val  =  val.substring(0,  val.length();  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  val  =  val.substring(0,  val.length();	  String    val    =    val.substring(0,    val.length()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
41	[BUG]  [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x   ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "0x   ")||    val.startsWith(   ".-   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
42	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( ".0x ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( ".0x ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( ".0x ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "0x   ")||    val.startsWith(   ".-   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
43	[BUG]  [BUGGY]  String  dec  =  val.substring(0,  val.length()  -  3);  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  dec  =  val.substring(0,  val.length()  -  3);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  dec  =  val.substring(0,  val.length()  -  3);	  String    dec    =    val.substring(0,    val.length());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
44	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
45	[BUG]  [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	try  {  [Delete]  catch(Exception  e)  {  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
46	[BUG]  [BUGGY]  String  lastChar  =  val.charAt(val.length()  -  1)+  1;  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  lastChar  =  val.charAt(val.length()  -  1)+  1;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  lastChar  =  val.charAt(val.length()  -  1)+  1;	  String    lastChar    =    val.charAt(val.length())+    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  val  =  val.substring(0,  val.length()  -  2);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  val  =  val.substring(0,  val.length()  -  2);	  String    val    =    val.substring(0,    val.length());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
48	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()  -  3);  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  val  =  val.substring(0,  val.length()  -  3);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  val  =  val.substring(0,  val.length()  -  3);	  String    val    =    val.substring(0,    val.length());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
49	[BUG]  [BUGGY]  String  dec  =  val.substring(0,  val.length();  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  dec  =  val.substring(0,  val.length();  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  dec  =  val.substring(0,  val.length();	  String    dec    =    val.substring(0,    val.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
50	[BUG]  [BUGGY]  String  desc  =  val.substring(0,  val.length());  [CE]  illegal  start  of  expression  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  desc  =  val.substring(0,  val.length());  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  desc  =  val.substring(0,  val.length());	  String    dec    =    val.substring(0,    val.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
51	[BUG]  [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigDecimal(val);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigDecimal(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x   ")||  val.startsWith( "0x   "))  {  return  createBigDecimal(val);  }	  if(val.startsWith(   "-0x       ")||    val.startsWith(   "-0x       "))    {    return    createBigDecimal(val);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
52	[BUG]  [BUGGY]  ||  val.startsWith( "-0 "))  {  return  createUniqueInteger(val);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "-0 "))  {  return  createUniqueInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "-0 "))  {  return  createUniqueInteger(val);  }	  ||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  ||  val.startsWith( "-0x "))  {  return  createUniqueInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "-0x "))  {  return  createUniqueInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "-0x "))  {  return  createUniqueInteger(val);  }	  ||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  ||  val.startsWith( "-0 "))  {  return  createBigDecimal(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "-0 "))  {  return  createBigDecimal(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "-0 "))  {  return  createBigDecimal(val);  }	  if(val.startsWith(   "-0   ")||    val.startsWith(   "-0   "))    {    return    createBigDecimal(val);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
55	[BUG]  [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  return  createNull(val);  }  [CE]  illegal  start  of  expression  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  return  createNull(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x   ")||  val.startsWith( "-0x   "))  {  return  createNull(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createNull(val);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
56	[BUG]  [BUGGY]  ||  val.startsWith( "-   "))  {  return  createNull(val);  }  [CE]  illegal  start  of  expression  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "-   "))  {  return  createNull(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "-   "))  {  return  createNull(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createNull(val);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
57	[BUG]  [BUGGY]  ||  val.startsWith( "- "))  {  return  createUniqueInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "- "))  {  return  createUniqueInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "- "))  {  return  createUniqueInteger(val);  }	  ||    val.startsWith(   "-       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  ||  val.startsWith( "- "))  {  return  createNumber(val);  }  [CE]  illegal  start  of  expression  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "- "))  {  return  createNumber(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "- "))  {  return  createNumber(val);  }	  ||    val.startsWith(   "-       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  if(val.startsWith( "-0x ")||  val.startsWith( "-0x "))  {  return  createNumber(val);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "-0x ")||  val.startsWith( "-0x "))  {  return  createNumber(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "-0x ")||  val.startsWith( "-0x "))  {  return  createNumber(val);  }	  if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
60	[BUG]  [BUGGY]  while(val.startsWith( "- ")||  val.startsWith( "-0x "))  {  return  createBigInteger(val);  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  while(val.startsWith( "- ")||  val.startsWith( "-0x "))  {  return  createBigInteger(val);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	while(val.startsWith( "- ")||  val.startsWith( "-0x "))  {  return  createBigInteger(val);	  try    {    [Delete]    catch(Exception    e)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
61	[BUG]  [BUGGY]  String  lastChar  =  val.charAt(val.length()  -  2);  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  lastChar  =  val.charAt(val.length()  -  2);  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  lastChar  =  val.charAt(val.length()  -  2);	  String    lastChar    =    val.charAt(val.length());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
62	[BUG]  [BUGGY]  if(val.startsWith( ".0x ")||  val.startsWith( "-1x "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( ".0x ")||  val.startsWith( "-1x "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( ".0x ")||  val.startsWith( "-1x "))  {  return  createInteger(val);  }	  if(val.startsWith(   "0x   ")||    val.startsWith(   "-1x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
63	[BUG]  [BUGGY]  if(val.startsWith( ".0x ")||  val.startsWith( ".-1x "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( ".0x ")||  val.startsWith( ".-1x "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( ".0x ")||  val.startsWith( ".-1x "))  {  return  createInteger(val);  }	  if(val.startsWith(   "0x   ")||    val.startsWith(   "-1x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
64	[BUG]  [BUGGY]  String  dec  =  val.substring(0,  val.length()));  [CE]  illegal  start  of  expression  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  dec  =  val.substring(0,  val.length()));  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  dec  =  val.substring(0,  val.length()));	  String    dec    =    val.substring(0,    val.length()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
65	[BUG]  [BUGGY]  String  dec  =  val.substring(0,  val.length()  -  4);  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  dec  =  val.substring(0,  val.length()  -  4);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  dec  =  val.substring(0,  val.length()  -  4);	  String    dec    =    val.substring(0,    val.length());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
66	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  1)+  4;  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  1)+  4;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  -  1)+  4;	  char    lastChar    =    val.charAt(val.length()    -    1)+    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
67	[BUG]  [BUGGY]  ||  val.startsWith( "-0x "))  {  return  createNumber(val);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "-0x "))  {  return  createNumber(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "-0x "))  {  return  createNumber(val);  }	  ||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
68	[BUG]  [BUGGY]  ||  val.startsWith( "0x "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( "0x "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( "0x "))  {  return  createInteger(val);  }	  ||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
69	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()  +  1)+  1;  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  val  =  val.substring(0,  val.length()  +  1)+  1;  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  val  =  val.substring(0,  val.length()  +  1)+  1;	  String    val    =    val.substring(0,    val.length())+    1;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
70	[BUG]  [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-1))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-1))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "- ")||  val.startsWith( "-1))  {  return  createInteger(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
71	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( ".0x ")||  val.startsWith( "-1))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( ".0x ")||  val.startsWith( "-1))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( ".0x ")||  val.startsWith( "-1))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "0x   ")||    val.startsWith(   "-1))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
72	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.indexOf('-')/  1);  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.indexOf('-')/  1);  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.indexOf('-')/  1);	  char    lastChar    =    val.charAt(val.indexOf('-')+    1);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
73	[BUG]  [BUGGY]  if(val.startsWith( ".- ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( ".- ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( ".- ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   ".-   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
74	[BUG]  [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-- "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-- "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "- ")||  val.startsWith( "-- "))  {  return  createInteger(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   ".-   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
75	[BUG]  [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-))  {  return  createBigDecimal(val);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-))  {  return  createBigDecimal(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "- ")||  val.startsWith( "-))  {  return  createBigDecimal(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createBigDecimal(val);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
76	[BUG]  [BUGGY]  if(val.startsWith( "-0 ")||  val.startsWith( "-0x "))  {  return  createBigInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "-0 ")||  val.startsWith( "-0x "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "-0 ")||  val.startsWith( "-0x "))  {  return  createBigInteger(val);  }	  if(val.startsWith(   "-0   ")||    val.startsWith(   "-0   "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
77	[BUG]  [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-0 "))  {  return  createNull(val);  }  [CE]  illegal  start  of  expression  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-0 "))  {  return  createNull(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "- ")||  val.startsWith( "-0 "))  {  return  createNull(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createNull(val);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
78	[BUG]  [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-))  {  return  createNull(val);  }  [CE]  illegal  start  of  expression  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-))  {  return  createNull(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "- ")||  val.startsWith( "-))  {  return  createNull(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createNull(val);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
79	[BUG]  [BUGGY]  String  dec  =  val.substring(0,  val.length()  +  2);  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  dec  =  val.substring(0,  val.length()  +  2);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  dec  =  val.substring(0,  val.length()  +  2);	  String    dec    =    val.substring(0,    val.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
80	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  +  1)/  1;  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  +  1)/  1;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  +  1)/  1;	  char    lastChar    =    val.charAt(val.length()    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
81	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  +  1)+  2;  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  +  1)+  2;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  +  1)+  2;	  char    lastChar    =    val.charAt(val.length()    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
82	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()  -  4);  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  val  =  val.substring(0,  val.length()  -  4);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  val  =  val.substring(0,  val.length()  -  4);	  String    val    =    val.substring(0,    val.length());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
83	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()));  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  val  =  val.substring(0,  val.length()));  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  val  =  val.substring(0,  val.length()));	  String    val    =    val.substring(0,    val.length()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
84	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  +  2);  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  +  2);  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  +  2);	  char    lastChar    =    val.charAt(val.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
85	[BUG]  [BUGGY]  if(val.startsWith( ".0x ")||  val.startsWith( ".-0x "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( ".0x ")||  val.startsWith( ".-0x "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( ".0x ")||  val.startsWith( ".-0x "))  {  return  createInteger(val);  }	  if(val.startsWith(   ".0x   ")||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
86	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( "-0 ")||  val.startsWith( "-0x "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( "-0 ")||  val.startsWith( "-0x "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( "-0 ")||  val.startsWith( "-0x "))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
87	[BUG]  [BUGGY]  if(val.startsWith( "0x ")||  val.startsWith( "-0x "))  {  return  createUniqueNumber(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x ")||  val.startsWith( "-0x "))  {  return  createUniqueNumber(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x ")||  val.startsWith( "-0x "))  {  return  createUniqueNumber(val);  }	  if(val.startsWith(   "0x   ")||    val.startsWith(   "-0x   "))    {    return    createNumber(val);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
88	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  2)+  2;  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  2)+  2;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  -  2)+  2;	  char    lastChar    =    val.charAt(val.length())+    2;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
89	[BUG]  [BUGGY]  try  {  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  try  {  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	try  {	  try    {    [Delete]    catch(Exception    e)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
90	[BUG]  [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "- ")||  val.startsWith( "-0x   "))  {  return  createInteger(val);  }	  try    {    [Delete]    catch(Exception    e)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
91	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( "-1x ")||  val.startsWith( "-1x "))  {  return  createBigInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( "-1x ")||  val.startsWith( "-1x "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( "-1x ")||  val.startsWith( "-1x "))  {  return  createBigInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
92	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x ")||  val.startsWith( "0x "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x ")||  val.startsWith( "0x "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( "0x ")||  val.startsWith( "0x "))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
93	[BUG]  [BUGGY]  if(val.startsWith( "0x ")||  val.startsWith( "-1))  {  return  createBigDecimal(val);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x ")||  val.startsWith( "-1))  {  return  createBigDecimal(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x ")||  val.startsWith( "-1))  {  return  createBigDecimal(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createBigDecimal(val);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
94	[BUG]  [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "- "))  {  return  createBigInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "- "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "- ")||  val.startsWith( "- "))  {  return  createBigInteger(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createBigDecimal(val);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
95	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(val);  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  aughtExceptionHandler.handleMissingName(val);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	aughtExceptionHandler.handleMissingName(val);	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
96	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(val);  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  aughtExceptionHandler.handleMissingValue(val);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	aughtExceptionHandler.handleMissingValue(val);	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
97	[BUG]  [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	aughtExceptionHandler.handleMalformedException( " ");	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
98	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(val,  val);  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  aughtExceptionHandler.handleMissingName(val,  val);  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	aughtExceptionHandler.handleMissingName(val,  val);	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
99	[BUG]  [BUGGY]  while(val.startsWith( "- ")||  val.startsWith( "-0x "))  {  return  createBigInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  while(val.startsWith( "- ")||  val.startsWith( "-0x "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	while(val.startsWith( "- ")||  val.startsWith( "-0x "))  {  return  createBigInteger(val);  }	  try    {    [Delete]    catch(NumberFormatException    nfe)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
100	[BUG]  [BUGGY]  while(val.startsWith( "- ")&&  val.startsWith( "-0x "))  {  return  createBigInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  while(val.startsWith( "- ")&&  val.startsWith( "-0x "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	while(val.startsWith( "- ")&&  val.startsWith( "-0x "))  {  return  createBigInteger(val);  }	  try    {    [Delete]    catch(NumberFormatException    nfe)    {    if(val.startsWith(   "-   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
101	[BUG]  [BUGGY]  String  lastChar  =  val.charAt(val.length()  +  1)+  1;  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  String  lastChar  =  val.charAt(val.length()  +  1)+  1;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	String  lastChar  =  val.charAt(val.length()  +  1)+  1;	  char    lastChar    =    val.charAt(val.length()    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
102	[BUG]  [BUGGY]  if(val.startsWith( "-0x ")||  val.startsWith( "-1x "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "-0x ")||  val.startsWith( "-1x "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "-0x ")||  val.startsWith( "-1x "))  {  return  createInteger(val);  }	  if(val.startsWith(   "0x   ")||    val.startsWith(   "-1x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
103	[BUG]  [BUGGY]  if(val.startsWith( "0x ")||  val.startsWith( "-1x "))  {  return  createNumber(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x ")||  val.startsWith( "-1x "))  {  return  createNumber(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x ")||  val.startsWith( "-1x "))  {  return  createNumber(val);  }	  if(val.startsWith(   "0x   ")||    val.startsWith(   "-1x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
104	[BUG]  [BUGGY]  if(val.startsWith( "-0 ")||  val.startsWith( "-0x "))  {  return  createBigDecimal(val);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "-0 ")||  val.startsWith( "-0x "))  {  return  createBigDecimal(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "-0 ")||  val.startsWith( "-0x "))  {  return  createBigDecimal(val);  }	  if(val.startsWith(   "-0   ")||    val.startsWith(   "-0   "))    {    return    createBigDecimal(val);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
105	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( "-0 ")||  val.startsWith( "-0 "))  {  return  createBigInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( "-0 ")||  val.startsWith( "-0 "))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( "-0 ")||  val.startsWith( "-0 "))  {  return  createBigInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "-0x   ")||    val.startsWith(   "-0x       "))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
106	[BUG]  [BUGGY]  if(val.startsWith( "0x ")||  val.startsWith( "-1))  {  return  createNull(val);  }  [CE]  illegal  start  of  expression  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "0x ")||  val.startsWith( "-1))  {  return  createNull(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "0x ")||  val.startsWith( "-1))  {  return  createNull(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createNull(val);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
107	[BUG]  [BUGGY]  if(val.startsWith( ". ")||  val.startsWith( ". "))  {  return  createNull(val);  }  [CE]  illegal  start  of  expression  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( ". ")||  val.startsWith( ". "))  {  return  createNull(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( ". ")||  val.startsWith( ". "))  {  return  createNull(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createNull(val);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
108	[BUG]  [BUGGY]  ||  val.startsWith( ".0 "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  ||  val.startsWith( ".0 "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	||  val.startsWith( ".0 "))  {  return  createInteger(val);  }	  ||    val.startsWith(   "-       "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
109	[BUG]  [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  1)/  1;  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  char  lastChar  =  val.charAt(val.length()  -  1)/  1;  [BUGGY]      String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	char  lastChar  =  val.charAt(val.length()  -  1)/  1;	  char    lastChar    =    val.charAt(val.length()    -    1)+    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
110	[BUG]  [BUGGY]  if(val.startsWith( ".0x ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( ".0x ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( ".0x ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }	  if(val.startsWith(   ".0x   ")||    val.startsWith(   "-0x   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
111	[BUG]  [BUGGY]  if(val.startsWith( ". ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( ". ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( ". ")||  val.startsWith( ".- "))  {  return  createInteger(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   ".-   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
112	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( "-0x ")||  val.startsWith( "-1))  {  return  createBigInteger(val);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( "-0x ")||  val.startsWith( "-1))  {  return  createBigInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( "-0x ")||  val.startsWith( "-1))  {  return  createBigInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "0x   ")||    val.startsWith(   "-1))    {    return    createBigInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
113	[BUG]  [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x ")||  val.startsWith( "- "))  {  return  createInteger(val);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(!allZeros)  {  if(val.startsWith( "0x ")||  val.startsWith( "- "))  {  return  createInteger(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(!allZeros)  {  if(val.startsWith( "0x ")||  val.startsWith( "- "))  {  return  createInteger(val);  }	  if(!allZeros)    {    if(val.startsWith(   "0x   ")||    val.startsWith(   ".-   "))    {    return    createInteger(val);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
114	[BUG]  [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "- "))  {  return  createUniqueNumber(val);  }  [CE]  illegal  start  of  expression  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      if  (val.startsWith(     "--     "))  {      return  null;  }  if  (val.startsWith(     "0x     ")  ||  val.startsWith(     "-0x     "))  {  return  createInteger(val);  }      [BUGGY]  if(val.startsWith( "- ")||  val.startsWith( "- "))  {  return  createUniqueNumber(val);  }  [BUGGY]      char  lastChar  =  val.charAt(val.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  val.indexOf('.');  int  expPos  =  val.indexOf('e')  +  val.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  val  [VARIABLES]  Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  	projects/Lang44/src/java/org/apache/commons/lang/NumberUtils.java	0.5773502691896258	155	155	1	replace	if(val.startsWith( "- ")||  val.startsWith( "- "))  {  return  createUniqueNumber(val);  }	  if(val.startsWith(   "-   ")||    val.startsWith(   "-   "))    {    return    createNumber(val);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
