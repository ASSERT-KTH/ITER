bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  error  =  0xFFFF  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  error  =  0xFFFF  +  1;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  error  =  0xFFFF  +  1;	  double    error    =    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
2	[BUG]  [BUGGY]  int  error  =  0xFFFF;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  error  =  0xFFFF;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  error  =  0xFFFF;	  double    error    =    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
3	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
4	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  a[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  a[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  a[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
5	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  b[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  b[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  b[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t1,  y[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t1,  y[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t1,  y[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
7	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  Context.reportCodeChange();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	Context.reportCodeChange();	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  Integer[]  stepStart  =  getStepInterpolator().getSteps();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  Integer[]  stepStart  =  getStepInterpolator().getSteps();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	Integer[]  stepStart  =  getStepInterpolator().getSteps();	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  AssertionError.make(t0,  y,  lastStep);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  AssertionError.make(t0,  y,  lastStep);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	AssertionError.make(t0,  y,  lastStep);	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  Integer[]  stepStart  =  getStepInterpolator().getStepSize();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  Integer[]  stepStart  =  getStepInterpolator().getStepSize();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	Integer[]  stepStart  =  getStepInterpolator().getStepSize();	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  int  stepStart  =  Math.min(y0,  stepStart);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  stepStart  =  Math.min(y0,  stepStart);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  stepStart  =  Math.min(y0,  stepStart);	      int    stepStart    =    Math.min(stepStart,    y0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  y0  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  stepStart  =  Math.min(stepStart,  y0  +  1);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  stepStart  =  Math.min(stepStart,  y0  +  1);	      int    stepStart    =    Math.min(stepStart,    y0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  stepStart  =  Math.min(stepStart,  error);	      int    stepStart    =    Math.min(stepStart,    y0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  y0  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  stepStart  =  Math.min(stepStart,  y0  -  1);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  stepStart  =  Math.min(stepStart,  y0  -  1);	      int    stepStart    =    Math.min(stepStart,    y0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  t0  =  interpolator.getCurrentStructure();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  interpolator.getCurrentStructure();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  interpolator.getCurrentStructure();	      t0    =    t.getCurrentStructure();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  t0  =  t.nextStructure();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.nextStructure();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.nextStructure();	      t0    =    t.getCurrentStructure();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  t0  =  t.next();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.next();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.next();	      t0    =    t.getCurrentStructure();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  t0  =  interpolator.getCurrentNodePointer();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  interpolator.getCurrentNodePointer();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  interpolator.getCurrentNodePointer();	      t0    =    t.getCurrentNodePointer();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
19	[BUG]  [BUGGY]  t0  =  t.getCurrentScalePointer();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.getCurrentScalePointer();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.getCurrentScalePointer();	      t0    =    t.getCurrentNodePointer();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
20	[BUG]  [BUGGY]  t0  =  t.getCurrentNodePointer()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.getCurrentNodePointer()  +  1;  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.getCurrentNodePointer()  +  1;	      t0    =    t.getCurrentNodePointer();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
21	[BUG]  [BUGGY]  double  error  =  t0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  error  =  t0;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  error  =  t0;	  double    error    =    -1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  k);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  k);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  k);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    k);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  k);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  k);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  k);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    k);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y0,  k);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y0,  k);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y0,  k);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    k);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
25	[BUG]  [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  k);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  k);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  k);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    k);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  double[][]  scale  =  interpolator.getScale();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double[][]  scale  =  interpolator.getScale();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double[][]  scale  =  interpolator.getScale();	      double[][]    scale    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  double[][]  scale  =  interface.getScale();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double[][]  scale  =  interface.getScale();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double[][]  scale  =  interface.getScale();	      double[][]    scale    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  [][]  scale  =  handler.getScale();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  [][]  scale  =  handler.getScale();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	[][]  scale  =  handler.getScale();	      double[][]    scale    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  t0  =  t.getCurrentTolerance()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.getCurrentTolerance()  +  1;  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.getCurrentTolerance()  +  1;	      t0    =    t.getCurrentTolerance();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  t0  =  interpolator.getCurrentTolerance();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  interpolator.getCurrentTolerance();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  interpolator.getCurrentTolerance();	      t0    =    t.getCurrentTolerance();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  t0  =  t.nextTolerance();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.nextTolerance();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.nextTolerance();	      t0    =    t.getCurrentTolerance();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  yDotK[0]  =  handler.getMillis();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getMillis();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getMillis();	      yDotK[0]    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  yDotK[0]  =  handler.getImplicitScale();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getImplicitScale();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getImplicitScale();	      yDotK[0]    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  yDotK[0]  =  handler.getDerivatives();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getDerivatives();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getDerivatives();	      yDotK[0]    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  yDotK[0]  =  handler.getStep(t0,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getStep(t0,  t);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getStep(t0,  t);	      yDotK[0]    =    handler.getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  yDotK[0]  =  handler.getStep(t0,  y,  firstTime);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getStep(t0,  y,  firstTime);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getStep(t0,  y,  firstTime);	      yDotK[0]    =    handler.getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  yDotK[0]  =  handler.getStep(t0,  y  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getStep(t0,  y  +  1);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getStep(t0,  y  +  1);	      yDotK[0]    =    handler.getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
39	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
40	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
41	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  yDotK[0],  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  yDotK[0],  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  yDotK[0],  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
42	[BUG]  [BUGGY]  t0  =  interpolator.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  interpolator.getCurrentNode();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  interpolator.getCurrentNode();	      t0    =    t.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
43	[BUG]  [BUGGY]  t0  =  t.nextNode();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.nextNode();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.nextNode();	      t0    =    t.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
44	[BUG]  [BUGGY]  double  error  =  2;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  error  =  2;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  error  =  2;	  double    error    =    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
45	[BUG]  [BUGGY]  Double  error  =  0;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  Double  error  =  0;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	Double  error  =  0;	  double    error    =    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  double  error  =  0x7F;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  error  =  0x7F;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  error  =  0x7F;	  double    error    =    0L;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  int  stepStart  =  getStep(t0,  y  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  stepStart  =  getStep(t0,  y  +  1);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  stepStart  =  getStep(t0,  y  +  1);	      int    stepStart    =    getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
48	[BUG]  [BUGGY]  int  stepStart  =  getStep(interpolator,  y);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  stepStart  =  getStep(interpolator,  y);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  stepStart  =  getStep(interpolator,  y);	      int    stepStart    =    getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
49	[BUG]  [BUGGY]  int  stepStart  =  getStep(t0,  y)-  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  stepStart  =  getStep(t0,  y)-  1;  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  stepStart  =  getStep(t0,  y)-  1;	      int    stepStart    =    getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
50	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  interpolator.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  interpolator.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(a!=  null)  {  for(int  y  =  0;  y  <  interpolator.length;  y++)  {  computeDerivatives(y,  y[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  y[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  interfaces.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  interfaces.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(a!=  null)  {  for(int  y  =  0;  y  <  interfaces.length;  y++)  {  computeDerivatives(y,  y[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  interface.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  interface.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(a!=  null)  {  for(int  y  =  0;  y  <  interface.length;  y++)  {  computeDerivatives(y,  y[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y0,  k);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y0,  k);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y0,  k);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    k);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  k);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  k);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  k);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    k);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  k);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  k);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  k);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    k);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  k);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  k);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  k);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    k);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  t0  =  t.getCurrentStep();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.getCurrentStep();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.getCurrentStep();	      t0    =    t.getCurrentStructure();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
59	[BUG]  [BUGGY]  yDotK[0]  =  handler.getStep(t0,  y,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getStep(t0,  y,  vecAbsoluteTolerance);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getStep(t0,  y,  vecAbsoluteTolerance);	      yDotK[0]    =    handler.getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
60	[BUG]  [BUGGY]  yDotK[0]  =  handler.getStep(t0,  yTmp);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getStep(t0,  yTmp);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getStep(t0,  yTmp);	      yDotK[0]    =    handler.getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
61	[BUG]  [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
62	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
63	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(vecAbsoluteTolerance  ==  null)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
64	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
65	[BUG]  [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y1,  t[0]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y1,  t[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y1,  t[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
66	[BUG]  [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y,  t[0]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y,  t[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y,  t[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
67	[BUG]  [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y0,  t[0]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y0,  t[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y0,  t[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
68	[BUG]  [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y2,  t[0]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y2,  t[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y2,  t[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
69	[BUG]  [BUGGY]  t0  =  t.getCurrentSecond();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.getCurrentSecond();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.getCurrentSecond();	      t0    =    t.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  int  stepStart  =  getStep(interpolator,  y0);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  stepStart  =  getStep(interpolator,  y0);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  stepStart  =  getStep(interpolator,  y0);	      int    stepStart    =    getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
71	[BUG]  [BUGGY]  double  error  =  0xFFFF  |  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  error  =  0xFFFF  |  1;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  error  =  0xFFFF  |  1;	  double    error    =    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
72	[BUG]  [BUGGY]  yDotK[0]  =  handler.getSlope();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getSlope();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getSlope();	      yDotK[0]    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  yDotK[0]  =  handler.getStep();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getStep();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getStep();	      yDotK[0]    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  yDotK[0]  =  handler.getTick();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getTick();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getTick();	      yDotK[0]    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  double  error  =  0.0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  error  =  0.0;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  error  =  0.0;	  double    error    =    -1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y[0]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
77	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  y[1]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  y[1]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  y[1]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y1,  y[0]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y1,  y[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y1,  y[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.getScale();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.getScale();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double[][]  scale  =  vecAbsoluteTolerance.getScale();	      double[][]    scale    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
80	[BUG]  [BUGGY]  double[][]  scale  =  handler.getScale(t0);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double[][]  scale  =  handler.getScale(t0);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double[][]  scale  =  handler.getScale(t0);	      double[][]    scale    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
81	[BUG]  [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
82	[BUG]  [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y2,  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
84	[BUG]  [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y0,  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y0,  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y0,  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
85	[BUG]  [BUGGY]  if(t0!=  null)  {  for(int  y  =  0;  y  <  t.length;  y++)  {  computeDerivatives(t0,  y,  t[0]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(t0!=  null)  {  for(int  y  =  0;  y  <  t.length;  y++)  {  computeDerivatives(t0,  y,  t[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(t0!=  null)  {  for(int  y  =  0;  y  <  t.length;  y++)  {  computeDerivatives(t0,  y,  t[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
86	[BUG]  [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  t.length;  y++)  {  computeDerivatives(t0,  y,  t[0]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(lastStep)  {  for(int  y  =  0;  y  <  t.length;  y++)  {  computeDerivatives(t0,  y,  t[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(lastStep)  {  for(int  y  =  0;  y  <  t.length;  y++)  {  computeDerivatives(t0,  y,  t[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y0,    t[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
87	[BUG]  [BUGGY]  t0  =  t.getStructure();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.getStructure();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.getStructure();	      t0    =    t.getCurrentStructure();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
88	[BUG]  [BUGGY]  yDotK[0]  =  handler.getStep(t0,  y,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getStep(t0,  y,  t);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getStep(t0,  y,  t);	      yDotK[0]    =    handler.getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
89	[BUG]  [BUGGY]  yDotK[0]  =  handler.getShape();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  yDotK[0]  =  handler.getShape();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	yDotK[0]  =  handler.getShape();	      yDotK[0]    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
90	[BUG]  [BUGGY]  double[][]  scale  =  equations.getScale();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double[][]  scale  =  equations.getScale();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double[][]  scale  =  equations.getScale();	      double[][]    scale    =    handler.getScale();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
91	[BUG]  [BUGGY]  if(t0!=  null)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(t0!=  null)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(t0!=  null)  {  for(int  y  =  0;  y  <  y.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
92	[BUG]  [BUGGY]  if(handler!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(handler!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(handler!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
93	[BUG]  [BUGGY]  if(handler!=  null)  {  for(int  y  =  0;  y  <  t.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(handler!=  null)  {  for(int  y  =  0;  y  <  t.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(handler!=  null)  {  for(int  y  =  0;  y  <  t.length;  y++)  {  computeDerivatives(t0,  y[0],  scale);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    y.length;    y++)    {    computeDerivatives(t0,    y[0],    scale);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
94	[BUG]  [BUGGY]  double  error  =(t0  <  a.length)?  t0  :  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  error  =(t0  <  a.length)?  t0  :  1;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  error  =(t0  <  a.length)?  t0  :  1;	  double    error    =    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
95	[BUG]  [BUGGY]  double  error  =(t0  <  t.length)?  t0  :  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  error  =(t0  <  t.length)?  t0  :  1;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  error  =(t0  <  t.length)?  t0  :  1;	  double    error    =    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  double  error  =(t0  <  t.length)?  1  :  0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  error  =(t0  <  t.length)?  1  :  0;  [BUGGY]    for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  error  =(t0  <  t.length)?  1  :  0;	  double    error    =    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
97	[BUG]  [BUGGY]  t0  =  t.getCurrentSecondPointer();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.getCurrentSecondPointer();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.getCurrentSecondPointer();	      t0    =    t.getCurrentNodePointer();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
98	[BUG]  [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y,  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
99	[BUG]  [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  v[k]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  v[k]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(s.length  ==  0)  {  for(int  k  =  0;  k  <  s.length;  k++)  {  computeDerivatives(t0,  y1,  v[k]);  }	      if(interpolator!=    null)    {    for(int    k    =    0;    k    <    s.length;    k++)    {    computeDerivatives(t0,    y0,    v[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
100	[BUG]  [BUGGY]  if(t0  ==  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(t0  ==  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  y[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(t0  ==  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  y[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
101	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(x,  y[0]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(x,  y[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(x,  y[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
102	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  b[0]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  b[0]);  }  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	if(a!=  null)  {  for(int  y  =  0;  y  <  a.length;  y++)  {  computeDerivatives(y,  b[0]);  }	      if(interpolator!=    null)    {    for(int    y    =    0;    y    <    a.length;    y++)    {    computeDerivatives(y,    y[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
103	[BUG]  [BUGGY]  t0  =  t.getCurrentScale();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  t0  =  t.getCurrentScale();  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	t0  =  t.getCurrentScale();	      t0    =    t.getCurrentTolerance();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
104	[BUG]  [BUGGY]  double  stepStart  =  getStep(t0,  y);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  double  stepStart  =  getStep(t0,  y);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	double  stepStart  =  getStep(t0,  y);	      int    stepStart    =    getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
105	[BUG]  [BUGGY]  int  stepStart  =  getStep(t0,  y1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  interpolator.shift();    [BUGGY]  int  stepStart  =  getStep(t0,  y1);  [BUGGY]    double  error  =  0;  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	int  stepStart  =  getStep(t0,  y1);	      int    stepStart    =    getStep(t0,    y);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
