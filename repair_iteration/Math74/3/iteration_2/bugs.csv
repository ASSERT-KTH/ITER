bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(t0,  error);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStep(t0,  error);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStep(t0,  error);	      Integer    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	13	None	replace
2	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(y,  t0);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStep(y,  t0);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStep(y,  t0);	      Integer    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	13	None	replace
3	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(yTmp,  t0);  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStep(yTmp,  t0);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStep(yTmp,  t0);	      Integer    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	13	None	replace
4	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(y0,  t);  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStep(y0,  t);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStep(y0,  t);	      Integer    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	13	None	replace
5	[BUG]  [BUGGY]  hNew  =  Math.abs(yTmp.length  -  1);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.abs(yTmp.length  -  1);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.abs(yTmp.length  -  1);	      hNew    =    Math.abs(yTmp.length);    	non-compiled	[CE]  not  a  statement	18	None	replace
6	[BUG]  [BUGGY]  hNew  =  Math.abs(hNew.length);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.abs(hNew.length);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.abs(hNew.length);	      hNew    =    Math.abs(yTmp.length);    	non-compiled	[CE]  not  a  statement	18	None	replace
7	[BUG]  [BUGGY]  hNew  =  Math.abs(yTmp.length  +  1);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.abs(yTmp.length  +  1);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.abs(yTmp.length  +  1);	      hNew    =    Math.abs(yTmp.length);    	non-compiled	[CE]  not  a  statement	18	None	replace
8	[BUG]  [BUGGY]  int  stepSize  =  b[l][j]  *  yTmp[l][j];  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b[l][j]  *  yTmp[l][j];  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b[l][j]  *  yTmp[l][j];	      int    stepSize    =    b[l][j]    *    yDotK[l][j];    	non-compiled	[CE]  not  a  statement	1	None	replace
9	[BUG]  [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][j]  +  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][j]  +  1;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b[l][j]  *  yDotK[l][j]  +  1;	      int    stepSize    =    b[l][j]    *    yDotK[l][j];    	non-compiled	[CE]  not  a  statement	1	None	replace
10	[BUG]  [BUGGY]  double  stepSize  =  b[l][j]  *  yDotK[l][j].doubleValue();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  double  stepSize  =  b[l][j]  *  yDotK[l][j].doubleValue();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	double  stepSize  =  b[l][j]  *  yDotK[l][j].doubleValue();	      int    stepSize    =    b[l][j]    *    yDotK[l][j].doubleValue();    	non-compiled	[CE]  not  a  statement	2	None	replace
11	[BUG]  [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][j].doubleValue()  +  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][j].doubleValue()  +  1;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b[l][j]  *  yDotK[l][j].doubleValue()  +  1;	      int    stepSize    =    b[l][j]    *    yDotK[l][j].doubleValue();    	non-compiled	[CE]  not  a  statement	2	None	replace
12	[BUG]  [BUGGY]  int  stepSize  =  b[l][j]  *  yTmp[l][j].doubleValue();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b[l][j]  *  yTmp[l][j].doubleValue();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b[l][j]  *  yTmp[l][j].doubleValue();	      int    stepSize    =    b[l][j]    *    yDotK[l][j].doubleValue();    	non-compiled	[CE]  not  a  statement	2	None	replace
13	[BUG]  [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][0]  +  error;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][0]  +  error;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b[l][j]  *  yDotK[l][0]  +  error;	      int    stepSize    =    b[l][j]    *    yDotK[l][0];    	non-compiled	[CE]  not  a  statement	4	None	replace
14	[BUG]  [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][1];  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][1];  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b[l][j]  *  yDotK[l][1];	      int    stepSize    =    b[l][j]    *    yDotK[l][0];    	non-compiled	[CE]  not  a  statement	4	None	replace
15	[BUG]  [BUGGY]  int  stepSize  =  b[l][j]  *  yTmp[l][0];  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b[l][j]  *  yTmp[l][0];  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b[l][j]  *  yTmp[l][0];	      int    stepSize    =    b[l][j]    *    yDotK[l][0];    	non-compiled	[CE]  not  a  statement	4	None	replace
16	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  yTmp.length);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.max(hNew,  yTmp.length);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.max(hNew,  yTmp.length);	      hNew    =    Math.max(t0,    yTmp.length);    	non-compiled	[CE]  not  a  statement	16	None	replace
17	[BUG]  [BUGGY]  hNew  =  Math.max(error,  yTmp.length);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.max(error,  yTmp.length);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.max(error,  yTmp.length);	      hNew    =    Math.max(t0,    yTmp.length);    	non-compiled	[CE]  not  a  statement	16	None	replace
18	[BUG]  [BUGGY]  hNew  =  Math.max(t0,  error,  yTmp.length);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.max(t0,  error,  yTmp.length);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.max(t0,  error,  yTmp.length);	      hNew    =    Math.max(t0,    yTmp.length);    	non-compiled	[CE]  not  a  statement	16	None	replace
19	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0.length);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.max(hNew,  t0.length);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.max(hNew,  t0.length);	      hNew    =    Math.max(t0,    yTmp.length);    	non-compiled	[CE]  not  a  statement	16	None	replace
20	[BUG]  [BUGGY]  int  stepSize  =  getStep(t0,  error);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  getStep(t0,  error);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  getStep(t0,  error);	      int    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	19	None	replace
21	[BUG]  [BUGGY]  int  stepSize  =  getStep(y,  t0);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  getStep(y,  t0);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  getStep(y,  t0);	      int    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	19	None	replace
22	[BUG]  [BUGGY]  int  stepSize  =  getStep(yTmp,  t0);  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  getStep(yTmp,  t0);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  getStep(yTmp,  t0);	      int    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	19	None	replace
23	[BUG]  [BUGGY]  int  stepSize  =  getStep(t0,  yTmp,  error);  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  getStep(t0,  yTmp,  error);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  getStep(t0,  yTmp,  error);	      int    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	19	None	replace
24	[BUG]  [BUGGY]  interpolator.store(t0  +  error);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.store(t0  +  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.store(t0  +  error);	  interpolator.store(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	20	None	replace
25	[BUG]  [BUGGY]  interpolator.store(t0  /  stepSize);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.store(t0  /  stepSize);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.store(t0  /  stepSize);	  interpolator.store(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	20	None	replace
26	[BUG]  [BUGGY]  interpolator.store(t0,  error);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.store(t0,  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.store(t0,  error);	  interpolator.store(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	20	None	replace
27	[BUG]  [BUGGY]  int  stepSize  =  error.doubleValue();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  error.doubleValue();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  error.doubleValue();	      int    stepSize    =    t0.doubleValue();    	non-compiled	[CE]  not  a  statement	15	None	replace
28	[BUG]  [BUGGY]  double  stepSize  =  t0.doubleValue();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  double  stepSize  =  t0.doubleValue();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	double  stepSize  =  t0.doubleValue();	      int    stepSize    =    t0.doubleValue();    	non-compiled	[CE]  not  a  statement	15	None	replace
29	[BUG]  [BUGGY]  int  stepSize  =  y0.doubleValue();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  y0.doubleValue();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  y0.doubleValue();	      int    stepSize    =    t0.doubleValue();    	non-compiled	[CE]  not  a  statement	15	None	replace
30	[BUG]  [BUGGY]  int  stepSize  =  y.doubleValue();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  y.doubleValue();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  y.doubleValue();	      int    stepSize    =    t0.doubleValue();    	non-compiled	[CE]  not  a  statement	15	None	replace
31	[BUG]  [BUGGY]  int  stepSize  =(int)Math.pow(10,  error  -  1);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =(int)Math.pow(10,  error  -  1);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =(int)Math.pow(10,  error  -  1);	      int    stepSize    =(int)Math.pow(10,    error);    	non-compiled	[CE]  not  a  statement	5	None	replace
32	[BUG]  [BUGGY]  int  stepSize  =(int)Math.pow(10,  error  +  1);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =(int)Math.pow(10,  error  +  1);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =(int)Math.pow(10,  error  +  1);	      int    stepSize    =(int)Math.pow(10,    error);    	non-compiled	[CE]  not  a  statement	5	None	replace
33	[BUG]  [BUGGY]  double  stepSize  =(double)Math.pow(10,  error);  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  double  stepSize  =(double)Math.pow(10,  error);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	double  stepSize  =(double)Math.pow(10,  error);	      int    stepSize    =(int)Math.pow(10,    error);    	non-compiled	[CE]  not  a  statement	5	None	replace
34	[BUG]  [BUGGY]  interpolator.storeTime(error  +  1);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(error  +  1);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(error  +  1);	  interpolator.storeTime(error    +    stepSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
35	[BUG]  [BUGGY]  interpolator.storeTime(error  +  stepSize,  sum);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(error  +  stepSize,  sum);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(error  +  stepSize,  sum);	  interpolator.storeTime(error    +    stepSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
36	[BUG]  [BUGGY]  interpolator.storeTime(error  +  stepStart);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(error  +  stepStart);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(error  +  stepStart);	  interpolator.storeTime(error    +    stepSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
37	[BUG]  [BUGGY]  Integer  stepSize  =  getStepInterpolator().getRangeSize();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStepInterpolator().getRangeSize();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStepInterpolator().getRangeSize();	      Integer    stepSize    =    getStepInterpolator().getStepSize();    	non-compiled	[CE]  not  a  statement	12	None	replace
38	[BUG]  [BUGGY]  Integer  stepSize  =  getStepInterpolator().getMillis();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStepInterpolator().getMillis();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStepInterpolator().getMillis();	      Integer    stepSize    =    getStepInterpolator().getStepSize();    	non-compiled	[CE]  not  a  statement	12	None	replace
39	[BUG]  [BUGGY]  Integer  stepSize  =  getStepInterpolator().getMinimumSize();  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStepInterpolator().getMinimumSize();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStepInterpolator().getMinimumSize();	      Integer    stepSize    =    getStepInterpolator().getStepSize();    	non-compiled	[CE]  not  a  statement	12	None	replace
40	[BUG]  [BUGGY]  Integer  stepSize  =  getStepInterpolator().getStepSize()  +  1;  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStepInterpolator().getStepSize()  +  1;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStepInterpolator().getStepSize()  +  1;	      Integer    stepSize    =    getStepInterpolator().getStepSize();    	non-compiled	[CE]  not  a  statement	12	None	replace
41	[BUG]  [BUGGY]  int  stepSize  =  y0.getStep();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  y0.getStep();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  y0.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  not  a  statement	17	None	replace
42	[BUG]  [BUGGY]  int  stepSize  =  y.getStep();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  y.getStep();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  y.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  not  a  statement	17	None	replace
43	[BUG]  [BUGGY]  int  stepSize  =  rki.getStep();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  rki.getStep();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  rki.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  not  a  statement	17	None	replace
44	[BUG]  [BUGGY]  int  stepSize  =  b.getStep();  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b.getStep();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  not  a  statement	17	None	replace
45	[BUG]  [BUGGY]  int  stepSize  =  manager.getEventTime();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  manager.getEventTime();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  manager.getEventTime();	      int    stepSize    =    handler.getEventTime();    	non-compiled	[CE]  not  a  statement	10	None	replace
46	[BUG]  [BUGGY]  int  stepSize  =  handler.getEventTime()  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  handler.getEventTime()  -  1;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  handler.getEventTime()  -  1;	      int    stepSize    =    handler.getEventTime();    	non-compiled	[CE]  not  a  statement	10	None	replace
47	[BUG]  [BUGGY]  int  stepSize  =  handler.getEventTime()  -  error;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  handler.getEventTime()  -  error;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  handler.getEventTime()  -  error;	      int    stepSize    =    handler.getEventTime();    	non-compiled	[CE]  not  a  statement	10	None	replace
48	[BUG]  [BUGGY]  Integer  stepSize  =  getStepInterpolator().getEventTime()  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStepInterpolator().getEventTime()  -  1;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStepInterpolator().getEventTime()  -  1;	      Integer    stepSize    =    getStepInterpolator().getEventTime();    	non-compiled	[CE]  not  a  statement	11	None	replace
49	[BUG]  [BUGGY]  Integer  stepSize  =  getStepInterpolator().getEventTime()  +  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStepInterpolator().getEventTime()  +  1;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStepInterpolator().getEventTime()  +  1;	      Integer    stepSize    =    getStepInterpolator().getEventTime();    	non-compiled	[CE]  not  a  statement	11	None	replace
50	[BUG]  [BUGGY]  interpolator.storeTime(t0  +  error);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(t0  +  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(t0  +  error);	  interpolator.storeTime(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	6	None	replace
51	[BUG]  [BUGGY]  interpolator.storeTime(t0,  error);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(t0,  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(t0,  error);	  interpolator.storeTime(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	6	None	replace
52	[BUG]  [BUGGY]  int  stepSize  =  b[l][j]  *  yTmp[l][j]  +  error;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b[l][j]  *  yTmp[l][j]  +  error;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b[l][j]  *  yTmp[l][j]  +  error;	      int    stepSize    =    b[l][j]    *    yDotK[l][j]    +    error;    	non-compiled	[CE]  not  a  statement	3	None	replace
53	[BUG]  [BUGGY]  double  stepSize  =  b[l][j]  *  yDotK[l][j]  +  error;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  double  stepSize  =  b[l][j]  *  yDotK[l][j]  +  error;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	double  stepSize  =  b[l][j]  *  yDotK[l][j]  +  error;	      int    stepSize    =    b[l][j]    *    yDotK[l][j]    +    error;    	non-compiled	[CE]  not  a  statement	3	None	replace
54	[BUG]  [BUGGY]  interpolator.storeTime(errors[t0  +  stepStart]);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(errors[t0  +  stepStart]);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(errors[t0  +  stepStart]);	  interpolator.storeTime(errors[t0    +    stepSize]);    	non-compiled	[CE]  not  a  statement	14	None	replace
55	[BUG]  [BUGGY]  interpolator.storeTime(errors[t0  +  stepSize],  hNew);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(errors[t0  +  stepSize],  hNew);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(errors[t0  +  stepSize],  hNew);	  interpolator.storeTime(errors[t0    +    stepSize]);    	non-compiled	[CE]  not  a  statement	14	None	replace
56	[BUG]  [BUGGY]  interpolator.storeTime(errors[t0  +  stepSize],  error);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(errors[t0  +  stepSize],  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(errors[t0  +  stepSize],  error);	  interpolator.storeTime(errors[t0    +    stepSize]);    	non-compiled	[CE]  not  a  statement	14	None	replace
57	[BUG]  [BUGGY]  int  stepSize  =  interface.getStepSize();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  interface.getStepSize();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  interface.getStepSize();	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  not  a  statement	9	None	replace
58	[BUG]  [BUGGY]  int  stepSize  =  interpolator.getStepSize();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  interpolator.getStepSize();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  interpolator.getStepSize();	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  not  a  statement	9	None	replace
59	[BUG]  [BUGGY]  int  stepSize  =  handler.getStepSize()  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  handler.getStepSize()  -  1;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  handler.getStepSize()  -  1;	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  not  a  statement	9	None	replace
60	[BUG]  [BUGGY]  interpolator.storeTime(j  +  1);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(j  +  1);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(j  +  1);	  interpolator.storeTime(j    +    stepSize);    	non-compiled	[CE]  not  a  statement	8	None	replace
61	[BUG]  [BUGGY]  interpolator.storeTime(j  +  error);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(j  +  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(j  +  error);	  interpolator.storeTime(j    +    stepSize);    	non-compiled	[CE]  not  a  statement	8	None	replace
62	[BUG]  [BUGGY]  interpolator.storeTime(j  +  k);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(j  +  k);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(j  +  k);	  interpolator.storeTime(j    +    stepSize);    	non-compiled	[CE]  not  a  statement	8	None	replace
63	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  yTmp.length);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.min(hNew,  yTmp.length);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.min(hNew,  yTmp.length);	      hNew    =    Math.max(t0,    yTmp.length);    	non-compiled	[CE]  not  a  statement	16	None	replace
64	[BUG]  [BUGGY]  interpolator.store(t0  -  error);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.store(t0  -  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.store(t0  -  error);	  interpolator.store(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	20	None	replace
65	[BUG]  [BUGGY]  interpolator.add(t0  +  error);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.add(t0  +  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.add(t0  +  error);	  interpolator.store(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	20	None	replace
66	[BUG]  [BUGGY]  int  stepSize  =  managers.getEventTime();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  managers.getEventTime();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  managers.getEventTime();	      int    stepSize    =    handler.getEventTime();    	non-compiled	[CE]  not  a  statement	10	None	replace
67	[BUG]  [BUGGY]  int  stepSize  =  y[l][j]  *  yDotK[l][0];  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  y[l][j]  *  yDotK[l][0];  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  y[l][j]  *  yDotK[l][0];	      int    stepSize    =    b[l][j]    *    yDotK[l][0];    	non-compiled	[CE]  not  a  statement	4	None	replace
68	[BUG]  [BUGGY]  interpolator.storeTime(error,  t0  +  stepSize);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(error,  t0  +  stepSize);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(error,  t0  +  stepSize);	  interpolator.storeTime(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	6	None	replace
69	[BUG]  [BUGGY]  int  stepSize  =  y[l][j]  *  b[l][j];  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  y[l][j]  *  b[l][j];  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  y[l][j]  *  b[l][j];	      int    stepSize    =    b[l][j]    *    yDotK[l][j];    	non-compiled	[CE]  not  a  statement	1	None	replace
70	[BUG]  [BUGGY]  interpolator.storeTime(error,  j  +  stepSize);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(error,  j  +  stepSize);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(error,  j  +  stepSize);	  interpolator.storeTime(j    +    stepSize);    	non-compiled	[CE]  not  a  statement	8	None	replace
71	[BUG]  [BUGGY]  hNew  =  Math.abs(hNew);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.abs(hNew);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.abs(hNew);	      hNew    =    Math.abs(yTmp.length);    	non-compiled	[CE]  not  a  statement	18	None	replace
72	[BUG]  [BUGGY]  hNew  =  Math.abs(error);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.abs(error);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.abs(error);	      hNew    =    Math.abs(yTmp.length);    	non-compiled	[CE]  not  a  statement	18	None	replace
73	[BUG]  [BUGGY]  int  stepSize  =  getStep(error,  yTmp);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  getStep(error,  yTmp);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  getStep(error,  yTmp);	      int    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	19	None	replace
74	[BUG]  [BUGGY]  int  stepSize  =  y[l][j]  *  yDotK[l][j]  +  error;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  y[l][j]  *  yDotK[l][j]  +  error;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  y[l][j]  *  yDotK[l][j]  +  error;	      int    stepSize    =    b[l][j]    *    yDotK[l][j]    +    error;    	non-compiled	[CE]  not  a  statement	3	None	replace
75	[BUG]  [BUGGY]  int  stepSize  =  y[l][j]  *  yDotK[l][j].doubleValue();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  y[l][j]  *  yDotK[l][j].doubleValue();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  y[l][j]  *  yDotK[l][j].doubleValue();	      int    stepSize    =    b[l][j]    *    yDotK[l][j].doubleValue();    	non-compiled	[CE]  not  a  statement	2	None	replace
76	[BUG]  [BUGGY]  int  stepSize  =  handler.getStepSize()  +  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  handler.getStepSize()  +  1;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  handler.getStepSize()  +  1;	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  not  a  statement	9	None	replace
77	[BUG]  [BUGGY]  int  stepSize  =  handler.getStepSize()  +  error;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  handler.getStepSize()  +  error;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  handler.getStepSize()  +  error;	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  not  a  statement	9	None	replace
78	[BUG]  [BUGGY]  int  stepSize  =(int)Math.pow(10,  error  +  2);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =(int)Math.pow(10,  error  +  2);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =(int)Math.pow(10,  error  +  2);	      int    stepSize    =(int)Math.pow(10,    error);    	non-compiled	[CE]  not  a  statement	5	None	replace
79	[BUG]  [BUGGY]  interpolator.storeTime(errors[t0  +  error]);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(errors[t0  +  error]);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(errors[t0  +  error]);	  interpolator.storeTime(errors[t0    +    stepSize]);    	non-compiled	[CE]  not  a  statement	14	None	replace
80	[BUG]  [BUGGY]  interpolator.storeTime(error  /  stepSize);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(error  /  stepSize);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(error  /  stepSize);	  interpolator.storeTime(error    +    stepSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
81	[BUG]  [BUGGY]  interpolator.storeTime(error  +  hNew);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(error  +  hNew);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(error  +  hNew);	  interpolator.storeTime(error    +    stepSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
82	[BUG]  [BUGGY]  Integer  stepSize  =  getStepInterpolator().getStepStart();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStepInterpolator().getStepStart();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStepInterpolator().getStepStart();	      Integer    stepSize    =    getStepInterpolator().getStepSize();    	non-compiled	[CE]  not  a  statement	12	None	replace
83	[BUG]  [BUGGY]  int  stepSize  =  handler.getStep();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  handler.getStep();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  handler.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  not  a  statement	17	None	replace
84	[BUG]  [BUGGY]  int  stepSize  =  interfaces.getStep();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  interfaces.getStep();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  interfaces.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  not  a  statement	17	None	replace
85	[BUG]  [BUGGY]  int  stepSize  =  interface.getStep();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  interface.getStep();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  interface.getStep();	      int    stepSize    =    t0.getStep();    	non-compiled	[CE]  not  a  statement	17	None	replace
86	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(error,  yTmp);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStep(error,  yTmp);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStep(error,  yTmp);	      Integer    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	13	None	replace
87	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(t0,  yTmp,  error);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStep(t0,  yTmp,  error);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStep(t0,  yTmp,  error);	      Integer    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	13	None	replace
88	[BUG]  [BUGGY]  Integer  stepSize  =  getStepInterpolator().getStepSize()  -  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStepInterpolator().getStepSize()  -  1;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStepInterpolator().getStepSize()  -  1;	      Integer    stepSize    =    getStepInterpolator().getStepSize();    	non-compiled	[CE]  not  a  statement	12	None	replace
89	[BUG]  [BUGGY]  double  stepSize  =  b[l][j]  *  yDotK[l][0];  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  double  stepSize  =  b[l][j]  *  yDotK[l][0];  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	double  stepSize  =  b[l][j]  *  yDotK[l][0];	      int    stepSize    =    b[l][j]    *    yDotK[l][0];    	non-compiled	[CE]  not  a  statement	4	None	replace
90	[BUG]  [BUGGY]  int  stepSize  =  getStep(stepStart,  yTmp);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  getStep(stepStart,  yTmp);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  getStep(stepStart,  yTmp);	      int    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	19	None	replace
91	[BUG]  [BUGGY]  int  stepSize  =  getStep(y0,  t);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  getStep(y0,  t);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  getStep(y0,  t);	      int    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	19	None	replace
92	[BUG]  [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][j]  +  t0;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  b[l][j]  *  yDotK[l][j]  +  t0;  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  b[l][j]  *  yDotK[l][j]  +  t0;	      int    stepSize    =    b[l][j]    *    yDotK[l][j]    +    error;    	non-compiled	[CE]  not  a  statement	3	None	replace
93	[BUG]  [BUGGY]  Integer  stepSize  =  manager.getEventTime();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  manager.getEventTime();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  manager.getEventTime();	      Integer    stepSize    =    getStepInterpolator().getEventTime();    	non-compiled	[CE]  not  a  statement	11	None	replace
94	[BUG]  [BUGGY]  interpolator.storeTime(error  +  t0);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(error  +  t0);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(error  +  t0);	  interpolator.storeTime(error    +    stepSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
95	[BUG]  [BUGGY]  interpolator.store(t0  *  stepSize);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.store(t0  *  stepSize);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.store(t0  *  stepSize);	  interpolator.store(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	20	None	replace
96	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t.length);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  hNew  =  Math.max(hNew,  t.length);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	hNew  =  Math.max(hNew,  t.length);	      hNew    =    Math.max(t0,    yTmp.length);    	non-compiled	[CE]  not  a  statement	16	None	replace
97	[BUG]  [BUGGY]  interpolator.storeTime(a,  t0  +  stepSize]);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(a,  t0  +  stepSize]);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(a,  t0  +  stepSize]);	  interpolator.storeTime(errors[t0    +    stepSize]);    	non-compiled	[CE]  not  a  statement	14	None	replace
98	[BUG]  [BUGGY]  interpolator.storeTime(a,  error[t0  +  stepSize]);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(a,  error[t0  +  stepSize]);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(a,  error[t0  +  stepSize]);	  interpolator.storeTime(errors[t0    +    stepSize]);    	non-compiled	[CE]  not  a  statement	14	None	replace
99	[BUG]  [BUGGY]  Integer  stepSize  =  getStep(stepStart,  yTmp);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  Integer  stepSize  =  getStep(stepStart,  yTmp);  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	Integer  stepSize  =  getStep(stepStart,  yTmp);	      Integer    stepSize    =    getStep(t0,    yTmp);    	non-compiled	[CE]  not  a  statement	13	None	replace
100	[BUG]  [BUGGY]  int  stepSize  =  t.doubleValue();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  int  stepSize  =  t.doubleValue();  [BUGGY]    interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	int  stepSize  =  t.doubleValue();	      int    stepSize    =    t0.doubleValue();    	non-compiled	[CE]  not  a  statement	15	None	replace
101	[BUG]  [BUGGY]  interpolator.storeTime(t0  /  stepSize);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(t0  /  stepSize);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(t0  /  stepSize);	  interpolator.storeTime(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	6	None	replace
102	[BUG]  [BUGGY]  interpolator.storeTime(t0  *  stepSize);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {      [BUGGY]  interpolator.storeTime(t0  *  stepSize);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(t0  *  stepSize);	  interpolator.storeTime(t0    +    stepSize);    	non-compiled	[CE]  not  a  statement	6	None	replace
