projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.getStepInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.getInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.interpolator;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=prototype;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,yTmp,yDotK,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,yTmp,yDotK,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,yTmp,yDotK,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,t0,yDotK,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,yTmp,yDotK,error);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()&&!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolatorr
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolatorr
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolatorrki
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,y
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,yTmp,
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.get
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.copy();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.getInstance();
