projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.getStepInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.getInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.interpolator;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=prototype;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,yTmp,yDotK,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,yTmp,yDotK,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,yTmp,yDotK,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,t0,yDotK,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,yTmp,yDotK,error);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()&&!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolatorr
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolatorr
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolatorrki
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,y
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,yTmp,
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.get
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.copy();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.getInstance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=newRungeKuttaStepInterpolator(rki);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=(rki!=null)?prototype:rki.getStepInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,y0,yDotK,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,t0,yDotK,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,y1,yDotK,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,y0,yDotK,error);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,t0,yDotK,error);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,y0,yDotK,error);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.copy();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.copy();}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,y0,yDotK,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,t0,yDotK,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,y0,yDotK,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,y0,yDotK,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,t0,yDotK,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=prototype.getInstance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215Interpolatorinterpolator=prototype.getInstance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,yTmp,
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,yDotK,
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(interpolator==null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,y
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(interpolator!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,y
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(interpolator==null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(interpolator!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.get
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.isEmpty()){finalRungeKutta
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki==null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolatorr
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(prototype!=null){if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()&&!eventsHandlersManager.isEmpty()){finalRungeKutta
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki==null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()&&!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolatorr
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=prototype.getStepInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215Interpolatorinterpolator=prototype.getStepInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=prototype.getInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215Interpolatorinterpolator=prototype.getInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,yTmp,yDotK,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,yDotK,t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,y0,t,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,yTmp,a,yDotK);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=prototype.interpolator;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()&&!eventsHandlersManager.isEmpty()){finalRungeK
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.createInterpolator(t0,t0,yDotK);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215Interpolatorinterpolator=rki.getInterpolator();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=rki.getInterpolator(this);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,yTmp,yDotK,interpolator);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){interpolator[k][k]=rki.getDummyStepInterpolator();}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.reinitialize(this,yTmp,a,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,t0,yDotK,back);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finalRungeKuttaStepInterpolatorrki=prototype.copy();rki.reinitialize(this,
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215interpolator=(rki!=null)?prototype:rki.next();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finaldouble[][]a=rki.getScale();System.arraycopy(y,0,interpolator,
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finaldouble[][]a=rki.getScale();if(a.length>0){returnnew
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finaldouble[][]a=rki.getDummyStepInterpolator();if(a.length>0){returnnew
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){finaldouble[][]a=rki.getScale();System.arraycopy(y,0,interpolator,y
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()&&!eventsHandlersManager.isEmpty()){finalRunge
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()&&!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolator
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,ytmp,yDotK,a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,t0,yDotK,error);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.isEmpty()){finalRungeK
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.isEmpty()){finalRunge
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215if(rki!=null){for(intk=0;k<scalAbsoluteTolerance;k++){if(!requiresDenseOutput()||!eventsHandlersManager.isEmpty()){finalRungeKuttaStepInterpolator
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java215rki.initialize(this,y0,t0,forward);
