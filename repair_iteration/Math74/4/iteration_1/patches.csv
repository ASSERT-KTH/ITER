bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(error);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(error);	      Integer    hNew    =    interpolator.getStep(t0);    	non-compiled	[CE]  not  a  statement	10	None	replace
2	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(j);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(j);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(j);	      Integer    hNew    =    interpolator.getStep(t0);    	non-compiled	[CE]  not  a  statement	10	None	replace
3	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(0);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(0);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(0);	      Integer    hNew    =    interpolator.getStep(t0);    	non-compiled	[CE]  not  a  statement	10	None	replace
4	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getHalfday();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getHalfday();  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getHalfday();	      Integer    hNew    =    interpolator.getStep(t0);    	non-compiled	[CE]  not  a  statement	10	None	replace
5	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getEventTime()  -  error;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getEventTime()  -  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getEventTime()  -  error;	      int    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	1	None	replace
6	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getEventTime()  -  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getEventTime()  -  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getEventTime()  -  1;	      int    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	1	None	replace
7	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getEventTime()  +  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getEventTime()  +  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getEventTime()  +  1;	      int    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	1	None	replace
8	[BUG]  [BUGGY]  if(interpolator.evaluateStep(stepStart))  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(interpolator.evaluateStep(stepStart))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(interpolator.evaluateStep(stepStart))  {	  if(manager.evaluateStep(stepStart))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
9	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(stepStart))  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(!interpolator.evaluateStep(stepStart))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(!interpolator.evaluateStep(stepStart))  {	  if(manager.evaluateStep(stepStart))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
10	[BUG]  [BUGGY]  if(manager.evaluateStep(hNew))  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(hNew))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(hNew))  {	  if(manager.evaluateStep(stepStart))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
11	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getEventTime()  /  stepStart;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getEventTime()  /  stepStart;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getEventTime()  /  stepStart;	      int    stepStart    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  not  a  statement	3	None	replace
12	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getEventTime()  *  stepStart;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getEventTime()  *  stepStart;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getEventTime()  *  stepStart;	      int    stepStart    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  not  a  statement	3	None	replace
13	[BUG]  [BUGGY]  int  stepStart  =  interface.getEventTime()  -  error;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interface.getEventTime()  -  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interface.getEventTime()  -  error;	      int    stepStart    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  not  a  statement	3	None	replace
14	[BUG]  [BUGGY]  if  (manager.evaluateStep(interpolator)&&  error!=  0)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(interpolator)&&  error!=  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(interpolator)&&  error!=  0)  {	  if    (manager.evaluateStep(interpolator)||    error!=    0)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
15	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(hNew)||  error!=  0)  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (interpolator.evaluateStep(hNew)||  error!=  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (interpolator.evaluateStep(hNew)||  error!=  0)  {	  if    (manager.evaluateStep(interpolator)||    error!=    0)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
16	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(manager)||  error!=  0)  {  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (interpolator.evaluateStep(manager)||  error!=  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (interpolator.evaluateStep(manager)||  error!=  0)  {	  if    (manager.evaluateStep(interpolator)||    error!=    0)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
17	[BUG]  [BUGGY]  Integer  stepStart  =  interpolator.getEventTime()  -  error;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  interpolator.getEventTime()  -  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  interpolator.getEventTime()  -  error;	      Integer    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	2	None	replace
18	[BUG]  [BUGGY]  Integer  stepStart  =  interpolator.getEventTime()  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  interpolator.getEventTime()  -  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  interpolator.getEventTime()  -  1;	      Integer    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	2	None	replace
19	[BUG]  [BUGGY]  Integer  stepStart  =  interpolator.getStep();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  interpolator.getStep();  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  interpolator.getStep();	      Integer    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	2	None	replace
20	[BUG]  [BUGGY]  if(interpolator.evaluateStep(hNew)||  error  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(interpolator.evaluateStep(hNew)||  error  ==  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(interpolator.evaluateStep(hNew)||  error  ==  0)  {	  if(manager.evaluateStep(interpolator)||    error    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
21	[BUG]  [BUGGY]  if(interpolator.evaluateStep(t0)||  error  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(interpolator.evaluateStep(t0)||  error  ==  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(interpolator.evaluateStep(t0)||  error  ==  0)  {	  if(manager.evaluateStep(interpolator)||    error    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
22	[BUG]  [BUGGY]  if(interpolator.evaluateStep(manager)||  error  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(interpolator.evaluateStep(manager)||  error  ==  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(interpolator.evaluateStep(manager)||  error  ==  0)  {	  if(manager.evaluateStep(interpolator)||    error    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
23	[BUG]  [BUGGY]  if(interpolator.evaluateStep(wrapped)||  error  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(interpolator.evaluateStep(wrapped)||  error  ==  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(interpolator.evaluateStep(wrapped)||  error  ==  0)  {	  if(manager.evaluateStep(interpolator)||    error    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
24	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(manager)&&  error!=  null)  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (interpolator.evaluateStep(manager)&&  error!=  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (interpolator.evaluateStep(manager)&&  error!=  null)  {	  if    (manager.evaluateStep(interpolator)&&    error!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
25	[BUG]  [BUGGY]  if  (manager.evaluateStep(interpolator)&&  stepSize!=  null)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(interpolator)&&  stepSize!=  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(interpolator)&&  stepSize!=  null)  {	  if    (manager.evaluateStep(interpolator)&&    error!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
26	[BUG]  [BUGGY]  if  (manager.evaluateStep(t0)&&  error!=  null)  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(t0)&&  error!=  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(t0)&&  error!=  null)  {	  if    (manager.evaluateStep(interpolator)&&    error!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
27	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(t0,  error);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(t0,  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(t0,  error);	      Integer    hNew    =    interpolator.getStep(t0,    j);    	non-compiled	[CE]  not  a  statement	13	None	replace
28	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(j,  t0);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(j,  t0);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(j,  t0);	      Integer    hNew    =    interpolator.getStep(t0,    j);    	non-compiled	[CE]  not  a  statement	13	None	replace
29	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(error,  j);  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(error,  j);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(error,  j);	      Integer    hNew    =    interpolator.getStep(t0,    j);    	non-compiled	[CE]  not  a  statement	13	None	replace
30	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(t1,  j);  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(t1,  j);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(t1,  j);	      Integer    hNew    =    interpolator.getStep(t0,    j);    	non-compiled	[CE]  not  a  statement	13	None	replace
31	[BUG]  [BUGGY]  if  (interpolator.evaluateStep(step))  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (interpolator.evaluateStep(step))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (interpolator.evaluateStep(step))  {	  if    (manager.evaluateStep(step))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
32	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getEventTime()  +  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getEventTime()  +  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getEventTime()  +  1;	      Integer    hNew    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	9	None	replace
33	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getEventTime()  +  error;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getEventTime()  +  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getEventTime()  +  error;	      Integer    hNew    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	9	None	replace
34	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getEventTime()  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getEventTime()  -  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getEventTime()  -  1;	      Integer    hNew    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	9	None	replace
35	[BUG]  [BUGGY]  int  stepSize  =  interpolator.stepSize()  -  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepSize  =  interpolator.stepSize()  -  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepSize  =  interpolator.stepSize()  -  1;	      int    stepSize    =    interpolator.stepSize();    	non-compiled	[CE]  not  a  statement	11	None	replace
36	[BUG]  [BUGGY]  int  stepSize  =  interpolator.stepSize()  -  error;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepSize  =  interpolator.stepSize()  -  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepSize  =  interpolator.stepSize()  -  error;	      int    stepSize    =    interpolator.stepSize();    	non-compiled	[CE]  not  a  statement	11	None	replace
37	[BUG]  [BUGGY]  int  stepSize  =  interpolator.stepSize()  +  error;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepSize  =  interpolator.stepSize()  +  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepSize  =  interpolator.stepSize()  +  error;	      int    stepSize    =    interpolator.stepSize();    	non-compiled	[CE]  not  a  statement	11	None	replace
38	[BUG]  [BUGGY]  int  stepSize  =  interpolator.stepSize()  +  1;  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepSize  =  interpolator.stepSize()  +  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepSize  =  interpolator.stepSize()  +  1;	      int    stepSize    =    interpolator.stepSize();    	non-compiled	[CE]  not  a  statement	11	None	replace
39	[BUG]  [BUGGY]  if(interpolator.evaluateStep(error))  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(interpolator.evaluateStep(error))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(interpolator.evaluateStep(error))  {	  if(manager.evaluateStep(error))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
40	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(error))  {  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(!interpolator.evaluateStep(error))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(!interpolator.evaluateStep(error))  {	  if(manager.evaluateStep(error))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
41	[BUG]  [BUGGY]  if(manager.evaluateStep(t0,  j))  {  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(t0,  j))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(t0,  j))  {	  if(manager.evaluateStep(error))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
42	[BUG]  [BUGGY]  if(interpolator.evaluateStep(exp))  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(interpolator.evaluateStep(exp))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(interpolator.evaluateStep(exp))  {	  if(manager.evaluateStep(exp))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
43	[BUG]  [BUGGY]  if(!interpolator.evaluateStep(exp))  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(!interpolator.evaluateStep(exp))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(!interpolator.evaluateStep(exp))  {	  if(manager.evaluateStep(exp))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
44	[BUG]  [BUGGY]  if(super.evaluateStep(exp))  {  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(super.evaluateStep(exp))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(super.evaluateStep(exp))  {	  if(manager.evaluateStep(exp))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
45	[BUG]  [BUGGY]  if(manager.evaluateStep(exp)||  error!=  null)  {  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(exp)||  error!=  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(exp)||  error!=  null)  {	  if(manager.evaluateStep(exp))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
46	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getEventTime(),  error);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getEventTime(),  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getEventTime(),  error);	      Integer    stepStart    =    getStep(interpolator.getEventTime());    	non-compiled	[CE]  not  a  statement	16	None	replace
47	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getEventTime()  -  error);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getEventTime()  -  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getEventTime()  -  error);	      Integer    stepStart    =    getStep(interpolator.getEventTime());    	non-compiled	[CE]  not  a  statement	16	None	replace
48	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getEventTime()  +  1);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getEventTime()  +  1);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getEventTime()  +  1);	      Integer    stepStart    =    getStep(interpolator.getEventTime());    	non-compiled	[CE]  not  a  statement	16	None	replace
49	[BUG]  [BUGGY]  if  (manager.evaluateStep(expfactor)||  error!=  null)  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(expfactor)||  error!=  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(expfactor)||  error!=  null)  {	  if    (manager.evaluateStep(expfactor))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
50	[BUG]  [BUGGY]  if  (manager.evaluateStep(expfactor)||  error!=  t0)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(expfactor)||  error!=  t0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(expfactor)||  error!=  t0)  {	  if    (manager.evaluateStep(expfactor))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
51	[BUG]  [BUGGY]  Integer  stepStart  =  getEventTime()  -  error;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getEventTime()  -  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getEventTime()  -  error;	      Integer    stepStart    =    getEventTime();    	non-compiled	[CE]  not  a  statement	5	None	replace
52	[BUG]  [BUGGY]  Integer  stepStart  =  getMillis();  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getMillis();  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getMillis();	      Integer    stepStart    =    getEventTime();    	non-compiled	[CE]  not  a  statement	5	None	replace
53	[BUG]  [BUGGY]  Integer  stepStart  =  getEventTime()  -  1;  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getEventTime()  -  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getEventTime()  -  1;	      Integer    stepStart    =    getEventTime();    	non-compiled	[CE]  not  a  statement	5	None	replace
54	[BUG]  [BUGGY]  Integer  stepStart  =  getEventTime()  +  1;  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getEventTime()  +  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getEventTime()  +  1;	      Integer    stepStart    =    getEventTime();    	non-compiled	[CE]  not  a  statement	5	None	replace
55	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStep(),  error);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStep(),  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getStep(),  error);	      Integer    stepStart    =    getStep(interpolator.getStep());    	non-compiled	[CE]  not  a  statement	18	None	replace
56	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getMinimumStep());  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getMinimumStep());  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getMinimumStep());	      Integer    stepStart    =    getStep(interpolator.getStep());    	non-compiled	[CE]  not  a  statement	18	None	replace
57	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getRange());  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getRange());  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getRange());	      Integer    stepStart    =    getStep(interpolator.getStep());    	non-compiled	[CE]  not  a  statement	18	None	replace
58	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getMillis());  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getMillis());  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getMillis());	      Integer    stepStart    =    getStep(interpolator.getStep());    	non-compiled	[CE]  not  a  statement	18	None	replace
59	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getEventTime()  /  stepSize;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getEventTime()  /  stepSize;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getEventTime()  /  stepSize;	      int    stepStart    =    interpolator.getEventTime()    -    stepSize;    	non-compiled	[CE]  not  a  statement	4	None	replace
60	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getEventTime()  *  stepSize;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getEventTime()  *  stepSize;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getEventTime()  *  stepSize;	      int    stepStart    =    interpolator.getEventTime()    -    stepSize;    	non-compiled	[CE]  not  a  statement	4	None	replace
61	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getEventTime()  +  stepSize;  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getEventTime()  +  stepSize;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getEventTime()  +  stepSize;	      int    stepStart    =    interpolator.getEventTime()    -    stepSize;    	non-compiled	[CE]  not  a  statement	4	None	replace
62	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getStepStart()  -  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getStepStart()  -  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getStepStart()  -  1;	      int    stepStart    =    interpolator.getStepStart();    	non-compiled	[CE]  not  a  statement	17	None	replace
63	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getRangeStart();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getRangeStart();  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getRangeStart();	      int    stepStart    =    interpolator.getStepStart();    	non-compiled	[CE]  not  a  statement	17	None	replace
64	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getStepStart()  -  error;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getStepStart()  -  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getStepStart()  -  error;	      int    stepStart    =    interpolator.getStepStart();    	non-compiled	[CE]  not  a  statement	17	None	replace
65	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getStepStart()  +  1;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getStepStart()  +  1;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getStepStart()  +  1;	      int    stepStart    =    interpolator.getStepStart();    	non-compiled	[CE]  not  a  statement	17	None	replace
66	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(j,  k);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(j,  k);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(j,  k);	      Integer    hNew    =    interpolator.getStep(t0,    k);    	non-compiled	[CE]  not  a  statement	12	None	replace
67	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(k,  t0);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(k,  t0);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(k,  t0);	      Integer    hNew    =    interpolator.getStep(t0,    k);    	non-compiled	[CE]  not  a  statement	12	None	replace
68	[BUG]  [BUGGY]  if(manager.evaluateStep(t0))  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(t0))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(t0))  {	  if(manager.evaluateStep(error))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
69	[BUG]  [BUGGY]  int  stepStart  =  manager.getEventTime()  -  stepStart;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  manager.getEventTime()  -  stepStart;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  manager.getEventTime()  -  stepStart;	      int    stepStart    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  not  a  statement	3	None	replace
70	[BUG]  [BUGGY]  if(!manager.evaluateStep(exp))  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(!manager.evaluateStep(exp))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(!manager.evaluateStep(exp))  {	  if(manager.evaluateStep(exp))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
71	[BUG]  [BUGGY]  if(manager.evaluateStep(exp)&&  error!=  null)  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(exp)&&  error!=  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(exp)&&  error!=  null)  {	  if(manager.evaluateStep(exp))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
72	[BUG]  [BUGGY]  int  stepSize  =  interpolator.stepSize(error);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepSize  =  interpolator.stepSize(error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepSize  =  interpolator.stepSize(error);	      int    stepSize    =    interpolator.stepSize();    	non-compiled	[CE]  not  a  statement	11	None	replace
73	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(error,  k);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(error,  k);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(error,  k);	      Integer    hNew    =    interpolator.getStep(t0,    k);    	non-compiled	[CE]  not  a  statement	12	None	replace
74	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStep()  -  error);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStep()  -  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getStep()  -  error);	      Integer    stepStart    =    getStep(interpolator.getStep());    	non-compiled	[CE]  not  a  statement	18	None	replace
75	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStep()  +  error);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStep()  +  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getStep()  +  error);	      Integer    stepStart    =    getStep(interpolator.getStep());    	non-compiled	[CE]  not  a  statement	18	None	replace
76	[BUG]  [BUGGY]  Integer  stepStart  =  getEventTime()  +  error;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getEventTime()  +  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getEventTime()  +  error;	      Integer    stepStart    =    getEventTime();    	non-compiled	[CE]  not  a  statement	5	None	replace
77	[BUG]  [BUGGY]  Integer  stepStart  =  getStep();  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep();  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep();	      Integer    stepStart    =    getEventTime();    	non-compiled	[CE]  not  a  statement	5	None	replace
78	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getStepEnd();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getStepEnd();  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getStepEnd();	      int    stepStart    =    interpolator.getStepStart();    	non-compiled	[CE]  not  a  statement	17	None	replace
79	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getStepStart()  +  error;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getStepStart()  +  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getStepStart()  +  error;	      int    stepStart    =    interpolator.getStepStart();    	non-compiled	[CE]  not  a  statement	17	None	replace
80	[BUG]  [BUGGY]  int  stepStart  =  manager.getEventTime()  -  stepSize;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  manager.getEventTime()  -  stepSize;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  manager.getEventTime()  -  stepSize;	      int    stepStart    =    interpolator.getEventTime()    -    stepSize;    	non-compiled	[CE]  not  a  statement	4	None	replace
81	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getHorizontalStep(t0);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getHorizontalStep(t0);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getHorizontalStep(t0);	      Integer    hNew    =    interpolator.getStep(t0);    	non-compiled	[CE]  not  a  statement	10	None	replace
82	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(error,  t0);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(error,  t0);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(error,  t0);	      Integer    hNew    =    interpolator.getStep(t0);    	non-compiled	[CE]  not  a  statement	10	None	replace
83	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)&&  error  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(interpolator)&&  error  ==  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(interpolator)&&  error  ==  0)  {	  if(manager.evaluateStep(interpolator)||    error    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
84	[BUG]  [BUGGY]  if(interpolator.evaluateStep(value)||  error  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(interpolator.evaluateStep(value)||  error  ==  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(interpolator.evaluateStep(value)||  error  ==  0)  {	  if(manager.evaluateStep(interpolator)||    error    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
85	[BUG]  [BUGGY]  if  (manager.evaluateStep(interpolator)&&  error  ==  null)  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(interpolator)&&  error  ==  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(interpolator)&&  error  ==  null)  {	  if    (manager.evaluateStep(interpolator)&&    error!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
86	[BUG]  [BUGGY]  if  (manager.evaluateStep(interpolator)&&  interpolator!=  null)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(interpolator)&&  interpolator!=  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(interpolator)&&  interpolator!=  null)  {	  if    (manager.evaluateStep(interpolator)&&    error!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
87	[BUG]  [BUGGY]  Integer  stepStart  =  interpolator.getStepInterpolator();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  interpolator.getStepInterpolator();  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  interpolator.getStepInterpolator();	      Integer    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	2	None	replace
88	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getEventTime()  +  error);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getEventTime()  +  error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getEventTime()  +  error);	      Integer    stepStart    =    getStep(interpolator.getEventTime());    	non-compiled	[CE]  not  a  statement	16	None	replace
89	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getEventTime()  +  error;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getEventTime()  +  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getEventTime()  +  error;	      int    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	1	None	replace
90	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getEventTime(error);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getEventTime(error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getEventTime(error);	      Integer    hNew    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	9	None	replace
91	[BUG]  [BUGGY]  if  (manager.evaluateStep(t0)||  error!=  0)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(t0)||  error!=  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(t0)||  error!=  0)  {	  if    (manager.evaluateStep(interpolator)||    error!=    0)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
92	[BUG]  [BUGGY]  if  (manager.evaluateStep(expfactor)&&  error!=  null)  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(expfactor)&&  error!=  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(expfactor)&&  error!=  null)  {	  if    (manager.evaluateStep(expfactor))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
93	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getStep();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getStep();  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getStep();	      int    stepStart    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	1	None	replace
94	[BUG]  [BUGGY]  if(manager.evaluateStep(expfactor)||  error  ==  t0)  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(expfactor)||  error  ==  t0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(expfactor)||  error  ==  t0)  {	  if    (manager.evaluateStep(expfactor))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
95	[BUG]  [BUGGY]  if(manager.evaluateStep(expfactor)||  error!=  0)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(expfactor)||  error!=  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(expfactor)||  error!=  0)  {	  if    (manager.evaluateStep(expfactor))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
96	[BUG]  [BUGGY]  if(!manager.evaluateStep(expfactor))  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(!manager.evaluateStep(expfactor))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(!manager.evaluateStep(expfactor))  {	  if    (manager.evaluateStep(expfactor))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
97	[BUG]  [BUGGY]  if(manager.evaluateStep(stepStart,  error))  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(stepStart,  error))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(stepStart,  error))  {	  if(manager.evaluateStep(stepStart))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
98	[BUG]  [BUGGY]  if(manager.evaluateStep(stepSize))  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(stepSize))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(stepSize))  {	  if(manager.evaluateStep(stepStart))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
99	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getEventTime()  -  error;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getEventTime()  -  error;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getEventTime()  -  error;	      Integer    hNew    =    interpolator.getEventTime();    	non-compiled	[CE]  not  a  statement	9	None	replace
100	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getStep()  -  stepSize;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getStep()  -  stepSize;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getStep()  -  stepSize;	      int    stepStart    =    interpolator.getEventTime()    -    stepSize;    	non-compiled	[CE]  not  a  statement	4	None	replace
101	[BUG]  [BUGGY]  if(manager.evaluateStep(step,  error))  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(step,  error))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(step,  error))  {	  if    (manager.evaluateStep(step))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
102	[BUG]  [BUGGY]  if(manager.evaluateStep(step)||  error!=  0)  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(step)||  error!=  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(step)||  error!=  0)  {	  if    (manager.evaluateStep(step))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
103	[BUG]  [BUGGY]  if(manager.evaluateStep(t0,  error))  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(t0,  error))  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(t0,  error))  {	  if(manager.evaluateStep(error))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
104	[BUG]  [BUGGY]  if  (manager.evaluateStep(interpolator)&&  stepStart!=  null)  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if  (manager.evaluateStep(interpolator)&&  stepStart!=  null)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(interpolator)&&  stepStart!=  null)  {	  if    (manager.evaluateStep(interpolator)&&    error!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
105	[BUG]  [BUGGY]  if(manager.evaluateStep(exp)||  error!=  t0)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(exp)||  error!=  t0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(exp)||  error!=  t0)  {	  if(manager.evaluateStep(exp))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
106	[BUG]  [BUGGY]  if(manager.evaluateStep(exp)||  error!=  0)  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(exp)||  error!=  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(exp)||  error!=  0)  {	  if(manager.evaluateStep(exp))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
107	[BUG]  [BUGGY]  if(manager.evaluateStep(exp)||  error  ==  t0)  {  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(manager.evaluateStep(exp)||  error  ==  t0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(exp)||  error  ==  t0)  {	  if(manager.evaluateStep(exp))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
108	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStep()  +  1);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStep()  +  1);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getStep()  +  1);	      Integer    stepStart    =    getStep(interpolator.getStep());    	non-compiled	[CE]  not  a  statement	18	None	replace
109	[BUG]  [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStepTime());  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  stepStart  =  getStep(interpolator.getStepTime());  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  stepStart  =  getStep(interpolator.getStepTime());	      Integer    stepStart    =    getStep(interpolator.getStep());    	non-compiled	[CE]  not  a  statement	18	None	replace
110	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getStep()  -  stepStart;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getStep()  -  stepStart;  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getStep()  -  stepStart;	      int    stepStart    =    interpolator.getEventTime()    -    stepStart;    	non-compiled	[CE]  not  a  statement	3	None	replace
111	[BUG]  [BUGGY]  Integer  hNew  =  interface.getStep(t0);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interface.getStep(t0);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interface.getStep(t0);	      Integer    hNew    =    interpolator.getStep(t0);    	non-compiled	[CE]  not  a  statement	10	None	replace
112	[BUG]  [BUGGY]  Integer  hNew  =  interface.getStep(error);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interface.getStep(error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interface.getStep(error);	      Integer    hNew    =    interpolator.getStep(t0);    	non-compiled	[CE]  not  a  statement	10	None	replace
113	[BUG]  [BUGGY]  int  stepStart  =  interpolator.getStepStart(error);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  int  stepStart  =  interpolator.getStepStart(error);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	int  stepStart  =  interpolator.getStepStart(error);	      int    stepStart    =    interpolator.getStepStart();    	non-compiled	[CE]  not  a  statement	17	None	replace
114	[BUG]  [BUGGY]  if(interpolator.evaluateStep(step)||  error  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  if(interpolator.evaluateStep(step)||  error  ==  0)  {  [BUGGY]    final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(interpolator.evaluateStep(step)||  error  ==  0)  {	  if(manager.evaluateStep(interpolator)||    error    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
115	[BUG]  [BUGGY]  Integer  hNew  =  interpolator.getStep(j,  t1);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);    [BUGGY]  Integer  hNew  =  interpolator.getStep(j,  t1);  [BUGGY]    if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	Integer  hNew  =  interpolator.getStep(j,  t1);	      Integer    hNew    =    interpolator.getStep(t0,    j);    	non-compiled	[CE]  not  a  statement	13	None	replace
