bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  stepStart  =  interpolator.getEventTime();  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    int  stepStart  =  interpolator.getEventTime();  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    int  stepStart  =  interpolator.getEventTime();		non-compiled	[CE]  not  a  statement	8	None	add
2	[BUG]  [BUGGY]    Integer  stepStart  =  interpolator.getEventTime();  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    Integer  stepStart  =  interpolator.getEventTime();  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    Integer  stepStart  =  interpolator.getEventTime();		non-compiled	[CE]  not  a  statement	8	None	add
3	[BUG]  [BUGGY]    int  stepStart  =  interpolator.getEventTime()  -  stepStart;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    int  stepStart  =  interpolator.getEventTime()  -  stepStart;  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    int  stepStart  =  interpolator.getEventTime()  -  stepStart;		non-compiled	[CE]  not  a  statement	8	None	add
4	[BUG]  [BUGGY]    int  stepStart  =  interpolator.getEventTime()  -  stepSize;  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    int  stepStart  =  interpolator.getEventTime()  -  stepSize;  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    int  stepStart  =  interpolator.getEventTime()  -  stepSize;		non-compiled	[CE]  not  a  statement	8	None	add
5	[BUG]  [BUGGY]    Integer  stepStart  =  getEventTime();  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    Integer  stepStart  =  getEventTime();  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    Integer  stepStart  =  getEventTime();		non-compiled	[CE]  not  a  statement	8	None	add
6	[BUG]  [BUGGY]  if  (manager.evaluateStep(expfactor))  {  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if  (manager.evaluateStep(expfactor))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(expfactor))  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  not  a  statement	7	None	replace
7	[BUG]  [BUGGY]  if  (manager.evaluateStep(step))  {  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if  (manager.evaluateStep(step))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(step))  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  not  a  statement	7	None	replace
8	[BUG]  [BUGGY]  if(manager.evaluateStep(error))  {  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.evaluateStep(error))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(error))  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  not  a  statement	7	None	replace
9	[BUG]  [BUGGY]    Integer  hNew  =  interpolator.getEventTime();  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    Integer  hNew  =  interpolator.getEventTime();  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    Integer  hNew  =  interpolator.getEventTime();		non-compiled	[CE]  not  a  statement	8	None	add
10	[BUG]  [BUGGY]    Integer  hNew  =  interpolator.getStep(t0);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    Integer  hNew  =  interpolator.getStep(t0);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    Integer  hNew  =  interpolator.getStep(t0);		non-compiled	[CE]  not  a  statement	8	None	add
11	[BUG]  [BUGGY]    int  stepSize  =  interpolator.stepSize();  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    int  stepSize  =  interpolator.stepSize();  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    int  stepSize  =  interpolator.stepSize();		non-compiled	[CE]  not  a  statement	8	None	add
12	[BUG]  [BUGGY]    Integer  hNew  =  interpolator.getStep(t0,  k);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    Integer  hNew  =  interpolator.getStep(t0,  k);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    Integer  hNew  =  interpolator.getStep(t0,  k);		non-compiled	[CE]  not  a  statement	8	None	add
13	[BUG]  [BUGGY]    Integer  hNew  =  interpolator.getStep(t0,  j);  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    Integer  hNew  =  interpolator.getStep(t0,  j);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    Integer  hNew  =  interpolator.getStep(t0,  j);		non-compiled	[CE]  not  a  statement	8	None	add
14	[BUG]  [BUGGY]  if  (manager.evaluateStep(interpolator)&&  error!=  null)  {  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if  (manager.evaluateStep(interpolator)&&  error!=  null)  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(interpolator)&&  error!=  null)  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  not  a  statement	7	None	replace
15	[BUG]  [BUGGY]  if  (manager.evaluateStep(interpolator)||  error!=  0)  {  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if  (manager.evaluateStep(interpolator)||  error!=  0)  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if  (manager.evaluateStep(interpolator)||  error!=  0)  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  not  a  statement	7	None	replace
16	[BUG]  [BUGGY]    Integer  stepStart  =  getStep(interpolator.getEventTime());  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    Integer  stepStart  =  getStep(interpolator.getEventTime());  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    Integer  stepStart  =  getStep(interpolator.getEventTime());		non-compiled	[CE]  not  a  statement	8	None	add
17	[BUG]  [BUGGY]    int  stepStart  =  interpolator.getStepStart();  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    int  stepStart  =  interpolator.getStepStart();  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    int  stepStart  =  interpolator.getStepStart();		non-compiled	[CE]  not  a  statement	8	None	add
18	[BUG]  [BUGGY]    Integer  stepStart  =  getStep(interpolator.getStep());  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    Integer  stepStart  =  getStep(interpolator.getStep());  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    Integer  stepStart  =  getStep(interpolator.getStep());		non-compiled	[CE]  not  a  statement	8	None	add
19	[BUG]  [BUGGY]  if(manager.evaluateStep(stepStart))  {  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.evaluateStep(stepStart))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(stepStart))  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  not  a  statement	7	None	replace
20	[BUG]  [BUGGY]  if(manager.evaluateStep(exp))  {  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.evaluateStep(exp))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(exp))  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  not  a  statement	7	None	replace
21	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)||  error  ==  0)  {  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.evaluateStep(interpolator)||  error  ==  0)  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(interpolator)||  error  ==  0)  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  not  a  statement	7	None	replace
