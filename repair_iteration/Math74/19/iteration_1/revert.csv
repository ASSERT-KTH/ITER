projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getOrder();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getMaxGrowth();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getOrder()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMinReduction(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxGrowth(10.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxGrowth(0.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxReduction(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet();setSafety(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124this.maxGrowth=maxGrowth;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet();setSafety(0.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMinReduction(1.0);setMaxGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-10.0/getOrder();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(exp>0.0){setMaxGrowth(1.0);}else{setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(exp>0.0){setMinGrowth(1.0);}else{setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(exp>0.0){setMinReduction(1.0);}else{setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(exp>0.0){setMinReduction(1.0);setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(exp>0.0){setMinGrowth(1.0);setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxReduction(2.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxReduction(1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124List<String>exp=Sets.newHashSet();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124ArrayList<String>exp=Sets.newHashSet();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet(false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMinGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMinGrowth(0.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxGrowth(0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-10.0*getOrder();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-10.0/getMaxGrowth();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-10.0/getOrder()+10.0;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMaxGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMinReduction(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getMinGrowth();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getMaxGrowth()+10.0;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0*getMaxGrowth();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxGrowth(1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMinGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(fsal){setSafety(1.0);}else{setSafety(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124scalRelativeTolerance=scalRelativeTolerance;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(fsal){setSafety(0.0);}else{setSafety(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124scalRelativeTolerance=scalRelativeTolerance.doubleValue();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMinReduction(0.0);setMaxGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet();setSafety(0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet();setSafety(2.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMinReduction(0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMinReduction(2.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMinReduction(1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(exp<0.0){setMinReduction(1.0);setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet();setSafety(1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMinReduction(1.0);}else{setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Settingssettings=getSettings();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124this.maxGrowth=maxGrowth+10.0;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124this.maxGrowth=maxGrowth+minReduction;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124this.maxGrowth=scalAbsoluteTolerance;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxGrowth(00.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getOrder()*1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getMaxGrowth()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getScale()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getScale().doubleValue();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMinGrowth(1.0);setMaxGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(exp>0.0){setMinGrowth(1);setMaxGrowth(1);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getScaleRelativeTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMinReduction(0.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMinReduction(0.5);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Preconditions.checkState(exp>0.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getMaxGrowth()+minStep;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=setSafety(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124luate(c,minStep,maxStep,scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124luate(c,minStep,maxStep,scalAbsoluteTolerance));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(fsal){setSafety(1.0);setMinGrowth(1.0);}else{setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(fsal){setSafety(1.0);setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(fsal){setSafety(1.0);}else{setSafety(1.0);setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(fsal){setSafety(1.0);setMinGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxReduction(0.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxGrowth(0.5);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124this.maxGrowth=maxGrowth+minStep;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124this.maxGrowth=maxGrowth-minStep;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMinReduction(1.0);setMaxGrowth(2.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=setMaxGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124ArrayList<String>exp=Sets.newHashSet();setSafety(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet(c);setSafety(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMinGrowth(1.0);}else{setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setSafety(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setSafety(1.0);setMinGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setSafety(0.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124if(exp<=0.0){setMinReduction(1.0);}else{setMaxGrowth(1.0);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=setSafety(1.0);setMinReduction(1.0);setMaxGrowth(1.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMinGrowth(10.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxGrowth(10.0,exp);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-10.0/getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124ArrayList<String>exp=Sets.newHashSet();setSafety(0.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124((RungeKuttaStepInterpolator)prototype).setMaxGrowth(2.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124this.maxGrowth=maxGrowth/getOrder();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124this.maxGrowth=maxGrowth-10.0;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet(a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=Sets.newHashSet(fsal);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124setMaxGrowth(0.0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124exp=-1.0/getMaxGrowth()*getMinGrowth();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java124Set<String>exp=setMinGrowth(1.0);setMaxGrowth(1.0);
