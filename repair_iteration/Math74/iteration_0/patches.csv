bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]  [FE]  AssertionError  polynomial  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	add	System.arraycopy(y,  0,  y,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	compilable	  [FE]  AssertionError  polynomial	13	1
2	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y0.length);  [FE]  AssertionError  polynomial  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  y,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	compilable	  [FE]  AssertionError  polynomial	13	1	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  polynomial  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	add	System.arraycopy(y0,  0,  y,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	compilable	  [FE]  AssertionError  polynomial	13	1
3	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  [FE]  AssertionError  polynomial  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	compilable	  [FE]  AssertionError  polynomial	13	1	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  polynomial  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y,  0,  yTmp,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	add	System.arraycopy(y,  0,  yTmp,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	compilable	  [FE]  AssertionError  polynomial	13	1
5	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yTmp,  0,  y0.length);  [FE]  AssertionError  polynomial  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y,  0,  yTmp,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  yTmp,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	compilable	  [FE]  AssertionError  polynomial	13	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  polynomial  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	add	  	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	compilable	  [FE]  AssertionError  polynomial	13	1
6	[BUG]  [BUGGY]    [FE]  AssertionError  polynomial  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	  	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	compilable	  [FE]  AssertionError  polynomial	13	1	replace
12	[BUG]  [BUGGY]  interpolator.storeStep(nextStep);  [CE]  cannot  find  symbol  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.storeStep(nextStep);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
13	[BUG]  [BUGGY]  interpolator.storeMean(nextStep);  [CE]  cannot  find  symbol  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.storeMean(nextStep);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeMean(nextStep);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
14	[BUG]  [BUGGY]  interpolator.storeTime(lastStep);  [CE]  method  storeTime  in  class  AbstractStepInterpolator  cannot  be  applied  to  given  types;  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.storeTime(lastStep);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(lastStep);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  method  storeTime  in  class  AbstractStepInterpolator  cannot  be  applied  to  given  types;	19	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  polynomial  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	add	  	interpolator.storeTime(nextStep);  	compilable	  [FE]  AssertionError  polynomial	19	1
16	[BUG]  [BUGGY]    [FE]  AssertionError  polynomial  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	  	interpolator.storeTime(nextStep);  	compilable	  [FE]  AssertionError  polynomial	19	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  polynomial  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	add	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);		compilable	  [FE]  AssertionError  polynomial	20	1
22	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [FE]  AssertionError  polynomial  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);		compilable	  [FE]  AssertionError  polynomial	20	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  polynomial  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(y,  0,  y,  0,  y0.length);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	add	    System.arraycopy(y,  0,  y,  0,  y0.length);		compilable	  [FE]  AssertionError  polynomial	20	1
23	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y0.length);  [FE]  AssertionError  polynomial  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(y,  0,  y,  0,  y0.length);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(y,  0,  y,  0,  y0.length);		compilable	  [FE]  AssertionError  polynomial	20	1	add
23	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  lastStep  =  manager.stepAccepted(nextStep,  y);  [CE]  incompatible  types  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  lastStep  =  manager.stepAccepted(nextStep,  y);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  lastStep  =  manager.stepAccepted(nextStep,  y);		non-compiled	[CE]  incompatible  types	20	None	add
24	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(nextStep);  [CE]  incompatible  types  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(nextStep);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(nextStep);		non-compiled	[CE]  incompatible  types	20	None	add
25	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(interpolator);  [CE]  method  storeTime  in  class  AbstractStepInterpolator  cannot  be  applied  to  given  types;  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(interpolator);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(interpolator);		non-compiled	[CE]  method  storeTime  in  class  AbstractStepInterpolator  cannot  be  applied  to  given  types;	20	None	add
31	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  +  hNew;  [CE]  incompatible  types  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]  final  double  nextStep  =  stepStart  +  hNew;  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  +  hNew;	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  incompatible  types	11	None	replace
32	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  +  1;  [CE]  incompatible  types  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]  final  double  nextStep  =  stepStart  +  1;  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  +  1;	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  incompatible  types	11	None	replace
33	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  +  factor;  [CE]  cannot  find  symbol  factor  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]  final  double  nextStep  =  stepStart  +  factor;  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  +  factor;	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  cannot  find  symbol  factor	11	None	replace
34	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize  /  hNew;  [CE]  incompatible  types  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize  /  hNew;  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  +  stepSize  /  hNew;	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  incompatible  types	11	None	replace
35	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  nextStep  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	  	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  cannot  find  symbol  nextStep	11	None	replace
41	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  [CE]  incompatible  types  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(y0,  0,  y,  0,  y0.length);		non-compiled	[CE]  incompatible  types	12	None	add
42	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [CE]  incompatible  types  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);		non-compiled	[CE]  incompatible  types	12	None	add
43	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [CE]  cannot  find  symbol  equals  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);		non-compiled	[CE]  cannot  find  symbol  equals	12	None	add
44	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y1,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(y0,  0,  y1,  0,  y0.length);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(y0,  0,  y1,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	12	None	add
45	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  interpolator.init();  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  interpolator.init();  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(y0,  0,  y,  0,  y0.length);  interpolator.init();		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	12	None	add
51	[BUG]  [BUGGY]  if(!manager.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(!manager.evaluateStep(interpolator))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(!manager.evaluateStep(interpolator))  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)||  error  >  0.0)  {  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.evaluateStep(interpolator)||  error  >  0.0)  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(interpolator)||  error  >  0.0)  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  if(manager.evaluateStep(interpolator)&&  error  >  0.0)  {  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.evaluateStep(interpolator)&&  error  >  0.0)  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(interpolator)&&  error  >  0.0)  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
55	[BUG]  [BUGGY]    [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	  	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	7	None	replace
61	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	16	None	add
62	[BUG]  [BUGGY]    System.arraycopy(x0,  0,  y,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(x0,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(x0,  0,  y,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	16	None	add
63	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  nextStep  =  nextStep;  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  nextStep  =  nextStep;  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  nextStep  =  nextStep;		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	16	None	add
64	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	16	None	add
65	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  nextStep  =  nextStep  +  stepSize;  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  nextStep  =  nextStep  +  stepSize;  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  nextStep  =  nextStep  +  stepSize;		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	16	None	add
73	[BUG]  [BUGGY]    System.arraycopy(x0,  0,  x0,  0,  x0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(x0,  0,  x0,  0,  x0.length);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(x0,  0,  x0,  0,  x0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	14	None	add
74	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	14	None	add
75	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y1,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(y0,  0,  y1,  0,  y0.length);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(y0,  0,  y1,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	14	None	add
81	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	18	None	add
82	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(nextStep);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(nextStep);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(nextStep);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	18	None	add
83	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(interpolator);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(interpolator);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  interpolator.storeTime(interpolator);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	18	None	add
84	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	18	None	add
85	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	18	None	add
91	[BUG]  [BUGGY]    CombinedEventsManager  manager  =  getEventsManager();  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    CombinedEventsManager  manager  =  getEventsManager();  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    CombinedEventsManager  manager  =  getEventsManager();		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	8	None	add
92	[BUG]  [BUGGY]    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.evaluateStep(interpolator))  {  loop  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.evaluateStep(interpolator))  {  loop  =  false;  }  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.evaluateStep(interpolator))  {  loop  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
93	[BUG]  [BUGGY]    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.getEvent()!=  stepStart)  {  loop  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.getEvent()!=  stepStart)  {  loop  =  false;  }  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.getEvent()!=  stepStart)  {  loop  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
94	[BUG]  [BUGGY]    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.evaluateStep(interpolator))  {  loop  =  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.evaluateStep(interpolator))  {  loop  =  true;  }  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.evaluateStep(interpolator))  {  loop  =  true;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
95	[BUG]  [BUGGY]    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.getEvent()  ==  stepStart)  {  loop  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.getEvent()  ==  stepStart)  {  loop  =  false;  }  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    if(error  >  0.0)  {  Interpolator  manager  =  new  CombinedEventsManager(error);  if(manager.getEvent()  ==  stepStart)  {  loop  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
102	[BUG]  [BUGGY]  scale  =  new  double[x.length];  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  scale  =  new  double[x.length];  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[x.length];	scale  =  new  double[y0.length];  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	1	None	replace
103	[BUG]  [BUGGY]  scale  =  new  double[x0.length];  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  scale  =  new  double[x0.length];  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[x0.length];	scale  =  new  double[y0.length];  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
104	[BUG]  [BUGGY]  scale  =  new  double[vecAbsoluteTolerance.length];  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  scale  =  new  double[vecAbsoluteTolerance.length];  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[vecAbsoluteTolerance.length];	scale  =  new  double[y0.length];  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	1	None	replace
105	[BUG]  [BUGGY]    [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	  	scale  =  new  double[y0.length];  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	1	None	replace
111	[BUG]  [BUGGY]  interpolator.storeTime(stepStart  +  error);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]  interpolator.storeTime(stepStart  +  error);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(stepStart  +  error);	interpolator.storeTime(stepStart  +  stepSize);  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	5	None	replace
113	[BUG]  [BUGGY]  interpolator.storeTime(stepStart  +  error,  stepSize);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]  interpolator.storeTime(stepStart  +  error,  stepSize);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(stepStart  +  error,  stepSize);	interpolator.storeTime(stepStart  +  stepSize);  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	5	None	replace
114	[BUG]  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize,  error);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]  interpolator.storeTime(stepStart  +  stepSize,  error);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(stepStart  +  stepSize,  error);	interpolator.storeTime(stepStart  +  stepSize);  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	5	None	replace
115	[BUG]  [BUGGY]    [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	  	interpolator.storeTime(stepStart  +  stepSize);  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	5	None	replace
121	[BUG]  [BUGGY]  loop  =  true;  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =  true;  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  true;	loop  =  false;  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	9	None	replace
122	[BUG]  [BUGGY]  loop  =((  hNew  +  hNew)>  hNew)||(hNew  >  hNew)  <  0);  [CE]  ';'  expected  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =((  hNew  +  hNew)>  hNew)||(hNew  >  hNew)  <  0);  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =((  hNew  +  hNew)>  hNew)||(hNew  >  hNew)  <  0);	loop  =  false;  	non-compiled	[CE]  ';'  expected	9	None	replace
123	[BUG]  [BUGGY]  loop  =((  hNew  +  hNew)>  hNew)&&(hNew  <=  hNew)>  hNew);  [CE]  ';'  expected  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =((  hNew  +  hNew)>  hNew)&&(hNew  <=  hNew)>  hNew);  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =((  hNew  +  hNew)>  hNew)&&(hNew  <=  hNew)>  hNew);	loop  =  false;  	non-compiled	[CE]  ';'  expected	9	None	replace
124	[BUG]  [BUGGY]  loop  =((  hNew  +  hNew)>  hNew)&&(hNew  <=  hNew)>  hNew;  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =((  hNew  +  hNew)>  hNew)&&(hNew  <=  hNew)>  hNew;  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =((  hNew  +  hNew)>  hNew)&&(hNew  <=  hNew)>  hNew;	loop  =  false;  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	9	None	replace
125	[BUG]  [BUGGY]    [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	  	loop  =  false;  	non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	9	None	replace
131	[BUG]  [BUGGY]    y0  =  java.util.Arrays.fill(y0,  0,  yDotK);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0  =  java.util.Arrays.fill(y0,  0,  yDotK);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0  =  java.util.Arrays.fill(y0,  0,  yDotK);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	2	None	add
132	[BUG]  [BUGGY]    y0  =  java.util.Arrays.fill(y0,  0,  y0.length);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0  =  java.util.Arrays.fill(y0,  0,  y0.length);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0  =  java.util.Arrays.fill(y0,  0,  y0.length);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	2	None	add
133	[BUG]  [BUGGY]    y0  =  java.util.Arrays.fill(y0);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0  =  java.util.Arrays.fill(y0);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0  =  java.util.Arrays.fill(y0);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	2	None	add
134	[BUG]  [BUGGY]    y0  =  java.util.Arrays.fill(y0,  0,  yDotK[1]);  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0  =  java.util.Arrays.fill(y0,  0,  yDotK[1]);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0  =  java.util.Arrays.fill(y0,  0,  yDotK[1]);		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	2	None	add
135	[BUG]  [BUGGY]    y0  =  vecAbsoluteTolerance.doubleValue();  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0  =  vecAbsoluteTolerance.doubleValue();  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0  =  vecAbsoluteTolerance.doubleValue();		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	2	None	add
141	[BUG]  [BUGGY]    hNew  =  hNew.doubleValue();  [CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    hNew  =  hNew.doubleValue();  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    hNew  =  hNew.doubleValue();		non-compiled	[CE]  variable  c  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	10	None	add
142	[BUG]  [BUGGY]    hNew  =  Math.sin(hNew,  hNew));  [CE]  ';'  expected  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    hNew  =  Math.sin(hNew,  hNew));  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    hNew  =  Math.sin(hNew,  hNew));		non-compiled	[CE]  ';'  expected	10	None	add
143	[BUG]  [BUGGY]    hNew  =  Math.sin(hNew);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    hNew  =  Math.sin(hNew);  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    hNew  =  Math.sin(hNew);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	10	None	add
144	[BUG]  [BUGGY]    handler.nextIsLast  =  hNew  +  hNew;  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    handler.nextIsLast  =  hNew  +  hNew;  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    handler.nextIsLast  =  hNew  +  hNew;		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	10	None	add
145	[BUG]  [BUGGY]    hNew  =  handler.getEventTime();  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    hNew  =  handler.getEventTime();  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    hNew  =  handler.getEventTime();		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	10	None	add
152	[BUG]  [BUGGY]  manager.stepAccepted(nextStep,  y0);  [CE]  illegal  start  of  expression  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y0);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	manager.stepAccepted(nextStep,  y0);	manager.stepAccepted(nextStep,  y);  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
153	[BUG]  [BUGGY]  manager.stepAccepted(nextStep,  hNew);  [CE]  illegal  start  of  expression  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  hNew);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	manager.stepAccepted(nextStep,  hNew);	manager.stepAccepted(nextStep,  y);  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
154	[BUG]  [BUGGY]  manager.accepted(nextStep,  y0);  [CE]  illegal  start  of  expression  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  manager.accepted(nextStep,  y0);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	manager.accepted(nextStep,  y0);	manager.stepAccepted(nextStep,  y);  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
161	[BUG]  [BUGGY]    if(error  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    if(error  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    if(error  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	6	None	add
162	[BUG]  [BUGGY]    if(error  >  0.0)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    if(error  >  0.0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    if(error  >  0.0)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	6	None	add
163	[BUG]  [BUGGY]    stepSize  =  Math.abs(error);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    stepSize  =  Math.abs(error);  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    stepSize  =  Math.abs(error);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	6	None	add
164	[BUG]  [BUGGY]    if(error  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  break;  }  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    if(error  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  break;  }  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    if(error  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  break;  }		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	6	None	add
165	[BUG]  [BUGGY]    stepSize  =  Math.abs(error)*  stepSize;  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    stepSize  =  Math.abs(error)*  stepSize;  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    stepSize  =  Math.abs(error)*  stepSize;		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	6	None	add
171	[BUG]  [BUGGY]    if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  if(firstTime  ==  false)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  if(firstTime  ==  false)  {  scale  =  new  double[y0.length];  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  if(firstTime  ==  false)  {  scale  =  new  double[y0.length];  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
172	[BUG]  [BUGGY]    java.util.Arrays.fill(y0,  0,  scale);  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    java.util.Arrays.fill(y0,  0,  scale);  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    java.util.Arrays.fill(y0,  0,  scale);  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	4	None	add
173	[BUG]  [BUGGY]    if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  if(firstTime!=  false)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  if(firstTime!=  false)  {  scale  =  new  double[y0.length];  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  if(firstTime!=  false)  {  scale  =  new  double[y0.length];  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
174	[BUG]  [BUGGY]    if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  if(firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  if(firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  if(firstTime)  {  scale  =  new  double[y0.length];  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
175	[BUG]  [BUGGY]    java.util.Arrays.fill(y0,  0,  scale);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    java.util.Arrays.fill(y0,  0,  scale);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    java.util.Arrays.fill(y0,  0,  scale);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	4	None	add
181	[BUG]  [BUGGY]  lastStep  =  manager.nextStep;  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]  lastStep  =  manager.nextStep;  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.nextStep;	lastStep  =  manager.stop();  	non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	17	None	replace
182	[BUG]  [BUGGY]  lastStep  =  manager.nextStep();  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]  lastStep  =  manager.nextStep();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.nextStep();	lastStep  =  manager.stop();  	non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	17	None	replace
183	[BUG]  [BUGGY]  lastStep  =  manager.next();  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]  lastStep  =  manager.next();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.next();	lastStep  =  manager.stop();  	non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	17	None	replace
184	[BUG]  [BUGGY]  lastStep  =  manager.start();  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]  lastStep  =  manager.start();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.start();	lastStep  =  manager.stop();  	non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	17	None	replace
191	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  vecAbsoluteTolerance);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	3	None	replace
192	[BUG]  [BUGGY]  if(java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  [CE]  ')'  expected  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  if(java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(java.util.Arrays.fill(scale,  vecAbsoluteTolerance);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  ')'  expected	3	None	replace
193	[BUG]  [BUGGY]  if(java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  ')'  expected  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  if(java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  ')'  expected	3	None	replace
194	[BUG]  [BUGGY]  if(java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  if(vecRelativeTolerance  ==  0.0)  {  scale  =  new  double[y0.length];  }  [CE]  ')'  expected  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  if(java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  if(vecRelativeTolerance  ==  0.0)  {  scale  =  new  double[y0.length];  }  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  if(vecRelativeTolerance  ==  0.0)  {  scale  =  new  double[y0.length];  }	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  ')'  expected	3	None	replace
1	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(y0,  0,  y0,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	14	None	add
3	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  Interpolator.init(new  StepHandler(t0,  y0,  t0,  y0));  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  Interpolator.init(new  StepHandler(t0,  y0,  t0,  y0));  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(y0,  0,  y0,  0,  y0.length);  Interpolator.init(new  StepHandler(t0,  y0,  t0,  y0));		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	14	None	add
4	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.addStep(new  StepHandler(t0,  y0,  t0));  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.addStep(new  StepHandler(t0,  y0,  t0));  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.addStep(new  StepHandler(t0,  y0,  t0));		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	14	None	add
5	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.interpolate(nextStep,  y0,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.interpolate(nextStep,  y0,  0,  y0.length);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.interpolate(nextStep,  y0,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	14	None	add
22	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  yTmp.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  yTmp.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  0,  yTmp.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	18	None	add
23	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(yTmp,  0,  y1,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	18	None	add
24	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y0,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(y,  0,  y0,  0,  y0.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(y,  0,  y0,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	18	None	add
25	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  y0.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	18	None	add
41	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	20	None	add
42	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(y0,  0,  yTmp,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	20	None	add
43	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  y0.length);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	20	None	add
44	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y0,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(y,  0,  y0,  0,  y0.length);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(y,  0,  y0,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	20	None	add
45	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y1,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    System.arraycopy(y0,  0,  y1,  0,  y0.length);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    System.arraycopy(y0,  0,  y1,  0,  y0.length);		non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	20	None	add
61	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  nextStep.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  nextStep.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y,  0,  nextStep.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	13	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  nextStep.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y,  0,  y,  0,  nextStep.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  y,  0,  nextStep.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	13	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  variable  y0  is  already  defined  in  method  integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	13	None	replace
81	[BUG]  [BUGGY]  if(manager.evaluateStep(stepStart))  {  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.evaluateStep(stepStart))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.evaluateStep(stepStart))  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
82	[BUG]  [BUGGY]  if(manager.getEventTime()!=  stepStart)  {  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.getEventTime()!=  stepStart)  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.getEventTime()!=  stepStart)  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
83	[BUG]  [BUGGY]  if(manager.getEventTime()  ==  stepStart)  {  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.getEventTime()  ==  stepStart)  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.getEventTime()  ==  stepStart)  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
84	[BUG]  [BUGGY]  if(manager.getEventTime()!=  time)  {  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.getEventTime()!=  time)  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.getEventTime()!=  time)  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
102	[BUG]  [BUGGY]  loop  =(hNew  >  hNew)?  loop  :  null;  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =(hNew  >  hNew)?  loop  :  null;  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =(hNew  >  hNew)?  loop  :  null;	loop  =  false;  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
103	[BUG]  [BUGGY]  loop  =(hNew  >  hNew)?  t0  :  new  Double(hNew);  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =(hNew  >  hNew)?  t0  :  new  Double(hNew);  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =(hNew  >  hNew)?  t0  :  new  Double(hNew);	loop  =  false;  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
104	[BUG]  [BUGGY]  loop  =(hNew  >  hNew)?  t0  :  null;  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =(hNew  >  hNew)?  t0  :  null;  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =(hNew  >  hNew)?  t0  :  null;	loop  =  false;  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
123	[BUG]  [BUGGY]  manager.stepAccepted(nextStep,  y0,  hNew);  [CE]  illegal  start  of  expression  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y0,  hNew);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	manager.stepAccepted(nextStep,  y0,  hNew);	manager.stepAccepted(nextStep,  y);  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
124	[BUG]  [BUGGY]  manager.stepAccepted(nextStep,  yTmp);  [CE]  illegal  start  of  expression  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  yTmp);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	manager.stepAccepted(nextStep,  yTmp);	manager.stepAccepted(nextStep,  y);  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
141	[BUG]  [BUGGY]  lastStep  =  manager.nextStep  +  1;  [CE]  illegal  start  of  expression  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]  lastStep  =  manager.nextStep  +  1;  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.nextStep  +  1;	lastStep  =  manager.stop();  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
144	[BUG]  [BUGGY]  lastStep  =  manager.reset();  [CE]  illegal  start  of  expression  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]  lastStep  =  manager.reset();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.reset();	lastStep  =  manager.stop();  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
161	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  error);  [CE]  illegal  start  of  expression  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  error);  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  0,  error);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
162	[BUG]  [BUGGY]    int  stepSize  =  Math.max(stepSize,  error);  [CE]  illegal  start  of  expression  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    int  stepSize  =  Math.max(stepSize,  error);  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    int  stepSize  =  Math.max(stepSize,  error);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
163	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  1,  error);  [CE]  illegal  start  of  expression  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  1,  error);  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  1,  error);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
164	[BUG]  [BUGGY]    stepSize  =  Math.abs(error)/  stepSize;  [CE]  illegal  start  of  expression  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    stepSize  =  Math.abs(error)/  stepSize;  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    stepSize  =  Math.abs(error)/  stepSize;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
181	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  [CE]  illegal  start  of  expression  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(y0,  0,  y0,  0,  y0.length);		non-compiled	[CE]  illegal  start  of  expression	12	None	add
183	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  Interpolator.init(new  CombinedEventsManagerInterpolator(t0,  y0,  hNew));  [CE]  illegal  start  of  expression  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  Interpolator.init(new  CombinedEventsManagerInterpolator(t0,  y0,  hNew));  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(y0,  0,  y0,  0,  y0.length);  Interpolator.init(new  CombinedEventsManagerInterpolator(t0,  y0,  hNew));		non-compiled	[CE]  illegal  start  of  expression	12	None	add
184	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.addStep(new  StepHandler(t0,  y0,  hNew));  [CE]  illegal  start  of  expression  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.addStep(new  StepHandler(t0,  y0,  hNew));  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.addStep(new  StepHandler(t0,  y0,  hNew));		non-compiled	[CE]  illegal  start  of  expression	12	None	add
185	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.addStep(nextIsLast,  hNew);  [CE]  illegal  start  of  expression  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.addStep(nextIsLast,  hNew);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(y0,  0,  y0,  0,  y0.length);  interpolator.addStep(nextIsLast,  hNew);		non-compiled	[CE]  illegal  start  of  expression	12	None	add
201	[BUG]  [BUGGY]    y0  =  vecRelativeTolerance.doubleValue();  [CE]  illegal  start  of  expression  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0  =  vecRelativeTolerance.doubleValue();  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0  =  vecRelativeTolerance.doubleValue();		non-compiled	[CE]  illegal  start  of  expression	2	None	add
202	[BUG]  [BUGGY]    y0[0]  =  vecRelativeTolerance.doubleValue();  [CE]  illegal  start  of  expression  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0[0]  =  vecRelativeTolerance.doubleValue();  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0[0]  =  vecRelativeTolerance.doubleValue();		non-compiled	[CE]  illegal  start  of  expression	2	None	add
203	[BUG]  [BUGGY]    y0[0]  =  vecAbsoluteTolerance.doubleValue();  [CE]  illegal  start  of  expression  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0[0]  =  vecAbsoluteTolerance.doubleValue();  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0[0]  =  vecAbsoluteTolerance.doubleValue();		non-compiled	[CE]  illegal  start  of  expression	2	None	add
204	[BUG]  [BUGGY]    y0  =  vecRelativeTolerance.doubleToLongBits(x0,  y0);  [CE]  illegal  start  of  expression  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0  =  vecRelativeTolerance.doubleToLongBits(x0,  y0);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0  =  vecRelativeTolerance.doubleToLongBits(x0,  y0);		non-compiled	[CE]  illegal  start  of  expression	2	None	add
205	[BUG]  [BUGGY]    y0  =  vecRelativeTolerance.doubleToLongBits(x0);  [CE]  illegal  start  of  expression  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    y0  =  vecRelativeTolerance.doubleToLongBits(x0);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    y0  =  vecRelativeTolerance.doubleToLongBits(x0);		non-compiled	[CE]  illegal  start  of  expression	2	None	add
222	[BUG]  [BUGGY]  scale  =  new  double[scalAbsoluteTolerance.length];  [CE]  illegal  start  of  expression  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  scale  =  new  double[scalAbsoluteTolerance.length];  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scalAbsoluteTolerance.length];	scale  =  new  double[y0.length];  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
224	[BUG]  [BUGGY]  scale  =  new  double[0].length;  [CE]  illegal  start  of  expression  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  scale  =  new  double[0].length;  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[0].length;	scale  =  new  double[y0.length];  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
241	[BUG]  [BUGGY]  java.util.Arrays.fill(y0,  scale);  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(y0,  scale);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(y0,  scale);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
242	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0);  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(scale,  y0);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
243	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0[0],  vecRelativeTolerance);  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(scale,  y0[0],  vecRelativeTolerance);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0[0],  vecRelativeTolerance);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
244	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0[0]);  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(scale,  y0[0]);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0[0]);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
261	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  scale,  1,  y0.length);  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    System.arraycopy(y0,  0,  scale,  1,  y0.length);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    System.arraycopy(y0,  0,  scale,  1,  y0.length);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
262	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  scale,  y0,  y0.length);  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    System.arraycopy(y0,  0,  scale,  y0,  y0.length);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    System.arraycopy(y0,  0,  scale,  y0,  y0.length);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
263	[BUG]  [BUGGY]    scale  =  Math.max(scale,  y0[0],  vecRelativeTolerance);  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    scale  =  Math.max(scale,  y0[0],  vecRelativeTolerance);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    scale  =  Math.max(scale,  y0[0],  vecRelativeTolerance);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
264	[BUG]  [BUGGY]    scale  =  Math.max(scale,  y0.length);  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    scale  =  Math.max(scale,  y0.length);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    scale  =  Math.max(scale,  y0.length);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
265	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  scale,  y0,  x0,  y0.length);  [CE]  illegal  start  of  expression  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    System.arraycopy(y0,  0,  scale,  y0,  x0,  y0.length);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    System.arraycopy(y0,  0,  scale,  y0,  x0,  y0.length);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
281	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  yTmp.length);  [CE]  illegal  start  of  expression  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  yTmp.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  0,  yTmp.length);		non-compiled	[CE]  illegal  start  of  expression	16	None	add
282	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  y0.length);  [CE]  illegal  start  of  expression  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  0,  y0.length);		non-compiled	[CE]  illegal  start  of  expression	16	None	add
284	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  [CE]  illegal  start  of  expression  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yTmp,  0,  y1,  0,  y0.length);		non-compiled	[CE]  illegal  start  of  expression	16	None	add
285	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  1,  y0.length);  [CE]  illegal  start  of  expression  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  1,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  1,  y0.length);		non-compiled	[CE]  illegal  start  of  expression	16	None	add
301	[BUG]  [BUGGY]    hNew  =  handler.getHorizontalMillis();  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    hNew  =  handler.getHorizontalMillis();  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    hNew  =  handler.getHorizontalMillis();		non-compiled	[CE]  illegal  start  of  expression	10	None	add
302	[BUG]  [BUGGY]    hNew  =  handler.getHorizontalStep();  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    hNew  =  handler.getHorizontalStep();  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    hNew  =  handler.getHorizontalStep();		non-compiled	[CE]  illegal  start  of  expression	10	None	add
303	[BUG]  [BUGGY]    dt  =  manager.getEventTime()  -  stepStart;  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    dt  =  manager.getEventTime()  -  stepStart;  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    dt  =  manager.getEventTime()  -  stepStart;		non-compiled	[CE]  illegal  start  of  expression	10	None	add
304	[BUG]  [BUGGY]    hNew  =  Math.max(hNew,  stepsInt());  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    hNew  =  Math.max(hNew,  stepsInt());  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    hNew  =  Math.max(hNew,  stepsInt());		non-compiled	[CE]  illegal  start  of  expression	10	None	add
305	[BUG]  [BUGGY]    hNew  =  handler.getHorizontalMath();  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    hNew  =  handler.getHorizontalMath();  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    hNew  =  handler.getHorizontalMath();		non-compiled	[CE]  illegal  start  of  expression	10	None	add
321	[BUG]  [BUGGY]  final  double  nextStep  =  stepSize  +  stepStart;  [CE]  illegal  start  of  expression  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]  final  double  nextStep  =  stepSize  +  stepStart;  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepSize  +  stepStart;	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
322	[BUG]  [BUGGY]  final  double  nextStep  =  lastStep  +  stepSize;  [CE]  illegal  start  of  expression  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]  final  double  nextStep  =  lastStep  +  stepSize;  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  lastStep  +  stepSize;	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
323	[BUG]  [BUGGY]  final  double  nextStep  =  hNew  +  stepSize;  [CE]  illegal  start  of  expression  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]  final  double  nextStep  =  hNew  +  stepSize;  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  hNew  +  stepSize;	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
324	[BUG]  [BUGGY]  final  double  nextStep  =  factor  +  stepSize;  [CE]  illegal  start  of  expression  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]  final  double  nextStep  =  factor  +  stepSize;  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  factor  +  stepSize;	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
341	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  error,  stepSize);  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  error,  stepSize);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  error,  stepSize);		non-compiled	[CE]  illegal  start  of  expression	8	None	add
342	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  error);  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  0,  error);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  0,  error);		non-compiled	[CE]  illegal  start  of  expression	8	None	add
343	[BUG]  [BUGGY]    System.arraycopy(y,  0,  yTmp,  error,  stepSize);  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    System.arraycopy(y,  0,  yTmp,  error,  stepSize);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    System.arraycopy(y,  0,  yTmp,  error,  stepSize);		non-compiled	[CE]  illegal  start  of  expression	8	None	add
344	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  error,  stepSize);  interpolator.addStep(error);  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  error,  stepSize);  interpolator.addStep(error);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  error,  stepSize);  interpolator.addStep(error);		non-compiled	[CE]  illegal  start  of  expression	8	None	add
345	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  error,  stepSize);  interpolator.recordStep(error);  [CE]  illegal  start  of  expression  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    System.arraycopy(yTmp,  0,  yTmp,  error,  stepSize);  interpolator.recordStep(error);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    System.arraycopy(yTmp,  0,  yTmp,  error,  stepSize);  interpolator.recordStep(error);		non-compiled	[CE]  illegal  start  of  expression	8	None	add
362	[BUG]  [BUGGY]  interpolator.storeTime(stepStart  -  stepSize);  [CE]  illegal  start  of  expression  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]  interpolator.storeTime(stepStart  -  stepSize);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(stepStart  -  stepSize);	interpolator.storeTime(stepStart  +  stepSize);  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
363	[BUG]  [BUGGY]  interpolator.storeTime(stepSize  +  stepStart);  [CE]  illegal  start  of  expression  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]  interpolator.storeTime(stepSize  +  stepStart);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(stepSize  +  stepStart);	interpolator.storeTime(stepStart  +  stepSize);  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
364	[BUG]  [BUGGY]  interpolator.storeTime(stepStart  /  stepSize);  [CE]  illegal  start  of  expression  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]  interpolator.storeTime(stepStart  /  stepSize);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(stepStart  /  stepSize);	interpolator.storeTime(stepStart  +  stepSize);  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
381	[BUG]  [BUGGY]  interpolator.storeTime(nextStep  -  1);  [CE]  ')'  expected  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.storeTime(nextStep  -  1);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep  -  1);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  ')'  expected	19	None	replace
382	[BUG]  [BUGGY]  interpolator.storeTime(nextStep  +  1);  [CE]  ';'  expected  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.storeTime(nextStep  +  1);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep  +  1);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  ';'  expected	19	None	replace
383	[BUG]  [BUGGY]  interpolator.reportInvalidStep(nextStep);  [CE]  illegal  start  of  expression  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.reportInvalidStep(nextStep);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.reportInvalidStep(nextStep);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
384	[BUG]  [BUGGY]  interpolator.addStep(nextStep);  [CE]  illegal  start  of  expression  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.addStep(nextStep);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.addStep(nextStep);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
4	[BUG]  [BUGGY]  final  double  nextStep  =  maxStep  +  stepSize;  [CE]  illegal  start  of  expression  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]  final  double  nextStep  =  maxStep  +  stepSize;  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  maxStep  +  stepSize;	final  double  nextStep  =  stepStart  +  stepSize;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]    Interpolator  interpolator  =  ArrayBuilders.insertInList(error,  false);  [CE]  illegal  start  of  expression  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    Interpolator  interpolator  =  ArrayBuilders.insertInList(error,  false);  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    Interpolator  interpolator  =  ArrayBuilders.insertInList(error,  false);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
32	[BUG]  [BUGGY]    Interpolator  interpolator  =  ArrayBuilders.insert(error,  1.0);  [CE]  illegal  start  of  expression  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    Interpolator  interpolator  =  ArrayBuilders.insert(error,  1.0);  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    Interpolator  interpolator  =  ArrayBuilders.insert(error,  1.0);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
33	[BUG]  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "Steps  are  not  implemented  by  the  operator.getSteps();  for(int  j  =  0;  j  <  k;  j++)  {  stepSize  +=  error;  }  [CE]  unclosed  string  literal  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "Steps  are  not  implemented  by  the  operator.getSteps();  for(int  j  =  0;  j  <  k;  j++)  {  stepSize  +=  error;  }  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "Steps  are  not  implemented  by  the  operator.getSteps();  for(int  j  =  0;  j  <  k;  j++)  {  stepSize  +=  error;  }		non-compiled	[CE]  unclosed  string  literal	6	None	add
34	[BUG]  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "Steps  are  not  implemented  by  the  operator.getSteps();  for(int  j  =  0;  j  <  l;  j++)  {  stepSize  +=  error;  }  [CE]  unclosed  string  literal  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "Steps  are  not  implemented  by  the  operator.getSteps();  for(int  j  =  0;  j  <  l;  j++)  {  stepSize  +=  error;  }  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "Steps  are  not  implemented  by  the  operator.getSteps();  for(int  j  =  0;  j  <  l;  j++)  {  stepSize  +=  error;  }		non-compiled	[CE]  unclosed  string  literal	6	None	add
35	[BUG]  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "Steps  are  not  implemented  by  the  operator.getSteps();  for(int  j  =  0;  j  <  steps.length;  ++j)  {  stepSize  +=  error;  }  [CE]  unclosed  string  literal  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "Steps  are  not  implemented  by  the  operator.getSteps();  for(int  j  =  0;  j  <  steps.length;  ++j)  {  stepSize  +=  error;  }  [BUGGY]  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "Steps  are  not  implemented  by  the  operator.getSteps();  for(int  j  =  0;  j  <  steps.length;  ++j)  {  stepSize  +=  error;  }		non-compiled	[CE]  unclosed  string  literal	6	None	add
62	[BUG]  [BUGGY]  loop  =  normalizeLoop(t0,  hNew)&&(Math.abs(hNew  -  stepStart)  <  Math.abs(hNew  -  stepStart)));  [CE]  unclosed  string  literal  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =  normalizeLoop(t0,  hNew)&&(Math.abs(hNew  -  stepStart)  <  Math.abs(hNew  -  stepStart)));  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  normalizeLoop(t0,  hNew)&&(Math.abs(hNew  -  stepStart)  <  Math.abs(hNew  -  stepStart)));	loop  =  false;  	non-compiled	[CE]  unclosed  string  literal	9	None	replace
63	[BUG]  [BUGGY]  loop  =  normalizeLoop(t0,  hNew)&&(Math.abs(hNew  -  stepStart)  <=  Math.abs(hNew  -  stepStart)));  [CE]  unclosed  string  literal  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =  normalizeLoop(t0,  hNew)&&(Math.abs(hNew  -  stepStart)  <=  Math.abs(hNew  -  stepStart)));  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  normalizeLoop(t0,  hNew)&&(Math.abs(hNew  -  stepStart)  <=  Math.abs(hNew  -  stepStart)));	loop  =  false;  	non-compiled	[CE]  unclosed  string  literal	9	None	replace
64	[BUG]  [BUGGY]  loop  =  normalizeLoop(t0,  hNew)&&(Math.abs(hNew  -  stepStart)  <  Math.abs(hNew)));  [CE]  unclosed  string  literal  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]  loop  =  normalizeLoop(t0,  hNew)&&(Math.abs(hNew  -  stepStart)  <  Math.abs(hNew)));  [BUGGY]  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  normalizeLoop(t0,  hNew)&&(Math.abs(hNew  -  stepStart)  <  Math.abs(hNew)));	loop  =  false;  	non-compiled	[CE]  unclosed  string  literal	9	None	replace
91	[BUG]  [BUGGY]  interpolator.init(nextStep);  [CE]  unclosed  string  literal  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.init(nextStep);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.init(nextStep);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  unclosed  string  literal	19	None	replace
92	[BUG]  [BUGGY]  interpolator.init(nextStep,  lastStep);  [CE]  unclosed  string  literal  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.init(nextStep,  lastStep);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.init(nextStep,  lastStep);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  unclosed  string  literal	19	None	replace
93	[BUG]  [BUGGY]  interpolator.init(stepStart,  lastStep);  [CE]  unclosed  string  literal  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.init(stepStart,  lastStep);  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.init(stepStart,  lastStep);	interpolator.storeTime(nextStep);  	non-compiled	[CE]  unclosed  string  literal	19	None	replace
94	[BUG]  [BUGGY]  interpolator.interpolate();  [CE]  unclosed  string  literal  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]  interpolator.interpolate();  [BUGGY]  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.interpolate();	interpolator.storeTime(nextStep);  	non-compiled	[CE]  unclosed  string  literal	19	None	replace
121	[BUG]  [BUGGY]    handler.addStep(error);  [CE]  unclosed  string  literal  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    handler.addStep(error);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    handler.addStep(error);		non-compiled	[CE]  unclosed  string  literal	8	None	add
122	[BUG]  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalStateException( "Steps  are  not  implemented  by  the  compiler. ");  }  else  {  Interpolator.init();  }  [CE]  unclosed  string  literal  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalStateException( "Steps  are  not  implemented  by  the  compiler. ");  }  else  {  Interpolator.init();  }  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    if(error  ==  1.0)  {  throw  new  IllegalStateException( "Steps  are  not  implemented  by  the  compiler. ");  }  else  {  Interpolator.init();  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
123	[BUG]  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "More  than  one  should  be  possible, ");  }  [CE]  unclosed  string  literal  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "More  than  one  should  be  possible, ");  }  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    if(error  ==  1.0)  {  throw  new  IllegalArgumentException( "More  than  one  should  be  possible, ");  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
124	[BUG]  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalStateException( "Steps  are  not  implemented  by  the  compiler. ");  }  [CE]  unclosed  string  literal  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalStateException( "Steps  are  not  implemented  by  the  compiler. ");  }  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    if(error  ==  1.0)  {  throw  new  IllegalStateException( "Steps  are  not  implemented  by  the  compiler. ");  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
125	[BUG]  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalStateException( "Steps  are  not  implemented  by  the  operator. "  +  Error.getMessage());  }  [CE]  unclosed  string  literal  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]    if(error  ==  1.0)  {  throw  new  IllegalStateException( "Steps  are  not  implemented  by  the  operator. "  +  Error.getMessage());  }  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	    if(error  ==  1.0)  {  throw  new  IllegalStateException( "Steps  are  not  implemented  by  the  operator. "  +  Error.getMessage());  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
151	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  scale,  yTmp,  y0.length);  [CE]  unclosed  string  literal  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    System.arraycopy(y0,  0,  scale,  yTmp,  y0.length);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    System.arraycopy(y0,  0,  scale,  yTmp,  y0.length);		non-compiled	[CE]  unclosed  string  literal	4	None	add
152	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  scale,  yDotK,  y0.length);  [CE]  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    System.arraycopy(y0,  0,  scale,  yDotK,  y0.length);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    System.arraycopy(y0,  0,  scale,  yDotK,  y0.length);		non-compiled	[CE]  	4	None	add
153	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  scale,  y0,  yDotK);  [CE]  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    System.arraycopy(y0,  0,  scale,  y0,  yDotK);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    System.arraycopy(y0,  0,  scale,  y0,  yDotK);		non-compiled	[CE]  	4	None	add
154	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  scale,  y0,  yTmp,  y0.length);  [CE]  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    System.arraycopy(y0,  0,  scale,  y0,  yTmp,  y0.length);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    System.arraycopy(y0,  0,  scale,  y0,  yTmp,  y0.length);		non-compiled	[CE]  	4	None	add
155	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  scale,  yTmp,  yDotK);  [CE]  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    System.arraycopy(y0,  0,  scale,  yTmp,  yDotK);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    System.arraycopy(y0,  0,  scale,  yTmp,  yDotK);		non-compiled	[CE]  	4	None	add
184	[BUG]  [BUGGY]  scale  =  new  double[2];  [CE]  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  scale  =  new  double[2];  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[2];	scale  =  new  double[y0.length];  	non-compiled	[CE]  	1	None	replace
211	[BUG]  [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  Float.MAX_VALUE)  {  hNew  =  Float.valueOf(stepStart);  }  [CE]  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  Float.MAX_VALUE)  {  hNew  =  Float.valueOf(stepStart);  }  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  Float.MAX_VALUE)  {  hNew  =  Float.valueOf(stepStart);  }		non-compiled	[CE]  	10	None	add
212	[BUG]  [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  Float.MAX_VALUE)  {  hNew  =  Float.doubleToLongBits(hNew);  }  [CE]  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  Float.MAX_VALUE)  {  hNew  =  Float.doubleToLongBits(hNew);  }  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  Float.MAX_VALUE)  {  hNew  =  Float.doubleToLongBits(hNew);  }		non-compiled	[CE]  	10	None	add
213	[BUG]  [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  Float.MAX_VALUE)  {  hNew  =  Float.valueOf(hNew);  }  [CE]  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  Float.MAX_VALUE)  {  hNew  =  Float.valueOf(hNew);  }  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  Float.MAX_VALUE)  {  hNew  =  Float.valueOf(hNew);  }		non-compiled	[CE]  	10	None	add
214	[BUG]  [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  regress)  {  hNew  =  dt;  }  [CE]  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  regress)  {  hNew  =  dt;  }  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  regress)  {  hNew  =  dt;  }		non-compiled	[CE]  	10	None	add
215	[BUG]  [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  1.0)  {  hNew  =  dt;  }  [CE]  [CONTEXT]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {    [BUGGY]    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  1.0)  {  hNew  =  dt;  }  [BUGGY]  loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	    if(hNew  ==  0.0)  {  dt  =  Math.floor(stepStart);  if(Math.abs(hNew)>  1.0)  {  hNew  =  dt;  }		non-compiled	[CE]  	10	None	add
243	[BUG]  [BUGGY]  interpolator.storeTime(stepStart  +  0.5);  [CE]  [CONTEXT]  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {    [BUGGY]  interpolator.storeTime(stepStart  +  0.5);  [BUGGY]  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	interpolator.storeTime(stepStart  +  0.5);	interpolator.storeTime(stepStart  +  stepSize);  	non-compiled	[CE]  	5	None	replace
271	[BUG]  [BUGGY]    vecAbsoluteTolerance  =  java.util.Arrays.fill(y0,  0,  y0.length);  [CE]  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    vecAbsoluteTolerance  =  java.util.Arrays.fill(y0,  0,  y0.length);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    vecAbsoluteTolerance  =  java.util.Arrays.fill(y0,  0,  y0.length);		non-compiled	[CE]  	2	None	add
272	[BUG]  [BUGGY]    java.util.Arrays.fill(y0,  0,  y0.length);  [CE]  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    java.util.Arrays.fill(y0,  0,  y0.length);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    java.util.Arrays.fill(y0,  0,  y0.length);		non-compiled	[CE]  	2	None	add
273	[BUG]  [BUGGY]    vecAbsoluteTolerance  =  vecRelativeTolerance.evaluate(equations);  [CE]  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    vecAbsoluteTolerance  =  vecRelativeTolerance.evaluate(equations);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    vecAbsoluteTolerance  =  vecRelativeTolerance.evaluate(equations);		non-compiled	[CE]  	2	None	add
274	[BUG]  [BUGGY]    vecAbsoluteTolerance  =  vecRelativeTolerance.effects();  [CE]  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    vecAbsoluteTolerance  =  vecRelativeTolerance.effects();  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    vecAbsoluteTolerance  =  vecRelativeTolerance.effects();		non-compiled	[CE]  	2	None	add
275	[BUG]  [BUGGY]    vecAbsoluteTolerance  =  java.util.Arrays.fill(y0,  0,  scale);  [CE]  [CONTEXT]  for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    vecAbsoluteTolerance  =  java.util.Arrays.fill(y0,  0,  scale);  [BUGGY]  scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	    vecAbsoluteTolerance  =  java.util.Arrays.fill(y0,  0,  scale);		non-compiled	[CE]  	2	None	add
303	[BUG]  [BUGGY]  lastStep  =  manager.step(nextStep);  [CE]  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]  lastStep  =  manager.step(nextStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.step(nextStep);	lastStep  =  manager.stop();  	non-compiled	[CE]  	17	None	replace
332	[BUG]  [BUGGY]    ensureCapacity(hNew);  System.arraycopy(y0,  0,  y,  0,  y0.length);  [CE]  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    ensureCapacity(hNew);  System.arraycopy(y0,  0,  y,  0,  y0.length);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    ensureCapacity(hNew);  System.arraycopy(y0,  0,  y,  0,  y0.length);		non-compiled	[CE]  	12	None	add
333	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y0.length);  [CE]  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(y,  0,  y,  0,  y0.length);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(y,  0,  y,  0,  y0.length);		non-compiled	[CE]  	12	None	add
334	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  interpolator.init(stepStart,  hNew);  [CE]  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  interpolator.init(stepStart,  hNew);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    System.arraycopy(y0,  0,  y,  0,  y0.length);  interpolator.init(stepStart,  hNew);		non-compiled	[CE]  	12	None	add
335	[BUG]  [BUGGY]    ensureCapacity(hNew);  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [CE]  [CONTEXT]    final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }    [BUGGY]    ensureCapacity(hNew);  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	    ensureCapacity(hNew);  System.arraycopy(yTmp,  0,  y,  0,  y0.length);		non-compiled	[CE]  	12	None	add
363	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  interpolator.init(nextStep,  hNew);  [CE]  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  interpolator.init(nextStep,  hNew);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(y0,  0,  y,  0,  y0.length);  interpolator.init(nextStep,  hNew);		non-compiled	[CE]  	14	None	add
364	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  Interpolator.init(nextStep,  hNew);  [CE]  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  Interpolator.init(nextStep,  hNew);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(y0,  0,  y,  0,  y0.length);  Interpolator.init(nextStep,  hNew);		non-compiled	[CE]  	14	None	add
365	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  Interpolator.interpolate(nextStep,  hNew);  [CE]  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  Interpolator.interpolate(nextStep,  hNew);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(y0,  0,  y,  0,  y0.length);  Interpolator.interpolate(nextStep,  hNew);		non-compiled	[CE]  	14	None	add
391	[BUG]  [BUGGY]  manager.stepAccepted(y,  nextStep);  [CE]  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(y,  nextStep);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	manager.stepAccepted(y,  nextStep);	manager.stepAccepted(nextStep,  y);  	non-compiled	[CE]  	15	None	replace
393	[BUG]  [BUGGY]  manager.stepAccepted(yTmp,  nextStep);  [CE]  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(yTmp,  nextStep);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	manager.stepAccepted(yTmp,  nextStep);	manager.stepAccepted(nextStep,  y);  	non-compiled	[CE]  	15	None	replace
394	[BUG]  [BUGGY]  manager.stepAccepted(thenNextStep,  y);  [CE]  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]  manager.stepAccepted(thenNextStep,  y);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	manager.stepAccepted(thenNextStep,  y);	manager.stepAccepted(nextStep,  y);  	non-compiled	[CE]  	15	None	replace
422	[BUG]  [BUGGY]  if(scale!=  0)  {  java.util.Arrays.fill(y0,  scale);  }  else  {  scale  =  vecRelativeTolerance;  }  [CE]  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  if(scale!=  0)  {  java.util.Arrays.fill(y0,  scale);  }  else  {  scale  =  vecRelativeTolerance;  }  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale!=  0)  {  java.util.Arrays.fill(y0,  scale);  }  else  {  scale  =  vecRelativeTolerance;  }	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  	3	None	replace
423	[BUG]  [BUGGY]  if(scale!=  0)  {  java.util.Arrays.fill(y0,  scale);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  if(scale!=  0)  {  java.util.Arrays.fill(y0,  scale);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale!=  0)  {  java.util.Arrays.fill(y0,  scale);  }  else  {  scale  =  vecAbsoluteTolerance;  }	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  	3	None	replace
424	[BUG]  [BUGGY]  if(scale!=  0)  {  Arrays.fill(y0,  scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecRelativeTolerance;  }  [CE]  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  if(scale!=  0)  {  Arrays.fill(y0,  scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecRelativeTolerance;  }  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale!=  0)  {  Arrays.fill(y0,  scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecRelativeTolerance;  }	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  	3	None	replace
451	[BUG]  [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator(x,  y);  [CE]  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator(x,  y);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator(x,  y);		non-compiled	[CE]  	20	None	add
452	[BUG]  [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator();  [CE]  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator();  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator();		non-compiled	[CE]  	20	None	add
453	[BUG]  [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.create(x,  y);  [CE]  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.create(x,  y);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.create(x,  y);		non-compiled	[CE]  	20	None	add
454	[BUG]  [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator(t0,  y);  [CE]  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator(t0,  y);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator(t0,  y);		non-compiled	[CE]  	20	None	add
455	[BUG]  [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator(manager,  nextStep);  [CE]  [CONTEXT]  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();    [BUGGY]    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator(manager,  nextStep);  [BUGGY]  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	    Interpolator  <  K,  V>  interpolator  =  EmbeddedStepInterpolator.createChildObjectInterpolator(manager,  nextStep);		non-compiled	[CE]  	20	None	add
483	[BUG]  [BUGGY]  if(manager.isEvent())  {  [CE]  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.isEvent())  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.isEvent())  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  	7	None	replace
484	[BUG]  [BUGGY]  if(manager.getEvent()!=  stepStart)  {  [CE]  [CONTEXT]  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  error  =  estimateError(yDotK,  y,  yTmp,  stepSize);  if  (error  <=  1.0)  {  interpolator.storeTime(stepStart  +  stepSize);  [BUGGY]  if(manager.getEvent()!=  stepStart)  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	if(manager.getEvent()!=  stepStart)  {	if  (manager.evaluateStep(interpolator))  {  	non-compiled	[CE]  	7	None	replace
511	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  yTmp.length);  [CE]  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  yTmp.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  yTmp.length);		non-compiled	[CE]  	18	None	add
512	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  [CE]  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(y,  0,  y,  0,  y.length);		non-compiled	[CE]  	18	None	add
513	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y,  0,  yTmp.length);  [CE]  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(y,  0,  y,  0,  yTmp.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(y,  0,  y,  0,  yTmp.length);		non-compiled	[CE]  	18	None	add
514	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  interpolator.init(handler,  nextStep);  [CE]  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  interpolator.init(handler,  nextStep);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(y,  0,  y,  0,  y.length);  interpolator.init(handler,  nextStep);		non-compiled	[CE]  	18	None	add
515	[BUG]  [BUGGY]    System.arraycopy(y,  0,  yTmp,  0,  yTmp.length);  [CE]  [CONTEXT]  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    System.arraycopy(y,  0,  yTmp,  0,  yTmp.length);  [BUGGY]  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	    System.arraycopy(y,  0,  yTmp,  0,  yTmp.length);		non-compiled	[CE]  	18	None	add
541	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  hNew);  [CE]  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y,  0,  y,  0,  hNew);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  y,  0,  hNew);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  	13	None	replace
571	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  yTmp.length);  [CE]  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  yTmp.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yTmp,  0,  y,  0,  yTmp.length);		non-compiled	[CE]  	16	None	add
572	[BUG]  [BUGGY]    System.arraycopy(y,  0,  yTmp,  0,  yTmp.length);  [CE]  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(y,  0,  yTmp,  0,  yTmp.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(y,  0,  yTmp,  0,  yTmp.length);		non-compiled	[CE]  	16	None	add
573	[BUG]  [BUGGY]    System.arraycopy(ys,  0,  yTmp,  0,  yTmp.length);  [CE]  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(ys,  0,  yTmp,  0,  yTmp.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(ys,  0,  yTmp,  0,  yTmp.length);		non-compiled	[CE]  	16	None	add
574	[BUG]  [BUGGY]    System.arraycopy(yStmp,  0,  yTmp,  0,  yTmp.length);  [CE]  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(yStmp,  0,  yTmp,  0,  yTmp.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(yStmp,  0,  yTmp,  0,  yTmp.length);		non-compiled	[CE]  	16	None	add
575	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y,  0,  yTmp.length);  [CE]  [CONTEXT]  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  [BUGGY]    System.arraycopy(y,  0,  y,  0,  yTmp.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	    System.arraycopy(y,  0,  y,  0,  yTmp.length);		non-compiled	[CE]  	16	None	add
