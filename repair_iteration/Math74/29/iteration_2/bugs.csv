bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[][]  yTmp  =(double[][])c.clone();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =(double[][])c.clone();  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =(double[][])c.clone();	      final    double[][]    yTmp    =(double[][])stages.clone();    	non-compiled	[CE]  ';'  expected	9	None	replace
2	[BUG]  [BUGGY]  final  double[][]  yTmp  =(double[][])stages.toArray(new  double[stages.size()  ]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =(double[][])stages.toArray(new  double[stages.size()  ]);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =(double[][])stages.toArray(new  double[stages.size()  ]);	      final    double[][]    yTmp    =(double[][])stages.clone();    	non-compiled	[CE]  ';'  expected	9	None	replace
3	[BUG]  [BUGGY]  final  double[][]  yTmp  =(double[][])stages.toArray(new  double[stages.length]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =(double[][])stages.toArray(new  double[stages.length]);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =(double[][])stages.toArray(new  double[stages.length]);	      final    double[][]    yTmp    =(double[][])stages.clone();    	non-compiled	[CE]  ';'  expected	9	None	replace
4	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y1,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y1,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y1,  0,  y,  0,  stages);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y0,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
5	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages.length;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages.length;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  stages.length;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y0,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(c,  0,  c,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  c.length);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  c,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  c.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  c,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  c.length);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    y0.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(y0,  0,stages,  y0.length);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(y0,  0,stages,  y0.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(y0,  0,stages,  y0.length);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    y0.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(c,  0,  c,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  y0.length);  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  c,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  y0.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  c,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  y0.length);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    y0.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  stages,  1);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(stages,  0,  stages,  1);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(stages,  0,  stages,  1);	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    }    else    {    System.arraycopy(stages,    0,    stages,    1);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  stages,  1,  c.length);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(stages,  0,  stages,  1,  c.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(stages,  0,  stages,  1,  c.length);	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    }    else    {    System.arraycopy(stages,    0,    stages,    1);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(c,  0,  stages,  1);  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  stages,  1);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  stages,  1);	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    }    else    {    System.arraycopy(stages,    0,    stages,    1);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
12	[BUG]  [BUGGY]  final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y0,  0,  y,  0,  stages.length);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y0,  0,  y,  0,  stages.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y0,  0,  y,  0,  stages.length);	      final    double[][]    yTmp    =(double[][])stages.clone();    System.arraycopy(y0,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
13	[BUG]  [BUGGY]  final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y1,  0,  y,  0,  stages.length);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y1,  0,  y,  0,  stages.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y1,  0,  y,  0,  stages.length);	      final    double[][]    yTmp    =(double[][])stages.clone();    System.arraycopy(y0,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(c,  0,  c,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  c,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  c,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(c,  0,  stages,  1,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  stages,  1,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  stages,  1,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(c,  0,  c,  1,  stages);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  c,  1,  stages);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  c,  1,  stages);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
18	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  stages,  0,  stages);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  stages,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  stages,  0,  stages);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
19	[BUG]  [BUGGY]  if(stages  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  ==  null)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  ==  null)  {	  if(stages!=    null)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
20	[BUG]  [BUGGY]  if(stages!=  null  ||  stages  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null  ||  stages  ==  0)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null  ||  stages  ==  0)  {	  if(stages!=    null)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
21	[BUG]  [BUGGY]  if(stages  ==  null  ||  stages!=  0)  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  ==  null  ||  stages!=  0)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  ==  null  ||  stages!=  0)  {	  if(stages!=    null)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
22	[BUG]  [BUGGY]  if(stages  <  0)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  <  0)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  <  0)  {	  if(stages    ==    0)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
23	[BUG]  [BUGGY]  if(stages  >  0)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  >  0)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  >  0)  {	  if(stages    ==    0)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
24	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages][c.length  +  1];  System.arraycopy(y0,  0,  y,  0,  stages);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages][c.length  +  1];  System.arraycopy(y0,  0,  y,  0,  stages);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages][c.length  +  1];  System.arraycopy(y0,  0,  y,  0,  stages);	      final    double[][]    yTmp    =    new    double[stages][t.length    +    1];    System.arraycopy(y0,    0,    y,    0,    stages);    	non-compiled	[CE]  ';'  expected	11	None	replace
25	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  2];  System.arraycopy(y0,  0,  y,  0,  stages);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  2];  System.arraycopy(y0,  0,  y,  0,  stages);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages][t.length  +  2];  System.arraycopy(y0,  0,  y,  0,  stages);	      final    double[][]    yTmp    =    new    double[stages][t.length    +    1];    System.arraycopy(y0,    0,    y,    0,    stages);    	non-compiled	[CE]  ';'  expected	11	None	replace
26	[BUG]  [BUGGY]  final  int[][]  yTmp  =  new  int[stages][t.length  +  1];  System.arraycopy(y0,  0,  y,  0,  stages);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  int[][]  yTmp  =  new  int[stages][t.length  +  1];  System.arraycopy(y0,  0,  y,  0,  stages);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  int[][]  yTmp  =  new  int[stages][t.length  +  1];  System.arraycopy(y0,  0,  y,  0,  stages);	      final    double[][]    yTmp    =    new    double[stages][t.length    +    1];    System.arraycopy(y0,    0,    y,    0,    stages);    	non-compiled	[CE]  ';'  expected	11	None	replace
27	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  stages;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  for(int  y  =  0;  y  <  stages;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	for(int  y  =  0;  y  <  stages;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    stages;    y++)    {    System.arraycopy(y0,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
28	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  stages;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    stages;    y++)    {    System.arraycopy(y0,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
29	[BUG]  [BUGGY]  if(forward)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(forward)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(forward)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    1,    c.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
30	[BUG]  [BUGGY]  if(forward)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(forward)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(forward)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    1,    c.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
31	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][0];  System.arraycopy(y0,  0,  y,  0,  stages.length);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][0];  System.arraycopy(y0,  0,  y,  0,  stages.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages.length  +  1][0];  System.arraycopy(y0,  0,  y,  0,  stages.length);	      final    double[][]    yTmp    =    new    double[stages.length    +    1][1];    System.arraycopy(y0,    0,    y,    0,    stages.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
32	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][2];  System.arraycopy(y0,  0,  y,  0,  stages.length);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][2];  System.arraycopy(y0,  0,  y,  0,  stages.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages.length  +  1][2];  System.arraycopy(y0,  0,  y,  0,  stages.length);	      final    double[][]    yTmp    =    new    double[stages.length    +    1][1];    System.arraycopy(y0,    0,    y,    0,    stages.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
33	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  2][1];  System.arraycopy(y0,  0,  y,  0,  stages.length);  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  2][1];  System.arraycopy(y0,  0,  y,  0,  stages.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages.length  +  2][1];  System.arraycopy(y0,  0,  y,  0,  stages.length);	      final    double[][]    yTmp    =    new    double[stages.length    +    1][1];    System.arraycopy(y0,    0,    y,    0,    stages.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
34	[BUG]  [BUGGY]  sanityChecks(equations,  t0,  y0,  c,  stages);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  sanityChecks(equations,  t0,  y0,  c,  stages);  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	sanityChecks(equations,  t0,  y0,  c,  stages);	      	non-compiled	[CE]  ';'  expected	3	None	replace
35	[BUG]  [BUGGY]  final  double[][]  a  =(double[][])c.length;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  a  =(double[][])c.length;  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  a  =(double[][])c.length;	      	non-compiled	[CE]  ';'  expected	3	None	replace
36	[BUG]  [BUGGY]  sanityChecks(stages,  t0,  y0,  t,  c.length);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  sanityChecks(stages,  t0,  y0,  t,  c.length);  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	sanityChecks(stages,  t0,  y0,  t,  c.length);	      	non-compiled	[CE]  ';'  expected	3	None	replace
37	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages][c.length  +  1];  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages][c.length  +  1];  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages][c.length  +  1];	      final    double[][]    yTmp    =    new    double[stages][t.length    +    1];    	non-compiled	[CE]  ';'  expected	10	None	replace
38	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length];  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length];  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages][t.length];	      final    double[][]    yTmp    =    new    double[stages][t.length    +    1];    	non-compiled	[CE]  ';'  expected	10	None	replace
39	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  2];  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  2];  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages][t.length  +  2];	      final    double[][]    yTmp    =    new    double[stages][t.length    +    1];    	non-compiled	[CE]  ';'  expected	10	None	replace
40	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  stages.length);  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  stages.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  stages.length);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
41	[BUG]  [BUGGY]  if(stages  ==  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  ==  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  ==  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
42	[BUG]  [BUGGY]  if(forward)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(forward)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(forward)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    1,    c.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
43	[BUG]  [BUGGY]  if(forward)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(forward)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(forward)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    1,    c.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
44	[BUG]  [BUGGY]  if(forward)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(forward)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(forward)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    1,    c.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
45	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages.length;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages.length);  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages.length;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  stages.length;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages.length);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
46	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][1];  System.arraycopy(t0,  0,  y,  0,  stages.length);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][1];  System.arraycopy(t0,  0,  y,  0,  stages.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages.length  +  1][1];  System.arraycopy(t0,  0,  y,  0,  stages.length);	      final    double[][]    yTmp    =    new    double[stages.length    +    1][1];    System.arraycopy(y0,    0,    y,    0,    stages.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
47	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  3];  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  3];  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages][t.length  +  3];	      final    double[][]    yTmp    =    new    double[stages][t.length    +    1];    	non-compiled	[CE]  ';'  expected	10	None	replace
48	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][1];  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][1];  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages.length  +  1][1];	      	non-compiled	[CE]  ';'  expected	3	None	replace
49	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][0];  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][0];  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages.length  +  1][0];	      	non-compiled	[CE]  ';'  expected	3	None	replace
50	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][2];  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][2];  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages.length  +  1][2];	      	non-compiled	[CE]  ';'  expected	3	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  stages);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  stages);  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(stages,  0,  y0,  0,  stages);	      	non-compiled	[CE]  ';'  expected	3	None	replace
52	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  stages.length);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  stages.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  stages.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  stages.length);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
53	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y0,  0,  stages,  0,  stages);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y0,  0,  stages,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y0,  0,  stages,  0,  stages);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y0,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
54	[BUG]  [BUGGY]  final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y0,  0,  y1,  0,  yTmp.length);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y0,  0,  y1,  0,  yTmp.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y0,  0,  y1,  0,  yTmp.length);	      final    double[][]    yTmp    =(double[][])stages.clone();    System.arraycopy(y0,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  y0.length);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  y0.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  y0.length);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    y0.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  y;  ++y)  {  System.arraycopy(y0,  0,  stages,  y0.length);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  y;  ++y)  {  System.arraycopy(y0,  0,  stages,  y0.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  y;  ++y)  {  System.arraycopy(y0,  0,  stages,  y0.length);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    y0.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
57	[BUG]  [BUGGY]  if(stages!=  null  ||  stages.length  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null  ||  stages.length  ==  0)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null  ||  stages.length  ==  0)  {	  if(stages!=    null)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
58	[BUG]  [BUGGY]  if(stages!=  1)  {  System.arraycopy(stages,  0,stages,  1);  System.arraycopy(stages,  0,  stages,  1);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  1)  {  System.arraycopy(stages,  0,stages,  1);  System.arraycopy(stages,  0,  stages,  1);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  1)  {  System.arraycopy(stages,  0,stages,  1);  System.arraycopy(stages,  0,  stages,  1);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    System.arraycopy(stages,    0,    stages,    1);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
59	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  3];  System.arraycopy(y0,  0,  y,  0,  stages);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  3];  System.arraycopy(y0,  0,  y,  0,  stages);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages][t.length  +  3];  System.arraycopy(y0,  0,  y,  0,  stages);	      final    double[][]    yTmp    =    new    double[stages][t.length    +    1];    System.arraycopy(y0,    0,    y,    0,    stages);    	non-compiled	[CE]  ';'  expected	11	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  1,  stages);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  1,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  1,  stages);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
61	[BUG]  [BUGGY]  if(stages  ==  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  stages.length);  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  ==  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  stages.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  ==  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(y,  0,  y,  0,  stages.length);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
62	[BUG]  [BUGGY]  final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y0,  0,  yTmp,  0,  stages.length);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y0,  0,  yTmp,  0,  stages.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =(double[][])stages.clone();  System.arraycopy(y0,  0,  yTmp,  0,  stages.length);	      final    double[][]    yTmp    =(double[][])stages.clone();    System.arraycopy(y0,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
63	[BUG]  [BUGGY]  if(stages!=  null  &&  stages!=  0)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null  &&  stages!=  0)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null  &&  stages!=  0)  {	  if(stages!=    null)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
64	[BUG]  [BUGGY]  if(stages!=  null  &&  stages  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null  &&  stages  ==  0)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null  &&  stages  ==  0)  {	  if(stages!=    null)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
65	[BUG]  [BUGGY]  if(stages!=  null  &&  stages  <  =  1)  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null  &&  stages  <  =  1)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null  &&  stages  <  =  1)  {	  if(stages!=    null)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
66	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  c.length;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    c.length;    y++)    {    System.arraycopy(y0,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
67	[BUG]  [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  y0.length);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  y0.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  stages,  y0.length);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    y0.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
68	[BUG]  [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    y0.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
69	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][1];  System.arraycopy(c,  0,  y,  0,  stages.length);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages.length  +  1][1];  System.arraycopy(c,  0,  y,  0,  stages.length);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages.length  +  1][1];  System.arraycopy(c,  0,  y,  0,  stages.length);	      final    double[][]    yTmp    =    new    double[stages.length    +    1][1];    System.arraycopy(y0,    0,    y,    0,    stages.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
70	[BUG]  [BUGGY]  final  double[][]  yTmp  =(double[][])scales.clone();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =(double[][])scales.clone();  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =(double[][])scales.clone();	      final    double[][]    yTmp    =(double[][])stages.clone();    	non-compiled	[CE]  ';'  expected	9	None	replace
71	[BUG]  [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages.length);  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  null)  {  for(int  y  =  0;  y  <  stages;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages.length);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  null)  {  for(int  y  =  0;  y  <  stages;  y++)  {  System.arraycopy(stages,  0,  y,  0,  stages.length);  }	      if(stages!=    null)    {    for(int    y    =    0;    y    <    stages;    y++)    {    System.arraycopy(y0,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
72	[BUG]  [BUGGY]  if(stages!=  1)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages!=  1)  {  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages!=  1)  {	  if    (stages!=    0)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
73	[BUG]  [BUGGY]  if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  setEvaluations(c);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  setEvaluations(c);  }  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  setEvaluations(c);  }	      	non-compiled	[CE]  ';'  expected	3	None	replace
74	[BUG]  [BUGGY]  if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  System.arraycopy(y0,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  System.arraycopy(y0,  0,  y,  0,  stages);  }  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  System.arraycopy(y0,  0,  y,  0,  stages);  }	      	non-compiled	[CE]  ';'  expected	3	None	replace
75	[BUG]  [BUGGY]  if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  System.arraycopy(stages,  0,  y0,  stages,  k);  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  System.arraycopy(stages,  0,  y0,  stages,  k);  }  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  System.arraycopy(stages,  0,  y0,  stages,  k);  }	      	non-compiled	[CE]  ';'  expected	3	None	replace
76	[BUG]  [BUGGY]  if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  System.arraycopy(stages,  0,  y0,  1,  stages);  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  System.arraycopy(stages,  0,  y0,  1,  stages);  }  [BUGGY]    System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  >  0)  {  for(int  k  =  0;  k  <  stages;  k++)  {  System.arraycopy(stages,  0,  y0,  1,  stages);  }	      	non-compiled	[CE]  ';'  expected	3	None	replace
77	[BUG]  [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  y,  0,  stages);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    y,    0,    stages);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
78	[BUG]  [BUGGY]  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  stages);  System.arraycopy(stages,  0,  stages,  1);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  stages);  System.arraycopy(stages,  0,  stages,  1);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  stages);  System.arraycopy(stages,  0,  stages,  1);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    System.arraycopy(stages,    0,    stages,    1);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(c,  0,  stages,  1,  1);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  System.arraycopy(c,  0,  stages,  1,  1);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	System.arraycopy(c,  0,  stages,  1,  1);	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    System.arraycopy(stages,    0,    stages,    1);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
80	[BUG]  [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  1];  System.arraycopy(c,  0,  y,  0,  stages);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  final  double[][]  yTmp  =  new  double[stages][t.length  +  1];  System.arraycopy(c,  0,  y,  0,  stages);  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	final  double[][]  yTmp  =  new  double[stages][t.length  +  1];  System.arraycopy(c,  0,  y,  0,  stages);	      final    double[][]    yTmp    =    new    double[stages][t.length    +    1];    System.arraycopy(y0,    0,    y,    0,    stages);    	non-compiled	[CE]  ';'  expected	11	None	replace
81	[BUG]  [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  }  else  {  System.arraycopy(stages,  0,  stages,  1);  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  }  else  {  System.arraycopy(stages,  0,  stages,  1);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  }  else  {  System.arraycopy(stages,  0,  stages,  1);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    }    else    {    System.arraycopy(stages,    0,    stages,    1);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
82	[BUG]  [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  }  else  {  System.arraycopy(stages,  0,  stages,  1);  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  }  else  {  System.arraycopy(stages,  0,  stages,  1);  }  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(c.length  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  }  else  {  System.arraycopy(stages,  0,  stages,  1);  }	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    }    else    {    System.arraycopy(stages,    0,    stages,    1);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
83	[BUG]  [BUGGY]  if(t  >  t0)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(t  >  t0)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(t  >  t0)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    1,    c.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
84	[BUG]  [BUGGY]  if(t  >  t0)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  DerivativeException,  IntegratorException  {  sanityChecks(equations,  t0,  y0,  t,  y);  setEquations(equations);  resetEvaluations();  final  boolean  forward  =  t  >  t0;  final  int  stages  =  c.length  +  1;    [BUGGY]  if(t  >  t0)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,  [BUGGY]    if  (y  !=  y0)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  }  final  double[][]  yDotK  =  new  double[stages][y0.length];  final  double[]  yTmp  =  new  double[y0.length];  AbstractStepInterpolator  interpolator;  if  (requiresDenseOutput()  ||  (!  eventsHandlersManager.isEmpty()))  {  final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	if(t  >  t0)  {  if(stages  <  1)  {  System.arraycopy(stages,  0,  stages,  1,  c.length);  for(int  y  =  0;  y  <  stages;  ++y)  {  System.arraycopy(stages,  0,	      if(stages    <    1)    {    System.arraycopy(stages,    0,    stages,    1);    for(int    y    =    0;    y    <    stages;    ++y)    {    System.arraycopy(stages,    0,    stages,    1,    c.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
