bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    handler,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    handler,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    handler,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    handler,    t,    eventHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    handler,    t,    eventHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  t,  eventHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    handler,    t,    eventHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
7	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  step  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  step  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  step	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  StepHandler  stepHandler  =  prototype.getStepHandler(stepStart);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandler  =  prototype.getStepHandler(stepStart);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandler  =  prototype.getStepHandler(stepStart);	      StepHandler    stepHandler    =    prototype.getStepHandler();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
11	[BUG]  [BUGGY]  stepHandler  =  prototype.getStepHandler();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  stepHandler  =  prototype.getStepHandler();  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	stepHandler  =  prototype.getStepHandler();	      StepHandler    stepHandler    =    prototype.getStepHandler();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  StepHandler  stepHandler  =  prototype.getStepHandler(t0);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandler  =  prototype.getStepHandler(t0);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandler  =  prototype.getStepHandler(t0);	      StepHandler    stepHandler    =    prototype.getStepHandler();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.initialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.initialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepEnd);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepEnd);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
17	[BUG]  [BUGGY]  if(stepEnd  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepEnd  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepEnd  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepEnd);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  if(stepEnd  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepEnd  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepEnd  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepEnd);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
19	[BUG]  [BUGGY]  doublehNew  =  t0  +  stepStart;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  t0  +  stepStart;  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  t0  +  stepStart;	  doublehNew    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  doublehNew  =  t0  +  stepEnd;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  t0  +  stepEnd;  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  t0  +  stepEnd;	  doublehNew    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  doublehNew  =  t1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  t1;  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  t1;	  doublehNew    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getRangeHandlers();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getRangeHandlers();  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getRangeHandlers();	      StepHandler    stepHandlers    =    prototype.getStepHandlers();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getRawHandlers();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getRawHandlers();  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getRawHandlers();	      StepHandler    stepHandlers    =    prototype.getStepHandlers();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(y0,  stepStart);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(y0,  stepStart);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers(y0,  stepStart);	      StepHandler    stepHandlers    =    prototype.getStepHandlers(y0);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
25	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(y);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(y);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers(y);	      StepHandler    stepHandlers    =    prototype.getStepHandlers(y0);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
26	[BUG]  [BUGGY]  doublehNew  =  Math.min(interpolator.getMaxGrowth(),  stepStart);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  Math.min(interpolator.getMaxGrowth(),  stepStart);  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  Math.min(interpolator.getMaxGrowth(),  stepStart);	  doublehNew    =    Math.max(interpolator.getMaxGrowth(),    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  doublehNew  =  Math.max(interpolator.getMaxGrowth(),  stepStart  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  Math.max(interpolator.getMaxGrowth(),  stepStart  +  1);  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  Math.max(interpolator.getMaxGrowth(),  stepStart  +  1);	  doublehNew    =    Math.max(interpolator.getMaxGrowth(),    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  doublehNew  =  Math.max(interpolator.getMinGrowth(),  stepStart);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  Math.max(interpolator.getMinGrowth(),  stepStart);  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  Math.max(interpolator.getMinGrowth(),  stepStart);	  doublehNew    =    Math.max(interpolator.getMaxGrowth(),    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  doublehNew  =  Math.max(interpolator.getMaxGrowth(),  stepStart,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  Math.max(interpolator.getMaxGrowth(),  stepStart,  1);  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  Math.max(interpolator.getMaxGrowth(),  stepStart,  1);	  doublehNew    =    Math.max(interpolator.getMaxGrowth(),    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    if(!lastStep)    {    return    rki;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
31	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(prototype!=  null)  {  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(prototype!=  null)  {  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    if(!lastStep)    {    return    rki;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    if(!lastStep)    {    return    rki;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(t0,  stepStart);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(t0,  stepStart);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers(t0,  stepStart);	      StepHandler    stepHandlers    =    prototype.getStepHandlers(stepStart);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
34	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(yStart);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(yStart);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers(yStart);	      StepHandler    stepHandlers    =    prototype.getStepHandlers(stepStart);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
35	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    t,    eventHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    t,    eventHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    t,    eventHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(prototype!=  null)  {  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
43	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEvents())    {    addEndTimeChecker(t0,    handler,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
44	[BUG]  [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEvents())    {    addEndTimeChecker(t0,    handler,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
45	[BUG]  [BUGGY]  if(stepStart!=  1)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart!=  1)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart!=  1)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  t,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEvents())    {    addEndTimeChecker(t0,    handler,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  rki  :  proto.copy())  {  if(!lastStep)  {  return  rki;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  rki  :  proto.copy())  {  if(!lastStep)  {  return  rki;  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  rki  :  proto.copy())  {  if(!lastStep)  {  return  rki;  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    if(!lastStep)    {    return    rki;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
47	[BUG]  [BUGGY]  StepHandler  stepHandler  =  rki.getStepHandler();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandler  =  rki.getStepHandler();  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandler  =  rki.getStepHandler();	      StepHandler    stepHandler    =    prototype.getStepHandler();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
48	[BUG]  [BUGGY]  if(lastStep)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(lastStep)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(lastStep)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  if(prototype!=  null)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(prototype!=  null)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(prototype!=  null)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  ==  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    t,    eventHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(x0);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(x0);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers(x0);	      StepHandler    stepHandlers    =    prototype.getStepHandlers(y0);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
52	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(stepStart  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(stepStart  -  1);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers(stepStart  -  1);	      StepHandler    stepHandlers    =    prototype.getStepHandlers(stepStart);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
53	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(stepStart  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(stepStart  +  1);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers(stepStart  +  1);	      StepHandler    stepHandlers    =    prototype.getStepHandlers(stepStart);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
54	[BUG]  [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  proto.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  for(RungeKuttaStepInterpolator  rki  :  proto.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	for(RungeKuttaStepInterpolator  rki  :  proto.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.initialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
55	[BUG]  [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  doublehNew  =  Math.max(interpolator.getMaxGrowth(),  stepStart  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  Math.max(interpolator.getMaxGrowth(),  stepStart  -  1);  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  Math.max(interpolator.getMaxGrowth(),  stepStart  -  1);	  doublehNew    =    Math.max(interpolator.getMaxGrowth(),    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
58	[BUG]  [BUGGY]  doublehNew  =  Math.min(interpolator.getMaxGrowth(),  stepStart  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  Math.min(interpolator.getMaxGrowth(),  stepStart  +  1);  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  Math.min(interpolator.getMaxGrowth(),  stepStart  +  1);	  doublehNew    =    Math.max(interpolator.getMaxGrowth(),    stepStart);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  if(prototype!=  null)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(prototype!=  null)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(prototype!=  null)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
60	[BUG]  [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  stepHandlers,  eventHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  stepHandlers,  eventHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  stepHandlers,  eventHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    handler,    t,    eventHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  rki.initialize(this,  yTmp,  yDotK,  stepStart);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  rki.initialize(this,  yTmp,  yDotK,  stepStart);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	rki.initialize(this,  yTmp,  yDotK,  stepStart);	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.initialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
62	[BUG]  [BUGGY]  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  proto.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  proto.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  proto.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.initialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
63	[BUG]  [BUGGY]  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepEnd);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepEnd);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepEnd);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.initialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
64	[BUG]  [BUGGY]  doublehNew  =  t0  +  stepHandlers.length;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  doublehNew  =  t0  +  stepHandlers.length;  [BUGGY]    boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	doublehNew  =  t0  +  stepHandlers.length;	  doublehNew    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  StepHandler  stepHandler  =  prototype.getStepHandler(null);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandler  =  prototype.getStepHandler(null);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandler  =  prototype.getStepHandler(null);	      StepHandler    stepHandler    =    prototype.getStepHandler();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
66	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(stepStart,  stepOffset);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(stepStart,  stepOffset);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers(stepStart,  stepOffset);	      StepHandler    stepHandlers    =    prototype.getStepHandlers(stepStart);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  stepHandlers,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  stepHandlers,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEvents())  {  addEndTimeChecker(t0,  handler,  stepHandlers,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEvents())    {    addEndTimeChecker(t0,    handler,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  stepHandlers,  eventsHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  stepHandlers,  eventsHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart!=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  handler,  stepHandlers,  eventsHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    handler,    t,    eventsHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
69	[BUG]  [BUGGY]  rki.reinitialize(this,  yTmp,  yDotK,  error);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  rki.reinitialize(this,  yTmp,  yDotK,  error);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	rki.reinitialize(this,  yTmp,  yDotK,  error);	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
70	[BUG]  [BUGGY]  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	rki.reinitialize(this,  yTmp,  yDotK,  stepEnd);	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepEnd);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  if(!lastStep)  {  return  rki;  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    if(!lastStep)    {    return    rki;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
72	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers2();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers2();  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers2();	      StepHandler    stepHandlers    =    prototype.getStepHandlers();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
73	[BUG]  [BUGGY]  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	rki.reinitialize(this,  yTmp,  yDotK,  stepStart,  error);	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart,  error);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  >  0)  {  for(RungeKuttaStepInterpolator  rki  :  prototype.copy())  {  rki.initialize(this,  yTmp,  yDotK,  stepStart,  error);  }	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart,    error);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(y0,  t1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  StepHandler  stepHandlers  =  prototype.getStepHandlers(y0,  t1);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	StepHandler  stepHandlers  =  prototype.getStepHandlers(y0,  t1);	      StepHandler    stepHandlers    =    prototype.getStepHandlers(y0);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventHandlersManager);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventHandlersManager);  }  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	if(stepStart  >=  0)  {  for(RungeKuttaStepInterpolator  handler  :  prototype.getEventsManager())  {  addEndTimeChecker(t0,  t,  eventHandlersManager);  }	      if(stepStart!=    0)    {    for(RungeKuttaStepInterpolator    handler    :    prototype.getEventsManager())    {    addEndTimeChecker(t0,    t,    eventHandlersManager);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
77	[BUG]  [BUGGY]  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RungeKuttaStepInterpolator  rki  =  (RungeKuttaStepInterpolator)  prototype.copy();  rki.reinitialize(this,  yTmp,  yDotK,  forward);  interpolator  =  rki;  }  else  {  interpolator  =  new  DummyStepInterpolator(yTmp,  forward);  }  interpolator.storeTime(t0);  stepStart  =  t0;    [BUGGY]  rki.reinitialize(this,  yTmp,  yDotK,  stepStart);  [BUGGY]    doublehNew=  0;  boolean  firstTime  =  true;  for  (StepHandler  handler  :  stepHandlers)  {  handler.reset();  }  CombinedEventsManager  manager  =  addEndTimeChecker(t0,  t,  eventsHandlersManager);  boolean  lastStep  =  false;  while  (!lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	rki.reinitialize(this,  yTmp,  yDotK,  stepStart);	      if(stepStart    >    0)    {    for(RungeKuttaStepInterpolator    rki    :    prototype.copy())    {    rki.reinitialize(this,    yTmp,    yDotK,    stepStart);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
