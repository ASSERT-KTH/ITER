bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] scale = new double[y0.length]; [FE] AssertionError [CONTEXT] for (boolean loop = true; loop;) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { [BUGGY] scale = new double[y0.length]; [BUGGY] java.util.Arrays.fill(scale, scalAbsoluteTolerance); } else { scale = vecAbsoluteTolerance; } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (boolean loop = true; loop;) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { [BUGGY] [BUGGY] scale = new double[y0.length]; java.util.Arrays.fill(scale, scalAbsoluteTolerance); } else { scale = vecAbsoluteTolerance; } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	add	
3	[BUG] [BUGGY] java.util.Arrays.fill(scale, scalAbsoluteTolerance); [FE] AssertionError [CONTEXT] if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { scale = new double[y0.length]; [BUGGY] java.util.Arrays.fill(scale, scalAbsoluteTolerance); [BUGGY] } else { scale = vecAbsoluteTolerance; } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { scale = new double[y0.length]; [BUGGY] [BUGGY] java.util.Arrays.fill(scale, scalAbsoluteTolerance); } else { scale = vecAbsoluteTolerance; } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	add	
5	[BUG] [BUGGY] interpolator.storeTime(stepStart + stepSize); [FE] AssertionError [CONTEXT] sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  error = estimateError(yDotK, y, yTmp, stepSize); if (error <= 1.0) {  [BUGGY] interpolator.storeTime(stepStart + stepSize); [BUGGY] if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {  loop = false; } else {  hNew = dt; } } else { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }  error = estimateError(yDotK, y, yTmp, stepSize); if (error <= 1.0) {  [BUGGY] [BUGGY] interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {  loop = false; } else {  hNew = dt; } } else { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	288	288	1	add	
7	[BUG] [BUGGY] if (manager.evaluateStep(interpolator)) { [FE] AssertionError [CONTEXT] } yTmp[j] = y[j] + stepSize * sum; }  error = estimateError(yDotK, y, yTmp, stepSize); if (error <= 1.0) {  interpolator.storeTime(stepStart + stepSize); [BUGGY] if (manager.evaluateStep(interpolator)) { [BUGGY] final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {  loop = false; } else {  hNew = dt; } } else {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } yTmp[j] = y[j] + stepSize * sum; }  error = estimateError(yDotK, y, yTmp, stepSize); if (error <= 1.0) {  interpolator.storeTime(stepStart + stepSize); [BUGGY] [BUGGY] if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {  loop = false; } else {  hNew = dt; } } else {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	289	289	1	add	
9	[BUG] [BUGGY] loop = false; [FE] AssertionError [CONTEXT] final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {  loop = false; } else {  hNew = dt; } } else {  [BUGGY] loop = false; [BUGGY] } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {  loop = false; } else {  hNew = dt; } } else {  [BUGGY] [BUGGY] loop = false; } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	add	
11	[BUG] [BUGGY] final double nextStep = stepStart + stepSize; [FE] AssertionError [CONTEXT]  final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } }  [BUGGY] final double nextStep = stepStart + stepSize; [BUGGY] System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } }  [BUGGY] [BUGGY] final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	add	
13	[BUG] [BUGGY] System.arraycopy(yTmp, 0, y, 0, y0.length); [FE] AssertionError [CONTEXT] final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } }  final double nextStep = stepStart + stepSize; [BUGGY] System.arraycopy(yTmp, 0, y, 0, y0.length); [BUGGY] manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep;  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } }  final double nextStep = stepStart + stepSize; [BUGGY] [BUGGY] System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep;  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	add	
15	[BUG] [BUGGY] manager.stepAccepted(nextStep, y); [FE] AssertionError [CONTEXT] Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); [BUGGY] manager.stepAccepted(nextStep, y); [BUGGY] lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); [BUGGY] [BUGGY] manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	316	316	1	add	
17	[BUG] [BUGGY] lastStep = manager.stop(); [FE] AssertionError [CONTEXT] Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); [BUGGY] lastStep = manager.stop(); [BUGGY]   interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); [BUGGY] [BUGGY] lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	add	
19	[BUG] [BUGGY] interpolator.storeTime(nextStep); [FE] AssertionError [CONTEXT] }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  [BUGGY] interpolator.storeTime(nextStep); [BUGGY] for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) {  System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length); }  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  [BUGGY] [BUGGY] interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) {  System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length); }  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	add	
21	[BUG] [BUGGY] for (StepHandler handler : stepHandlers) { [FE] AssertionError [CONTEXT] }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); [BUGGY] for (StepHandler handler : stepHandlers) { [BUGGY] handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) {  System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length); } if (manager.reset(stepStart, y) && ! lastStep) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	321	321	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); [BUGGY] [BUGGY] for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) {  System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length); } if (manager.reset(stepStart, y) && ! lastStep) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	321	321	1	add	
23	[BUG] [BUGGY] handler.handleStep(interpolator, lastStep); [FE] AssertionError [CONTEXT]  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { [BUGGY] handler.handleStep(interpolator, lastStep); [BUGGY] } stepStart = nextStep; if (fsal) {  System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length); } if (manager.reset(stepStart, y) && ! lastStep) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop();  interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { [BUGGY] [BUGGY] handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) {  System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length); } if (manager.reset(stepStart, y) && ! lastStep) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	add	
25	[BUG] [BUGGY] super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { [BUGGY] super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [BUGGY]  this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	116	116	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { [BUGGY] [BUGGY] super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	116	116	1	add	
27	[BUG] [BUGGY] this.fsal= fsal; [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [BUGGY] this.fsal= fsal; [BUGGY] this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	118	118	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [BUGGY] [BUGGY] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	118	118	1	add	
29	[BUG] [BUGGY] this.c = c; [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; [BUGGY] this.c = c; [BUGGY] this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	119	119	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; [BUGGY] [BUGGY] this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	119	119	1	add	
31	[BUG] [BUGGY] this.a = a; [FE] AssertionError [CONTEXT] final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; [BUGGY] this.a = a; [BUGGY] this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0);  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	120	120	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; [BUGGY] [BUGGY] this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0);  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	120	120	1	add	
33	[BUG] [BUGGY] this.b = b; [FE] AssertionError [CONTEXT] final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; [BUGGY] this.b = b; [BUGGY] this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	121	121	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; [BUGGY] [BUGGY] this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	121	121	1	add	
35	[BUG] [BUGGY] this.prototype = prototype; [FE] AssertionError [CONTEXT] final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; [BUGGY] this.prototype = prototype; [BUGGY]  exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	122	122	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; [BUGGY] [BUGGY] this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	122	122	1	add	
37	[BUG] [BUGGY] exp = -1.0 / getOrder(); [FE] AssertionError [CONTEXT] final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; [BUGGY] exp = -1.0 / getOrder(); [BUGGY]   setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	124	124	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; [BUGGY] [BUGGY] exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	124	124	1	add	
39	[BUG] [BUGGY] setSafety(0.9); [FE] AssertionError [CONTEXT] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  [BUGGY] setSafety(0.9); [BUGGY] setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	127	127	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  [BUGGY] [BUGGY] setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	127	127	1	add	
41	[BUG] [BUGGY] setMinReduction(0.2); [FE] AssertionError [CONTEXT] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); [BUGGY] setMinReduction(0.2); [BUGGY] setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	128	128	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); [BUGGY] [BUGGY] setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	128	128	1	add	
43	[BUG] [BUGGY] setMaxGrowth(10.0); [FE] AssertionError [CONTEXT] this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); [BUGGY] setMaxGrowth(10.0); [BUGGY]  } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	129	129	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); [BUGGY] [BUGGY] setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	129	129	1	add	
45	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); [BUGGY] } [BUGGY]  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	131	131	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); [BUGGY] [BUGGY] } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	131	131	1	add	
47	[BUG] [BUGGY] sanityChecks(equations, t0, y0, t, y); [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { [BUGGY] sanityChecks(equations, t0, y0, t, y); [BUGGY] setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	197	197	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { [BUGGY] [BUGGY] sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	197	197	1	add	
49	[BUG] [BUGGY] setEquations(equations); [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); [BUGGY] setEquations(equations); [BUGGY] resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length]; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	198	198	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); [BUGGY] [BUGGY] setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length]; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	198	198	1	add	
51	[BUG] [BUGGY] resetEvaluations(); [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); [BUGGY] resetEvaluations(); [BUGGY] final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	199	199	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); [BUGGY] [BUGGY] resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	199	199	1	add	
53	[BUG] [BUGGY] final boolean forward = t > t0; [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); [BUGGY] final boolean forward = t > t0; [BUGGY]   final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	200	200	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); [BUGGY] [BUGGY] final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	200	200	1	add	
55	[BUG] [BUGGY] final int stages = c.length + 1; [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  [BUGGY] final int stages = c.length + 1; [BUGGY] if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	203	203	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  [BUGGY] [BUGGY] final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	203	203	1	add	
57	[BUG] [BUGGY] if (y != y0) { [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; [BUGGY] if (y != y0) { [BUGGY] System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; [BUGGY] [BUGGY] if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	204	204	1	add	
59	[BUG] [BUGGY] System.arraycopy(y0, 0, y, 0, y0.length); [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { [BUGGY] System.arraycopy(y0, 0, y, 0, y0.length); [BUGGY] } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	205	205	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { [BUGGY] [BUGGY] System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	205	205	1	add	
61	[BUG] [BUGGY] final double[][] yDotK = new double[stages][y0.length]; [FE] AssertionError [CONTEXT] sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } [BUGGY] final double[][] yDotK = new double[stages][y0.length]; [BUGGY] final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	207	207	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } [BUGGY] [BUGGY] final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	207	207	1	add	
63	[BUG] [BUGGY] final double[] yTmp = new double[y0.length]; [FE] AssertionError [CONTEXT] setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; [BUGGY] final double[] yTmp = new double[y0.length]; [BUGGY]   AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	208	208	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] setEquations(equations); resetEvaluations(); final boolean forward = t > t0;  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; [BUGGY] [BUGGY] final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	208	208	1	add	
65	[BUG] [BUGGY] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { [FE] AssertionError [CONTEXT]  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; [BUGGY] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { [BUGGY] final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	212	212	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; [BUGGY] [BUGGY] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	212	212	1	add	
67	[BUG] [BUGGY] final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); [FE] AssertionError [CONTEXT] final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { [BUGGY] final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); [BUGGY] rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	213	213	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { [BUGGY] [BUGGY] final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	213	213	1	add	
69	[BUG] [BUGGY] rki.reinitialize(this, yTmp, yDotK, forward); [FE] AssertionError [CONTEXT] if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); [BUGGY] rki.reinitialize(this, yTmp, yDotK, forward); [BUGGY] interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	214	214	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];  AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); [BUGGY] [BUGGY] rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	214	214	1	add	
71	[BUG] [BUGGY] interpolator = rki; [FE] AssertionError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); [BUGGY] interpolator = rki; [BUGGY] } else { interpolator = new DummyStepInterpolator(yTmp, forward); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	215	215	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); [BUGGY] [BUGGY] interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	215	215	1	add	
73	[BUG] [BUGGY] } else { [FE] AssertionError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; [BUGGY] } else { [BUGGY] interpolator = new DummyStepInterpolator(yTmp, forward); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	216	216	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; [BUGGY] [BUGGY] } else { interpolator = new DummyStepInterpolator(yTmp, forward); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	216	216	1	add	
75	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	219	219	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	219	219	1	add	
77	[BUG] [BUGGY] stepStart = t0; [FE] AssertionError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  [BUGGY] stepStart = t0; [BUGGY] doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	222	222	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  [BUGGY] [BUGGY] stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	222	222	1	add	
79	[BUG] [BUGGY] doublehNew= 0; [FE] AssertionError [CONTEXT] final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; [BUGGY] doublehNew= 0; [BUGGY] boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; [BUGGY] [BUGGY] doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	223	223	1	add	
81	[BUG] [BUGGY] boolean firstTime = true; [FE] AssertionError [CONTEXT] rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; [BUGGY] boolean firstTime = true; [BUGGY] for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	224	224	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; [BUGGY] [BUGGY] boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	224	224	1	add	
83	[BUG] [BUGGY] for (StepHandler handler : stepHandlers) { [FE] AssertionError [CONTEXT] interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; [BUGGY] for (StepHandler handler : stepHandlers) { [BUGGY] handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift();  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	225	225	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; [BUGGY] [BUGGY] for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift();  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	225	225	1	add	
85	[BUG] [BUGGY] handler.reset(); [FE] AssertionError [CONTEXT] } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { [BUGGY] handler.reset(); [BUGGY] } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); double error = 0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	226	226	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { [BUGGY] [BUGGY] handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); double error = 0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	226	226	1	add	
87	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); [BUGGY] } [BUGGY] CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); double error = 0; for (boolean loop = true; loop;) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	227	227	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); [BUGGY] [BUGGY] } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); double error = 0; for (boolean loop = true; loop;) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	227	227	1	add	
89	[BUG] [BUGGY] CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); [FE] AssertionError [CONTEXT] } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } [BUGGY] CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); [BUGGY] boolean lastStep = false;  while (!lastStep) { interpolator.shift(); double error = 0; for (boolean loop = true; loop;) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	228	228	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } [BUGGY] [BUGGY] CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); double error = 0; for (boolean loop = true; loop;) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	228	228	1	add	
91	[BUG] [BUGGY] boolean lastStep = false; [FE] AssertionError [CONTEXT] interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); [BUGGY] boolean lastStep = false; [BUGGY]   while (!lastStep) { interpolator.shift(); double error = 0; for (boolean loop = true; loop;) { if (firstTime || !fsal) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	229	229	1	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] interpolator.storeTime(t0);  stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); [BUGGY] [BUGGY] boolean lastStep = false;  while (!lastStep) { interpolator.shift(); double error = 0; for (boolean loop = true; loop;) { if (firstTime || !fsal) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	229	229	1	add	
93	[BUG] [BUGGY] while (!lastStep) { [FE] AssertionError [CONTEXT] stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  [BUGGY] while (!lastStep) { [BUGGY]  interpolator.shift(); double error = 0; for (boolean loop = true; loop;) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	232	232	1	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] stepStart = t0; doublehNew= 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  [BUGGY] [BUGGY] while (!lastStep) { interpolator.shift(); double error = 0; for (boolean loop = true; loop;) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	232	232	1	add	
95	[BUG] [BUGGY] interpolator.shift(); [FE] AssertionError [CONTEXT] boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { [BUGGY] interpolator.shift(); [BUGGY]  double error = 0; for (boolean loop = true; loop;) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	234	234	1	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { [BUGGY] [BUGGY] interpolator.shift(); double error = 0; for (boolean loop = true; loop;) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	234	234	1	add	
97	[BUG] [BUGGY] double error = 0; [FE] AssertionError [CONTEXT] handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); [BUGGY] double error = 0; [BUGGY] for (boolean loop = true; loop;) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); [BUGGY] [BUGGY] double error = 0; for (boolean loop = true; loop;) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	236	236	1	add	
99	[BUG] [BUGGY] for (boolean loop = true; loop;) { [FE] AssertionError [CONTEXT] } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); double error = 0; [BUGGY] for (boolean loop = true; loop;) { [BUGGY]  if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { scale = new double[y0.length]; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	237	237	1	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false;  while (!lastStep) { interpolator.shift(); double error = 0; [BUGGY] [BUGGY] for (boolean loop = true; loop;) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { scale = new double[y0.length]; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] boolean firstTime forward fsal lastStep loop nextIsLast CombinedEventsManager manager double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yTmp double dt error exp factor hNew maxGrowth maxStep minReduction minStep nextStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH stopTime sum t t0 double[][] a yDotK AbstractStepInterpolator interpolator StepHandler handler RungeKuttaStepInterpolator prototype rki int j k l stages FirstOrderDifferentialEquations equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.4472135954999579	237	237	1	add	
