bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hNew  =  filterStep(extStep  *  factor,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(extStep  *  factor,  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(extStep  *  factor,  nextStep,  false);	  hNew    =    filterStep(extStep    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
2	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  nextStep,  false);	  hNew    =    filterStep(extStep    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
3	[BUG]  [BUGGY]  hNew  =  filterStep(exp,  nextStep  *  factor,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(exp,  nextStep  *  factor,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(exp,  nextStep  *  factor,  false);	  hNew    =    filterStep(extStep    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
4	[BUG]  [BUGGY]  hNew  =  filterStep(input,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(input,  nextStep);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(input,  nextStep);	  hNew    =    filterStep(hNew,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
5	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  input);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  input);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  stepStart,  input);	  hNew    =    filterStep(hNew,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
6	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  stepSize,  nextStep,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  nextStep,  0,  y.length);	  System.arraycopy(y0,    0,    ytmp,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  nextStep.length);	  System.arraycopy(y0,    0,    ytmp,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  nextStep.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  nextStep.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  nextStep.length  -  1);	  System.arraycopy(y0,    0,    ytmp,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  y0.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  0,  y0.length  -  1);	  System.arraycopy(y0,    0,    y1,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  nextStep.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  nextStep.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  nextStep.length  -  1);	  System.arraycopy(y0,    0,    y1,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  hNew.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  hNew.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  hNew.length  -  1);	  System.arraycopy(y0,    0,    y1,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  hNew.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  hNew.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  hNew.length  -  1);	  System.arraycopy(y0,    0,    ytmp,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
14	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  stepStart,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  stepStart,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  stepSize,  stepStart,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    stepStart,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
15	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  stepStart,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  stepStart,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  stepStart,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    stepStart,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
16	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  nextStep,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  nextStep,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  nextStep,  true);	  hNew    =    filterStep(nextStep    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
17	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  forward,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  forward,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  forward,  true);	  hNew    =    filterStep(nextStep    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
18	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  input,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  input,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  input,  false);	  hNew    =    filterStep(nextStep    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
19	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  back,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  back,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  back,  false);	  hNew    =    filterStep(nextStep    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  nextStep,  0,  nextStep.length);	  System.arraycopy(y0,    0,    y1,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
21	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  firstTime);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  error,  firstTime);	  hNew    =    filterStep(nextStep,    nextStep,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
22	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  error);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  stepStart,  error);	  hNew    =    filterStep(nextStep,    nextStep,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
23	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  exp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  exp);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  error,  exp);	  hNew    =    filterStep(nextStep,    nextStep,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
24	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  back,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  back,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  stepSize,  back,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    back,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
25	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  back,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  back,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  back,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    back,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
26	[BUG]  [BUGGY]  hNew  =  filterStep(back  *  nextStep,  stepSize,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(back  *  nextStep,  stepSize,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(back  *  nextStep,  stepSize,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    back,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
27	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  error,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  error,  forward,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  stepSize,  error,  forward,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
28	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  error,  nextStep,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
29	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  stepStart,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  stepStart,  error,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  stepStart,  error,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
30	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextStep,  error,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextStep,  error,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  nextStep,  error,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
31	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  nextT,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  nextT,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  stepSize,  nextT,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    nextT,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
32	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  nextStep,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    nextT,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
33	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  error,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  error,  false);	  hNew    =    filterStep(nextStep    *    stepSize,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
34	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  error,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  error,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  nextStep,  error,  true);	  hNew    =    filterStep(nextStep    *    stepSize,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
35	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  error,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  nextStep,  error,  false);	  hNew    =    filterStep(nextStep    *    stepSize,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  0,  hNew.length);	  System.arraycopy(y0,    0,    y1,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(hNew,  0,  y0,  0,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(hNew,  0,  y0,  0,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(hNew,  0,  y0,  0,  hNew.length);	  System.arraycopy(y0,    0,    y1,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  hNew,  0,  hSize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  hNew,  0,  hSize.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  hNew,  0,  hSize.length);	  System.arraycopy(y0,    0,    y1,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
39	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  true,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  true,  nextStep);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  true,  nextStep);	  hNew    =    filterStep(nextStep,    error,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
40	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  true,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  true,  firstTime);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  true,  firstTime);	  hNew    =    filterStep(nextStep,    error,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
41	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  true,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  true,  firstTime);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  true,  firstTime);	  hNew    =    filterStep(nextStep,    nextStep,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
42	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  true,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  true,  stepStart);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  true,  stepStart);	  hNew    =    filterStep(nextStep,    nextStep,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
43	[BUG]  [BUGGY]  hNew  =  filterStep(t0,  nextStep,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(t0,  nextStep,  nextStep);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(t0,  nextStep,  nextStep);	  hNew    =    filterStep(nextStep,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
44	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  factor);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  factor);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  factor);	  hNew    =    filterStep(nextStep,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
45	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  factor);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  factor);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  hNew,  factor);	  hNew    =    filterStep(hNew,    nextStep,    factor);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
46	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  nextStep,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  nextStep,  firstTime);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  nextStep,  firstTime);	  hNew    =    filterStep(hNew,    nextStep,    factor);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
47	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  nextStep,  stepStart);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  nextStep,  stepStart);	  hNew    =    filterStep(hNew,    nextStep,    factor);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
48	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep,  stepStart);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  nextStep,  stepStart);	  hNew    =    filterStep(nextStep,    error,    nextStep,    forward);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
49	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  nextStep);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  error,  nextStep);	  hNew    =    filterStep(nextStep,    error,    nextStep,    forward);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
50	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  forward);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  forward);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  stepStart,  forward);	  hNew    =    filterStep(nextStep,    error,    nextStep,    forward);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  nextStep,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  nextStep,  0,  y0.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  nextStep,  0,  y0.length);	  System.arraycopy(y0,    0,    nextStep,    hNew,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  0,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y0,  hNew,  0,  nextStep.length);	  System.arraycopy(y0,    0,    nextStep,    hNew,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
53	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  factor,  nextStep,  true);	  hNew    =    filterStep(stepSize    *    factor,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
54	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  stepSize,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  stepSize,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  stepSize,  false);	  hNew    =    filterStep(stepSize    *    factor,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
55	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  factor,  nextStep,  null);	  hNew    =    filterStep(stepSize    *    factor,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(y,  0,  hNew,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y,  0,  hNew,  0,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  hNew,  0,  y.length);	  System.arraycopy(y0,    0,    hNew,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
57	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  forward);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  forward);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  stepStart,  forward);	  hNew    =    filterStep(hNew,    nextStep,    forward);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
58	[BUG]  [BUGGY]  hNew  =  filterStep(t0,  nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(t0,  nextStep,  hNew);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(t0,  nextStep,  hNew);	  hNew    =    filterStep(hNew,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
59	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  t0);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  hNew,  t0);	  hNew    =    filterStep(hNew,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
60	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  y);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  y);	  hNew    =    filterStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
61	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep  +  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep  +  1);	  hNew    =    filterStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  ySize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  ySize.length);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(yTmp,  0,  y,  0,  ySize.length);	  System.arraycopy(yTmp,    0,    y0,    0,    ySize.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  ySize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  ySize.length);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(yTmp,  0,  hNew,  0,  ySize.length);	  System.arraycopy(yTmp,    0,    y0,    0,    ySize.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(ySize,  0,  y0,  0,  ySize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(ySize,  0,  y0,  0,  ySize.length);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(ySize,  0,  y0,  0,  ySize.length);	  System.arraycopy(yTmp,    0,    y0,    0,    ySize.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(yTmp,  0,  hNew,  0,  yTmp.length);	  System.arraycopy(y0,    0,    hNew,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  nextStep,  0,  hNew.length);	  System.arraycopy(y0,    0,    hNew,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  nextStep.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  nextStep.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  0,  nextStep.length  -  1);	  System.arraycopy(y0,    0,    hNew,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y,  0,  nextStep.length);	  System.arraycopy(y0,    0,    hNew,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  hNew);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  hNew);	  System.arraycopy(y0,    0,    ytmp,    0,    y1.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ys,  0,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ys,  0,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ys,  0,  hNew.length);	  System.arraycopy(y0,    0,    ys,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ys,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ys,  0,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ys,  0,  nextStep.length);	  System.arraycopy(y0,    0,    ys,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ys,  0,  ySize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ys,  0,  ySize.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ys,  0,  ySize.length);	  System.arraycopy(y0,    0,    ys,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
73	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  firstTime);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  firstTime);	  hNew    =    filterStep(nextStep,    nextStep,    safety);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
74	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  safety);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  safety);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  stepStart,  safety);	  hNew    =    filterStep(nextStep,    nextStep,    safety);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  hNew.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  hNew.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  hNew.length  -  1);	  System.arraycopy(y0,    0,    yTmp,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  nextStep.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  nextStep.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  nextStep.length  -  1);	  System.arraycopy(y0,    0,    yTmp,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  y.length  -  1);	  System.arraycopy(y0,    0,    yTmp,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  ySize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  ySize.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y0,  0,  ySize.length);	  System.arraycopy(y,    0,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
79	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  forward,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  forward,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  stepSize,  forward,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    forward,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
80	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  forward,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  nextStep,  forward,  false);	  hNew    =    filterStep(nextStep    *    stepSize,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y0,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y,  0,  y0,  0,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  y0,  0,  y.length);	  System.arraycopy(y0,    0,    y0,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
82	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  error,  true);	  hNew    =    filterStep(nextStep,    error,    nextStep,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  nextStep);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  nextStep);	  System.arraycopy(y0,    0,    yTmp,    0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
84	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  hNew,  factor);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  hNew,  factor);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  hNew,  factor);	  System.arraycopy(y0,    0,    yTmp,    0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  hNew);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  hNew);	  System.arraycopy(y0,    0,    yTmp,    0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yNew,  0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yNew,  0,  hNew);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yNew,  0,  hNew);	  System.arraycopy(y0,    0,    yTmp,    0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
87	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  error,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  error,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  error,  true);	  hNew    =    filterStep(nextStep    *    stepSize,    error,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
88	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  stepSize,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  stepSize,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  stepSize,  true);	  hNew    =    filterStep(nextStep    *    stepSize,    error,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yNew,  0,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yNew,  0,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yNew,  0,  hNew.length);	  System.arraycopy(y0,    0,    ytmp,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
90	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  forward,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  forward,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  nextStep,  forward,  true);	  hNew    =    filterStep(nextStep    *    step,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
91	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >=  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >=  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >=  maxGrowth)  {  throw  new  IllegalStateException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
92	[BUG]  [BUGGY]  for(int  y  =  1;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  for(int  y  =  1;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	for(int  y  =  1;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalStateException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
93	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  <  =  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  <  =  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  <  =  maxGrowth)  {  throw  new  IllegalStateException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
94	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >=  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >=  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >=  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
95	[BUG]  [BUGGY]  for(int  y  =  1;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  for(int  y  =  1;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	for(int  y  =  1;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
96	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  <  =  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  <  =  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  <  =  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
97	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  0,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  0,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  hNew,  0,  hNew.length);	  System.arraycopy(y0,    0,    y1,    1,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(hNew,  0,  y0,  1,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(hNew,  0,  y0,  1,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(hNew,  0,  y0,  1,  hNew.length);	  System.arraycopy(y0,    0,    y1,    1,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  2,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  2,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  2,  hNew.length);	  System.arraycopy(y0,    0,    y1,    1,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y2.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y2.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  y2.length);	  System.arraycopy(y0,    0,    y2,    0,    y1.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y3,  0,  y1.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y3,  0,  y1.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y3,  0,  y1.length);	  System.arraycopy(y0,    0,    y2,    0,    y1.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
102	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  input,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  input,  stepStart);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  input,  stepStart);	  hNew    =    filterStep(nextStep,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
103	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  input,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  input,  nextStep);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  input,  nextStep);	  hNew    =    filterStep(nextStep,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
104	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  1,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  1,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  1,  nextStep.length);	  System.arraycopy(y0,    0,    y1,    1,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
105	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  nextStep,  hNew.length);	  System.arraycopy(y0,    0,    y1,    1,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  hNew);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  nextStep,  hNew);	  System.arraycopy(y0,    0,    y1,    1,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
107	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  firstTime,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  firstTime,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  factor,  nextStep,  firstTime,  false);	  hNew    =    filterStep(stepSize    *    factor,    firstTime,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
108	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  firstTime,  nextStep,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  firstTime,  nextStep,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  factor,  firstTime,  nextStep,  true);	  hNew    =    filterStep(stepSize    *    factor,    firstTime,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
109	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  error,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  factor,  nextStep,  error,  false);	  hNew    =    filterStep(stepSize    *    factor,    firstTime,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
110	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error  +  1);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  error  +  1);	  hNew    =    filterStep(nextStep,    error,    nextStep    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
111	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart  +  1);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  stepStart  +  1);	  hNew    =    filterStep(nextStep,    error,    nextStep    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
112	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep  +  2);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  nextStep  +  2);	  hNew    =    filterStep(nextStep,    error,    nextStep    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
113	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y2,  0,  y.length);	  System.arraycopy(y0,    0,    y1,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
114	[BUG]  [BUGGY]  hNew  =  filterStep(exp,  nextStep  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(exp,  nextStep  *  factor,  forward,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(exp,  nextStep  *  factor,  forward,  false);	  hNew    =    filterStep(exp,    stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
115	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  stepSize  *  factor,  forward,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  stepSize  *  factor,  forward,  false);	  hNew    =    filterStep(exp,    stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
116	[BUG]  [BUGGY]  hNew  =  filterStep(exp,  stepSize  *  factor,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(exp,  stepSize  *  factor,  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(exp,  stepSize  *  factor,  nextStep,  false);	  hNew    =    filterStep(exp,    stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
117	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepSize);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  stepSize);	  hNew    =    filterStep(nextStep,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
118	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  stepStart,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  stepStart,  nextStep);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  stepStart,  nextStep);	  hNew    =    filterStep(nextStep,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
119	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepEnd);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  stepEnd);	  hNew    =    filterStep(nextStep,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
120	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  stepStart,  true);	  hNew    =    filterStep(nextStep,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
121	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  exp,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  exp,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  exp,  null);	  hNew    =    filterStep(nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
122	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  error,  null);	  hNew    =    filterStep(nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  ySize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  ySize.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  0,  ySize.length);	  System.arraycopy(y0,    0,    yTmp,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  yTmp.length);	  System.arraycopy(yTmp,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y,  0,  y,  0,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  y,  0,  yTmp.length);	  System.arraycopy(yTmp,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
126	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  error,  false);	  hNew    =    filterStep(nextStep,    error,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
127	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep,  null,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep,  null,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  nextStep,  null,  true);	  hNew    =    filterStep(nextStep,    error,    nextStep,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
128	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  safety,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  safety,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  safety,  null);	  hNew    =    filterStep(nextStep,    error,    nextStep,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  hNew,  yTmp.length);	  System.arraycopy(y0,    0,    y1,    1,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  1,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  1,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  1,  yTmp.length);	  System.arraycopy(y0,    0,    y1,    1,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y2,  1,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y2,  1,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y2,  1,  yTmp.length);	  System.arraycopy(y0,    0,    y1,    1,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
132	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  hNew,  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  nextStep,  hNew,  0,  y0.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  nextStep,  hNew,  0,  y0.length  -  1);	  System.arraycopy(y0,    0,    nextStep,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
133	[BUG]  [BUGGY]  hNew  =  filterStep(factor  *  factor,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(factor  *  factor,  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(factor  *  factor,  nextStep,  false);	  hNew    =    filterStep(factor    *    stepSize,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
134	[BUG]  [BUGGY]  hNew  =  filterStep(factor  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(factor  *  factor,  forward,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(factor  *  factor,  forward,  false);	  hNew    =    filterStep(factor    *    stepSize,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
135	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  stepStart);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  hNew,  stepStart);	  hNew    =    filterStep(hNew,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
136	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  nextStep,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  nextStep,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  stepSize,  nextStep,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    nextStep,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
137	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextStep,  null,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextStep,  null,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  nextStep,  null,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    nextStep,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
138	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  error,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  stepSize,  error,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  stepSize,  error,  null);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
139	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  exp,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  exp,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  error,  exp,  null);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
140	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  forward,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  forward,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  forward,  null);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
141	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  exp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  exp);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  error,  exp);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
142	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  hNew.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  hNew.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y,  0,  hNew.length  -  1);	  System.arraycopy(y0,    0,    y,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
143	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  null);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  null);	  hNew    =    filterStep(nextStep,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
144	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  false,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  false,  nextStep);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  false,  nextStep);	  hNew    =    filterStep(nextStep,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
145	[BUG]  [BUGGY]  hNew  =  filterStep(y0,  nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(y0,  nextStep,  hNew);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(y0,  nextStep,  hNew);	  hNew    =    filterStep(hNew,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
146	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  y0);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  hNew,  y0);	  hNew    =    filterStep(hNew,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
147	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  h0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  h0);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  h0);	  hNew    =    filterStep(hNew,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
148	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  hSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  hSize);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  hSize);	  hNew    =    filterStep(hNew,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
149	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  hNew,  false);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  hNew,  false);	  hNew    =    filterStep(hNew,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  1,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y,  1,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y,  1,  y.length);	  System.arraycopy(y0,    0,    y,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  y1.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  y1.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  hNew,  y1.length);	  System.arraycopy(y0,    0,    y1,    0,    y1.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
152	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  nextStep,  yTmp.length);	  System.arraycopy(y0,    0,    y1,    1,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  2,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  2,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  2,  yTmp.length);	  System.arraycopy(y0,    0,    y1,    1,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
154	[BUG]  [BUGGY]  hNew  =  filterStep(x0,  stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(x0,  stepSize  *  factor,  forward,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(x0,  stepSize  *  factor,  forward,  false);	  hNew    =    filterStep(exp,    stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  ySize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  ySize.length);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  ySize.length);	  System.arraycopy(yTmp,    0,    y0,    0,    ySize.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
156	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  firstTime,  stepSize,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  firstTime,  stepSize,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  firstTime,  stepSize,  false);	  hNew    =    filterStep(stepSize    *    factor,    firstTime,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
157	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  stepStart,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  stepStart,  false);	  hNew    =    filterStep(nextStep,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
158	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  t0,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  t0,  t0);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  t0,  t0);	  hNew    =    filterStep(hNew,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
159	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  errors,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  errors,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  errors,  true);	  hNew    =    filterStep(nextStep    *    stepSize,    error,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
160	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  forward,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  forward,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  error,  forward,  null);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
161	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  null,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  null,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  error,  null,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
162	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  ==  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  ==  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  ==  maxGrowth)  {  throw  new  IllegalStateException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
163	[BUG]  [BUGGY]  int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalStateException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y,  1,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(yTmp,  0,  y,  1,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(yTmp,  0,  y,  1,  yTmp.length);	  System.arraycopy(yTmp,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
165	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  step,  forward,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  step,  forward,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  step,  forward,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    forward,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
166	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  step,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  step,  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  step,  nextStep,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  nextStep.length,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  nextStep.length,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  0,  nextStep.length,  yTmp.length);	  System.arraycopy(y0,    0,    hNew,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
168	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep,  forward,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep,  forward,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  nextStep,  forward,  null);	  hNew    =    filterStep(nextStep,    error,    nextStep,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  1,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y,  1,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y,  1,  hNew.length);	  System.arraycopy(y0,    0,    y,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
170	[BUG]  [BUGGY]  hNew  =  filterStep(extStep  *  factor,  forward,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(extStep  *  factor,  forward,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(extStep  *  factor,  forward,  true);	  hNew    =    filterStep(extStep    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
171	[BUG]  [BUGGY]  hNew  =  filterStep(extStep  *  factor,  back,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(extStep  *  factor,  back,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(extStep  *  factor,  back,  false);	  hNew    =    filterStep(extStep    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
172	[BUG]  [BUGGY]  hNew  =  filterStep(firstTime  *  nextStep,  back,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(firstTime  *  nextStep,  back,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(firstTime  *  nextStep,  back,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    back,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
173	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  forward,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  forward,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  forward,  true);	  hNew    =    filterStep(nextStep,    error,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
174	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  false);	  hNew    =    filterStep(stepSize    *    factor,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
175	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  1,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  1,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  1,  hNew.length);	  System.arraycopy(y0,    0,    y1,    1,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
176	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  1,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  1,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  1,  yTmp.length);	  System.arraycopy(y0,    0,    yTmp,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
177	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ys,  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ys,  0,  y0.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ys,  0,  y0.length  -  1);	  System.arraycopy(y0,    0,    ys,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
178	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  manager,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  manager,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  manager,  null);	  hNew    =    filterStep(nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
179	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  null,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  null,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  null,  true);	  hNew    =    filterStep(nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
180	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  null,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  null,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  null,  false);	  hNew    =    filterStep(nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
181	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  forward);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  forward);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  forward);	  hNew    =    filterStep(nextStep,    nextStep,    safety);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
182	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  forward,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  forward,  false);	  hNew    =    filterStep(nextStep,    nextStep,    safety);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  stepStart,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  stepStart,  0,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  stepStart,  0,  nextStep.length);	  System.arraycopy(y0,    0,    y0,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
184	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep,  factor);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  error,  nextStep,  factor);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  error,  nextStep,  factor);	  hNew    =    filterStep(nextStep,    error,    nextStep,    forward);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
185	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  nextStep,  forward);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  nextStep,  forward);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  nextStep,  forward);	  hNew    =    filterStep(hNew,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
186	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  y0.length);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  y0.length);	  hNew    =    filterStep(hNew,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
187	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  factor,  forward);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  factor,  forward);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  factor,  forward);	  hNew    =    filterStep(hNew,    nextStep,    factor);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
188	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  factor,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  factor,  nextStep);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  factor,  nextStep);	  hNew    =    filterStep(hNew,    nextStep,    factor);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
189	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  nextStep,  0,  yTmp.length);	  System.arraycopy(y0,    0,    ytmp,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  ytmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  ytmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  nextStep,  0,  ytmp.length);	  System.arraycopy(y0,    0,    ytmp,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
191	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  input,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  input,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  input,  false);	  hNew    =    filterStep(nextStep,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
192	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  input,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  input,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  input,  null);	  hNew    =    filterStep(nextStep,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
193	[BUG]  [BUGGY]  hNew  =  filterStep(input,  nextStep,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(input,  nextStep,  nextStep);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(input,  nextStep,  nextStep);	  hNew    =    filterStep(nextStep,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
194	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  y);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  y);	  hNew    =    filterStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
195	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  y0);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  y0);	  hNew    =    filterStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
196	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  stepStart,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  stepStart,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  stepStart,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    stepStart,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length  -  1,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length  -  1,  hNew);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  y0.length  -  1,  hNew);	  System.arraycopy(y0,    0,    ytmp,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
198	[BUG]  [BUGGY]  int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
199	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  ==  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  ==  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	for(int  y  =  0;  y  <  nextStep.length;  y++)  {  if(hNew  ==  maxGrowth)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
200	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  1,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  nextStep,  1,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  nextStep,  1,  y.length);	  System.arraycopy(y0,    0,    y1,    1,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
201	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  stepStart,  1,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  stepStart,  1,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  stepStart,  1,  nextStep.length);	  System.arraycopy(y0,    0,    y1,    1,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
202	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepSize);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  stepSize);	  hNew    =    filterStep(hNew,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
203	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  factor);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  factor);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  stepStart,  factor);	  hNew    =    filterStep(hNew,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  hNew,  0,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  hNew,  0,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  hNew,  0,  hNew.length);	  System.arraycopy(y0,    0,    y1,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  hNew,  y.length);	  System.arraycopy(y0,    0,    y1,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
206	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  errors,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  errors,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  errors,  false);	  hNew    =    filterStep(nextStep    *    stepSize,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
207	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  forward);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  error,  forward);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  error,  forward);	  hNew    =    filterStep(nextStep,    nextStep,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  yTmp,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  yTmp,  hNew);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  yTmp,  hNew);	  System.arraycopy(y0,    0,    y1,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  1,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  1,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ytmp,  1,  hNew.length);	  System.arraycopy(y0,    0,    ytmp,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
210	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  0,  y0.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y0,  hNew,  0,  y0.length);	  System.arraycopy(y0,    0,    nextStep,    hNew,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
211	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  hNew,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  hNew,  0,  y0.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  hNew,  0,  y0.length);	  System.arraycopy(y0,    0,    nextStep,    hNew,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
212	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  y0,  0,  y0.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  y0,  0,  y0.length);	  System.arraycopy(y0,    0,    nextStep,    hNew,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
213	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yFields,  hNew,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yFields,  hNew,  0,  y0.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yFields,  hNew,  0,  y0.length);	  System.arraycopy(y0,    0,    nextStep,    hNew,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
214	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  step,  nextT,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  step,  nextT,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  step,  nextT,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    nextT,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  yTmp);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  0,  yTmp);	  System.arraycopy(y0,    0,    yTmp,    0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
216	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  factor);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  factor);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  factor);	  System.arraycopy(y0,    0,    yTmp,    0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  ySize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  ySize);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  ySize);	  System.arraycopy(y0,    0,    y1,    0,    y1.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
218	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  step,  nextStep,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  step,  nextStep,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  step,  nextStep,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    nextStep,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
219	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  nextStep,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  nextStep,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  error,  nextStep,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
220	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  nextIsLast,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  nextIsLast,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  error,  nextIsLast,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
221	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  input,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  input,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  input,  null);	  hNew    =    filterStep(hNew,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
222	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  input,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  input,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  input,  false);	  hNew    =    filterStep(hNew,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
223	[BUG]  [BUGGY]  hNew  =  filterStep(input,  nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(input,  nextStep,  hNew);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(input,  nextStep,  hNew);	  hNew    =    filterStep(hNew,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
224	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yFields,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yFields,  0,  y0.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yFields,  0,  y0.length);	  System.arraycopy(y0,    0,    hNew,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
225	[BUG]  [BUGGY]  System.arraycopy(hNew,  0,  yTmp,  0,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(hNew,  0,  yTmp,  0,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(hNew,  0,  yTmp,  0,  hNew.length);	  System.arraycopy(y0,    0,    yTmp,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
226	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  1,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  1,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  1,  hNew.length);	  System.arraycopy(y0,    0,    yTmp,    0,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
227	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  value);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  value);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  value);	  hNew    =    filterStep(nextStep,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y0,  0,  y0.length  -  1);	  System.arraycopy(y0,    0,    nextStep,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  1,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y,  0,  y,  1,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  y,  1,  y.length);	  System.arraycopy(y,    0,    y,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
230	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  true);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  true);	  hNew    =    filterStep(hNew,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
231	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  firstTime,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  firstTime,  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  firstTime,  nextStep,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
232	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  exp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  exp);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  exp);	  hNew    =    filterStep(nextStep,    nextStep,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
233	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextT,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextT,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  nextT,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    nextT,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
234	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  y.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  hNew,  0,  y.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  hNew,  0,  y.length  -  1);	  System.arraycopy(y0,    0,    hNew,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
235	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  y.length);	  System.arraycopy(y0,    0,    y0,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
236	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  1,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y0,  1,  y.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y0,  1,  y.length);	  System.arraycopy(y,    0,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
237	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  yTmp.length);	  System.arraycopy(y0,    0,    yTmp,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
238	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  0,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  0,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  0,  true);	  hNew    =    filterStep(nextStep,    nextStep,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
239	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  nextStep,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  nextStep,  error,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  nextStep,  error,  false);	  hNew    =    filterStep(nextStep    *    stepSize,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
240	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  back,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  back,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  nextStep,  back,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    back,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
241	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  t.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  t.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  t.length);	  System.arraycopy(y0,    0,    y1,    1,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
242	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  stepSize);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  stepStart,  stepSize);	  hNew    =    filterStep(hNew,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
243	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ys,  1,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ys,  1,  y0.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ys,  1,  y0.length);	  System.arraycopy(y0,    0,    ys,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
244	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  y1.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  y1.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  nextStep,  y1.length);	  System.arraycopy(y0,    0,    y1,    0,    y1.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
245	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  1,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y,  1,  y0.length);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y,  1,  y0.length);	  System.arraycopy(y0,    0,    y2,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
246	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  nextStep.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  nextStep.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y0,  0,  nextStep.length  -  1);	  System.arraycopy(y0,    0,    nextStep,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
247	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep,  0,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  nextStep,  0,  nextStep.length);	  System.arraycopy(y0,    0,    y1,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
248	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  step1,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  step1,  0,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  step1,  0,  nextStep.length);	  System.arraycopy(y0,    0,    y1,    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
249	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  forward,  safety);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  forward,  safety);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  forward,  safety);	  hNew    =    filterStep(nextStep,    nextStep,    safety);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
250	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  stepStart,  false);	  hNew    =    filterStep(hNew,    nextStep,    forward);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
251	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  input,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  input,  stepStart);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  input,  stepStart);	  hNew    =    filterStep(hNew,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
252	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y,  0,  y.length  -  1);	  System.arraycopy(y0,    0,    y,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
253	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  y1.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  y1.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  y1.length);	  System.arraycopy(y0,    0,    y2,    0,    y1.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  y.length  -  1);	  System.arraycopy(y0,    0,    ytmp,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
255	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  t0,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  t0,  t0);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  t0,  t0);	  hNew    =    filterStep(nextStep,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
256	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  forward,  error,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  forward,  error,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  forward,  error,  null);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
257	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  null,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  error,  null,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  error,  null,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
258	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  step1,  1,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  step1,  1,  nextStep.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  step1,  1,  nextStep.length);	  System.arraycopy(y0,    0,    y1,    1,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
259	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  t);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  t);	  hNew    =    filterStep(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
260	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  forward,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  factor,  nextStep,  forward,  false);	  hNew    =    filterStep(stepSize    *    factor,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
261	[BUG]  [BUGGY]  for(int  y  =  0;  y  <  input.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  for(int  y  =  0;  y  <  input.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	for(int  y  =  0;  y  <  input.length;  y++)  {  if(hNew  >  maxGrowth)  {  throw  new  IllegalStateException( " ");  }	  for(int    y    =    0;    y    <    nextStep.length;    y++)    {    if(hNew    >    maxGrowth)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y0,  0,  ySize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y,  0,  y0,  0,  ySize.length);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  y0,  0,  ySize.length);	  System.arraycopy(yTmp,    0,    y0,    0,    ySize.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
263	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextIsLast,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextIsLast,  error,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  nextIsLast,  error,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
264	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextT,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  nextT,  error,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  nextT,  error,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
265	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  input,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  input,  error,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  input,  error,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    error,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  nextStep.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  nextStep.length  -  1);	  System.arraycopy(y0,    0,    y1,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
267	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  firstTime,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  nextStep,  firstTime,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  nextStep,  firstTime,  true);	  hNew    =    filterStep(stepSize    *    nextStep,    forward,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
268	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  null,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  null,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  null,  true);	  hNew    =    filterStep(nextStep,    error,    nextStep,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
269	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  y,  0,  y.length  -  1);	  System.arraycopy(y,    0,    y,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
270	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  forward,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  forward,  nextStep,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(stepSize  *  factor,  forward,  nextStep,  false);	  hNew    =    filterStep(stepSize    *    factor,    firstTime,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
271	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y0.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y2,  0,  y0.length  -  1);	  System.arraycopy(y0,    0,    yTmp,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
272	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  t0,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  t0,  null);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  t0,  null);	  hNew    =    filterStep(nextStep,    error,    nextStep,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
273	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  null,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  null,  t0);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  null,  t0);	  hNew    =    filterStep(nextStep,    error,    nextStep,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
274	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  stepStart,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  nextStep,  stepStart,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  nextStep,  stepStart,  false);	  hNew    =    filterStep(stepSize    *    nextStep,    stepStart,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  hNew,  0,  y0.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  hNew,  0,  y0.length);	  System.arraycopy(y0,    0,    nextStep,    hNew,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
276	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  1,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y0,  1,  hNew.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y0,  1,  hNew.length);	  System.arraycopy(y0,    0,    nextStep,    hNew,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
277	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  firstTime,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  firstTime,  nextStep,  false);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  firstTime,  nextStep,  false);	  hNew    =    filterStep(nextStep,    nextStep,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
278	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  stepStart,  y0);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  stepStart,  y0);	  hNew    =    filterStep(hNew,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
279	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  nextStep);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  nextStep);	  hNew    =    filterStep(hNew,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
280	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(hNew,  nextStep,  y0,  t);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(hNew,  nextStep,  y0,  t);	  hNew    =    filterStep(hNew,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
281	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  input,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  input,  t0);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  input,  t0);	  hNew    =    filterStep(nextStep,    nextStep,    input);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
282	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  null,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  null,  false);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  null,  false);	  hNew    =    filterStep(nextStep,    error,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
283	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y.length  -  1);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  y.length  -  1);	  System.arraycopy(y0,    0,    y1,    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
284	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  nextStep,  error,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  nextStep,  error,  true);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep  *  factor,  nextStep,  error,  true);	  hNew    =    filterStep(nextStep    *    stepSize,    error,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
285	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  safety  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  hNew  =  filterStep(nextStep,  nextStep,  safety  +  1);  [BUGGY]      System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	hNew  =  filterStep(nextStep,  nextStep,  safety  +  1);	  hNew    =    filterStep(nextStep,    error,    nextStep    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
286	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  yTmp,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y1,  1,  yTmp,  0,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  1,  yTmp,  0,  yTmp.length);	  System.arraycopy(y0,    0,    y1,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
287	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;      [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  yTmp.length);  [BUGGY]      manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y2,  0,  yTmp.length);	  System.arraycopy(y0,    0,    y1,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
