bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  y.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(y,  0,  hNew,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y,  0,  hNew,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y,  0,  hNew,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
5	[BUG]  [BUGGY]    [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	  	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
6	[BUG]  [BUGGY]    hNew  =  filterStep(stepSize  *  nextStep,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    hNew  =  filterStep(stepSize  *  nextStep,  forward,  false);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    hNew  =  filterStep(stepSize  *  nextStep,  forward,  false);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	add
7	[BUG]  [BUGGY]    hNew  =  filterStep(stepSize  *  nextStep,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    hNew  =  filterStep(stepSize  *  nextStep,  error,  false);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    hNew  =  filterStep(stepSize  *  nextStep,  error,  false);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	add
8	[BUG]  [BUGGY]    hNew  =  filterStep(nextStep,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    hNew  =  filterStep(nextStep,  error,  false);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    hNew  =  filterStep(nextStep,  error,  false);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	add
9	[BUG]  [BUGGY]    hNew  =  filterStep(nextStep,  error,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    hNew  =  filterStep(nextStep,  error,  nextStep);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    hNew  =  filterStep(nextStep,  error,  nextStep);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	add
10	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y1.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y1.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  y1.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
13	[BUG]  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(yTmp,  0,  y0,  0,  y0.length);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	add
14	[BUG]  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    System.arraycopy(y0,  0,  y0,  0,  y0.length);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    System.arraycopy(y0,  0,  y0,  0,  y0.length);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	add
15	[BUG]  [BUGGY]    hNew  =  filterStep(hNew,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    hNew  =  filterStep(hNew,  nextStep);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    hNew  =  filterStep(hNew,  nextStep);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	add
16	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  nextStep,  0,  y0.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  yTmp.length);  [BUGGY]  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	System.arraycopy(y0,  0,  y,  0,  yTmp.length);	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
18	[BUG]  [BUGGY]    hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    hNew  =  filterStep(stepSize  *  factor,  forward,  false);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	add
19	[BUG]  [BUGGY]    hNew  =  filterStep(stepSize  *  nextStep,  error,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  [BUGGY]    hNew  =  filterStep(stepSize  *  nextStep,  error,  true);  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	315	315	1	replace	    hNew  =  filterStep(stepSize  *  nextStep,  error,  true);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	add
