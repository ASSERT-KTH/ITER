bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  interpolator.storeTime(t0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(t0,  nextStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(t0,  nextStep);	  interpolator.storeTime(t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
2	[BUG]  [BUGGY]  interpolator.storeTime(t0,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(t0,  lastStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(t0,  lastStep);	  interpolator.storeTime(t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
3	[BUG]  [BUGGY]  interpolator.storeTime(lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(lastStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(lastStep);	  interpolator.storeTime(t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
4	[BUG]  [BUGGY]  interpolator.storeTime(t0,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(t0,  y);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(t0,  y);	  interpolator.storeTime(t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(yTmp,  0,  y1,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
8	[BUG]  [BUGGY]  interpolator.storeTime(t0,  nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(t0,  nextStep,  y);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(t0,  nextStep,  y);	  interpolator.storeTime(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
9	[BUG]  [BUGGY]  interpolator.storeTime(y,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(y,  nextStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(y,  nextStep);	  interpolator.storeTime(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
10	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  y);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  nextStep,  y);	  interpolator.storeTime(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
11	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  lastStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  nextStep,  lastStep);	  interpolator.storeTime(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
12	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(t0,  nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(t0,  nextStep,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(t0,  nextStep,  y);	      lastStep    =    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
13	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(y,stages);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(y,stages);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(y,stages);	      lastStep    =    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
14	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(stages,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(stages,  nextStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(stages,  nextStep);	      lastStep    =    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
15	[BUG]  [BUGGY]  stepHandlers  =  manager.stepHandlers(nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =  manager.stepHandlers(nextStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =  manager.stepHandlers(nextStep);	      stepHandlers    =    manager.stepHandlers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
16	[BUG]  [BUGGY]  stepHandlers  =  manager.stepHandlers(),  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =  manager.stepHandlers(),  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =  manager.stepHandlers(),  lastStep);	      stepHandlers    =    manager.stepHandlers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
17	[BUG]  [BUGGY]  stepHandlers  =  manager.stepHandlers(),  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =  manager.stepHandlers(),  nextStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =  manager.stepHandlers(),  nextStep);	      stepHandlers    =    manager.stepHandlers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
18	[BUG]  [BUGGY]  manager.stepAccepted(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  manager.stepAccepted(nextStep,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	manager.stepAccepted(nextStep,  lastStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  nextStep.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  nextStep.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
21	[BUG]  [BUGGY]  Manager.stepAccepted(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  Manager.stepAccepted(nextStep,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	Manager.stepAccepted(nextStep,  lastStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
22	[BUG]  [BUGGY]  interpolator.storeTime(t0,  nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(t0,  nextStep,  lastStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(t0,  nextStep,  lastStep);	  interpolator.storeTime(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
23	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  manager);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  manager);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  nextStep,  manager);	  interpolator.storeTime(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
24	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  stepStart,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  stepStart,  lastStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  stepStart,  lastStep);	  interpolator.storeTime(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
25	[BUG]  [BUGGY]  interpolator.storeTime(t0,  nextStep,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(t0,  nextStep,  y0);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(t0,  nextStep,  y0);	  interpolator.storeTime(nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
26	[BUG]  [BUGGY]  interpolator.storeTime(y0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(y0,  nextStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(y0,  nextStep);	  interpolator.storeTime(nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
27	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  y0);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  nextStep,  y0);	  interpolator.storeTime(nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
28	[BUG]  [BUGGY]  if(lastStep!=  null)  {  lastStep  =  nextStep;  }  else  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  if(lastStep!=  null)  {  lastStep  =  nextStep;  }  else  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	if(lastStep!=  null)  {  lastStep  =  nextStep;  }  else  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
29	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
30	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  else  {  System.arraycopy(yTmp,  0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  else  {  System.arraycopy(yTmp,  0,  y  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  else  {  System.arraycopy(yTmp,  0,  y	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
31	[BUG]  [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(stepSize);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =(StepHandler)super.stepHandlers.get(stepSize);	      stepHandlers    =(StepHandler)super.stepHandlers.get(stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
32	[BUG]  [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(nextStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =(StepHandler)super.stepHandlers.get(nextStep);	      stepHandlers    =(StepHandler)super.stepHandlers.get(stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
33	[BUG]  [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(y0);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =(StepHandler)super.stepHandlers.get(y0);	      stepHandlers    =(StepHandler)super.stepHandlers.get(stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
34	[BUG]  [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(stepStart  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(stepStart  -  1);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =(StepHandler)super.stepHandlers.get(stepStart  -  1);	      stepHandlers    =(StepHandler)super.stepHandlers.get(stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
35	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  stepStart);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  stepStart);	      lastStep    =    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
36	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  stepStart,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  stepStart,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  stepStart,  y);	      lastStep    =    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
37	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(y,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(y,  nextStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(y,  nextStep);	      lastStep    =    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
38	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  stepSize);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  stepSize);	      lastStep    =    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
39	[BUG]  [BUGGY]  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  manager.stepAccepted(nextStep,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(yTmp,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
41	[BUG]  [BUGGY]  Manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  Manager.stepAccepted(nextStep,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	Manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
42	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  lastStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  lastStep);	  interpolator.storeStep(nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
43	[BUG]  [BUGGY]  interpolator.storeStep(t0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(t0,  nextStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(t0,  nextStep);	  interpolator.storeStep(nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
44	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  y);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  y);	  interpolator.storeStep(nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
45	[BUG]  [BUGGY]  StepHandler  stepHandlers  =(StepHandler)super.stepHandlers.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  StepHandler  stepHandlers  =(StepHandler)super.stepHandlers.clone();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	StepHandler  stepHandlers  =(StepHandler)super.stepHandlers.clone();	      stepHandlers    =(StepHandler)super.stepHandlers.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
47	[BUG]  [BUGGY]  lastStep  =  manager.stopTime();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stopTime();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stopTime();	      lastStep    =    manager.stop();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
48	[BUG]  [BUGGY]  lastStep  =  manager.stop()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stop()  -  1;  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stop()  -  1;	      lastStep    =    manager.stop();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
49	[BUG]  [BUGGY]  lastStep  =  manager.stopAcception();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stopAcception();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stopAcception();	      lastStep    =    manager.stop();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
50	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  nextStep,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  nextStep,  y);	      lastStep    =    manager.stepAccepted(nextStep,    fsal);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
51	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  error);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  error);	      lastStep    =    manager.stepAccepted(nextStep,    fsal);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
52	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  stepStart,  fsal);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  stepStart,  fsal);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  stepStart,  fsal);	      lastStep    =    manager.stepAccepted(nextStep,    fsal);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
53	[BUG]  [BUGGY]  interpolator.storeStep(interpolator,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(interpolator,  nextStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(interpolator,  nextStep);	  interpolator.storeStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
54	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  lastStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  nextStep,  lastStep);	  interpolator.storeStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
55	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  stepStart);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  nextStep,  stepStart);	  interpolator.storeStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
56	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  y);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  nextStep,  y);	  interpolator.storeStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
57	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  y0);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  y0);	      lastStep    =    manager.stepAccepted(stages,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
58	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(y0,stages);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(y0,stages);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(y0,stages);	      lastStep    =    manager.stepAccepted(stages,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
59	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(t0,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(t0,  y0);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(t0,  y0);	      lastStep    =    manager.stepAccepted(stages,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
60	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(stages,  y0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(stages,  y0,  nextStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(stages,  y0,  nextStep);	      lastStep    =    manager.stepAccepted(stages,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
61	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  stepStart);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  nextStep,  stepStart);	  interpolator.storeTime(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
62	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  firstTime);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  nextStep,  firstTime);	  interpolator.storeTime(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
63	[BUG]  [BUGGY]  manager.stepAccepted(stages,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  manager.stepAccepted(stages,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	manager.stepAccepted(stages,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  manager.stepAccepted(stages,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  manager.stepAccepted(stages,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  manager.stepAccepted(stages,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
65	[BUG]  [BUGGY]  Manager.stepAccepted(stages,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  Manager.stepAccepted(stages,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	Manager.stepAccepted(stages,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(stages,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(stages,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(stages,  lastStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
67	[BUG]  [BUGGY]  StepHandler  stepHandlers  =(StepHandler)manager.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  StepHandler  stepHandlers  =(StepHandler)manager.clone();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	StepHandler  stepHandlers  =(StepHandler)manager.clone();	      stepHandlers    =(StepHandler)manager.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
68	[BUG]  [BUGGY]  stepHandlers  =(StepHandler)manager.stepHandlers.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =(StepHandler)manager.stepHandlers.clone();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =(StepHandler)manager.stepHandlers.clone();	      stepHandlers    =(StepHandler)super.stepHandlers.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
69	[BUG]  [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(stepStart  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =(StepHandler)super.stepHandlers.get(stepStart  +  1);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =(StepHandler)super.stepHandlers.get(stepStart  +  1);	      stepHandlers    =(StepHandler)super.stepHandlers.get(stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  yTmp.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y,  0,  yTmp.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
73	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  y  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  y  +  1);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  y  +  1);	      lastStep    =    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
74	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  t0);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  t0);	      lastStep    =    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
75	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(t0,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(t0,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(t0,  y);	      lastStep    =    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
76	[BUG]  [BUGGY]  stepHandlers  =(StepHandler)manager.getStepHandlers();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =(StepHandler)manager.getStepHandlers();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =(StepHandler)manager.getStepHandlers();	      stepHandlers    =(StepHandler)manager.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
77	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  nextStep,  t0);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  nextStep,  t0);	  interpolator.storeTime(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
78	[BUG]  [BUGGY]  interpolator.storeTime(y0,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(y0,  t0);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(y0,  t0);	  interpolator.storeTime(t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
79	[BUG]  [BUGGY]  lastStep  =  manager.stop(nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stop(nextStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stop(nextStep);	      lastStep    =    manager.stop();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  manager.stepAccepted(stages,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  manager.stepAccepted(stages,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y,  0,  y0.length);  manager.stepAccepted(stages,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(stages,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(stages,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(stages,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  y0.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(stages,  0,  y0,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(stages,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(stages,  nextStep);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(stages,  nextStep);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
84	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  stepStart);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  stepStart);	  interpolator.storeStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
85	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  y0);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  y0);	  interpolator.storeStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  nextStep.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y0,  0,  nextStep.length);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(stages,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y0,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.stepAccepted(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.stepAccepted(nextStep,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.stepAccepted(nextStep,  lastStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(nextStep,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(nextStep,  lastStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
92	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(stages,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
93	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(stages,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(stages,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
94	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
95	[BUG]  [BUGGY]  stepHandlers  =  manager.stepHandlers(stages);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =  manager.stepHandlers(stages);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =  manager.stepHandlers(stages);	      stepHandlers    =    manager.stepHandlers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
96	[BUG]  [BUGGY]  stepHandlers  =  manager.stepHandlers(t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =  manager.stepHandlers(t0);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =  manager.stepHandlers(t0);	      stepHandlers    =    manager.stepHandlers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
97	[BUG]  [BUGGY]  stepHandlers  =(StepHandler)this.stepHandlers.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =(StepHandler)this.stepHandlers.clone();  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =(StepHandler)this.stepHandlers.clone();	      stepHandlers    =(StepHandler)super.stepHandlers.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(stages,  nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(stages,  nextStep,  y);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  y0,  0,  nextStep.length);  manager.stepAccepted(stages,  nextStep,  y);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(stages,  0,  y0,  0,  nextStep.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(stages,  0,  y0,  0,  nextStep.length);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
100	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  stepSize);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  nextStep,  stepSize);	  interpolator.storeStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
101	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  nextStep,  t0);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  nextStep,  t0);	  interpolator.storeStep(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
102	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
103	[BUG]  [BUGGY]  lastStep  =  manager.stop()?  nextStep  :  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stop()?  nextStep  :  1;  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stop()?  nextStep  :  1;	      lastStep    =    manager.stop();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
104	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  stepStart);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  stepStart);	  interpolator.storeTime(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
105	[BUG]  [BUGGY]  interpolator.storeTime(t0,  a);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(t0,  a);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(t0,  a);	  interpolator.storeTime(t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  y,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(stages,  0,  y,  0,  nextStep.length);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(stages,  0,  y,  0,  nextStep.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
107	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(stages,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(stages,  t0);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(stages,  t0);	      lastStep    =    manager.stepAccepted(stages,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(stages,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  System.arraycopy(stages,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	System.arraycopy(stages,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  lastStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
109	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  x);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  x);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(nextStep,  x);	      lastStep    =    manager.stepAccepted(nextStep,    fsal);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
110	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(stages,  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  lastStep  =  manager.stepAccepted(stages,  y0,  t);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	lastStep  =  manager.stepAccepted(stages,  y0,  t);	      lastStep    =    manager.stepAccepted(stages,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
111	[BUG]  [BUGGY]  interpolator.storeStep(nextStep,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeStep(nextStep,  t0);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeStep(nextStep,  t0);	  interpolator.storeStep(nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
112	[BUG]  [BUGGY]  interpolator.storeTime(nextStep,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  interpolator.storeTime(nextStep,  t0);  [BUGGY]    for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	interpolator.storeTime(nextStep,  t0);	  interpolator.storeTime(nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
113	[BUG]  [BUGGY]  stepHandlers  =  manager.stepHandlers(lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();      [BUGGY]  stepHandlers  =  manager.stepHandlers(lastStep);  [BUGGY]    interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	320	320	1	replace	stepHandlers  =  manager.stepHandlers(lastStep);	      stepHandlers    =    manager.stepHandlers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
