bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  lastStep  =  manager.handleStep(interpolator,  nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.handleStep(interpolator,  nextStep,  hNew);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.handleStep(interpolator,  nextStep,  hNew);	  lastStep    =    manager.handleStep(interpolator,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
2	[BUG]  [BUGGY]  lastStep  =  handler.handleStep(interpolator,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  handler.handleStep(interpolator,  nextStep);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  handler.handleStep(interpolator,  nextStep);	  lastStep    =    manager.handleStep(interpolator,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
3	[BUG]  [BUGGY]  lastStep  =  manager.handleStep(interpolator,  nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.handleStep(interpolator,  nextStep,  stepStart);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.handleStep(interpolator,  nextStep,  stepStart);	  lastStep    =    manager.handleStep(interpolator,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
4	[BUG]  [BUGGY]  lastStep  =  interpolator.handleStep(hNew,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  interpolator.handleStep(hNew,  nextStep);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  interpolator.handleStep(hNew,  nextStep);	  lastStep    =    manager.handleStep(interpolator,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
5	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  nextStep,  false);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  filterStep(stepSize  *  factor,  nextStep,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
6	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  forward,  false);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  filterStep(nextStep  *  factor,  forward,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
7	[BUG]  [BUGGY]  hNew  =  filterStep(exp,  stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  filterStep(exp,  stepSize  *  factor,  forward,  false);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  filterStep(exp,  stepSize  *  factor,  forward,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
8	[BUG]  [BUGGY]  hNew  =  filterStep(factor  *  stepSize,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  filterStep(factor  *  stepSize,  forward,  false);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  filterStep(factor  *  stepSize,  forward,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
9	[BUG]  [BUGGY]  manager.stepAccepted(nextStep,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  manager.stepAccepted(nextStep,  nextStep);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	manager.stepAccepted(nextStep,  nextStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
10	[BUG]  [BUGGY]  Manager.stepAccepted(nextStep,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  Manager.stepAccepted(nextStep,  nextStep);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	Manager.stepAccepted(nextStep,  nextStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
11	[BUG]  [BUGGY]  hNew  =  manager.stepAccepted(nextStep,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  manager.stepAccepted(nextStep,  nextStep);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  manager.stepAccepted(nextStep,  nextStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
12	[BUG]  [BUGGY]  Manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  Manager.stepAccepted(nextStep,  y);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	Manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
13	[BUG]  [BUGGY]  lastStep  =  manager.stopTime  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime  -  1;  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime  -  1;	  lastStep    =    manager.stopTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
14	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  hNew);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stepAccepted(nextStep,  hNew);	  lastStep    =    manager.stopTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
15	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stepAccepted(nextStep,  nextStep);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stepAccepted(nextStep,  nextStep);	  lastStep    =    manager.stopTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
16	[BUG]  [BUGGY]  lastStep  =  manager.stepAccepted(nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stepAccepted(nextStep);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stepAccepted(nextStep);	  lastStep    =    manager.stopTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(yFields,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(yFields,  0,  y0,  0,  y0.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(yFields,  0,  y0,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
20	[BUG]  [BUGGY]  lastStep  =  manager.stopTime(hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime(hNew);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime(hNew);	  lastStep    =    manager.stopTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
21	[BUG]  [BUGGY]  lastStep  =  manager.stopTime(nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime(nextStep);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime(nextStep);	  lastStep    =    manager.stopTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
22	[BUG]  [BUGGY]  lastStep  =  manager.stopTime()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime()  -  1;  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime()  -  1;	  lastStep    =    manager.stopTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
23	[BUG]  [BUGGY]  lastStep  =  manager.stopTime(t0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime(t0,  nextStep);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime(t0,  nextStep);	  lastStep    =    manager.stopTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
24	[BUG]  [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  stepSize,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  filterStep(nextStep  *  factor,  stepSize,  false);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  filterStep(nextStep  *  factor,  stepSize,  false);	      hNew    =    filterStep(stepSize    *    factor,    next,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
25	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  next,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  next,  true);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  filterStep(stepSize  *  factor,  next,  true);	      hNew    =    filterStep(stepSize    *    factor,    next,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
26	[BUG]  [BUGGY]  manager.stepAccepted(nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  manager.stepAccepted(nextStep,  hNew);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	manager.stepAccepted(nextStep,  hNew);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
27	[BUG]  [BUGGY]  Manager.stepAccepted(nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  Manager.stepAccepted(nextStep,  hNew);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	Manager.stepAccepted(nextStep,  hNew);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
28	[BUG]  [BUGGY]  hNew  =  manager.stepAccepted(nextStep,  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  manager.stepAccepted(nextStep,  yTmp);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  manager.stepAccepted(nextStep,  yTmp);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
29	[BUG]  [BUGGY]  hNew.stepAccepted(nextStep,  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew.stepAccepted(nextStep,  yTmp);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew.stepAccepted(nextStep,  yTmp);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
30	[BUG]  [BUGGY]  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  manager.stepAccepted(nextStep,  y);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
31	[BUG]  [BUGGY]  lastStep  =  manager.stopTime()  &&  nextStep;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime()  &&  nextStep;  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime()  &&  nextStep;	  lastStep    =    manager.stopTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  y,  0,  yTmp.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  y,  0,  yTmp.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  y,  0,  nextStep.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  y,  0,  nextStep.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(nextStep,  0,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(nextStep,  0,  y,  0,  y0.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(nextStep,  0,  y,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(nextStep,  0,  y,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(nextStep,  0,  y,  0,  nextStep.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(nextStep,  0,  y,  0,  nextStep.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  y,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(nextStep,  0,  y,  0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(nextStep,  0,  y,  0,  hNew);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(nextStep,  0,  y,  0,  hNew);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(nextStep,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(nextStep,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  nextStep);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(nextStep,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  nextStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
41	[BUG]  [BUGGY]  lastStep  =  handler.handleStep(interpolator,  nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  handler.handleStep(interpolator,  nextStep,  hNew);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  handler.handleStep(interpolator,  nextStep,  hNew);	  lastStep    =    manager.handleStep(interpolator,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
42	[BUG]  [BUGGY]  lastStep  =  manager.stopTime  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime  +  1;  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime  +  1;	  lastStep    =    manager.stopTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
43	[BUG]  [BUGGY]  lastStep  =  manager.lastStep;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.lastStep;  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.lastStep;	  lastStep    =    manager.stopTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
44	[BUG]  [BUGGY]  hNew  =  filterStep(extStep  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  filterStep(extStep  *  factor,  forward,  false);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  filterStep(extStep  *  factor,  forward,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
45	[BUG]  [BUGGY]  lastStep  =  manager.handleStep(interpolator,  nextStep,  step);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.handleStep(interpolator,  nextStep,  step);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.handleStep(interpolator,  nextStep,  step);	  lastStep    =    manager.handleStep(interpolator,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  manager.stepAccepted(nextStep,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  manager.stepAccepted(nextStep,  nextStep);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  manager.stepAccepted(nextStep,  nextStep);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  nextStep.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  y0,  0,  nextStep.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  nextStep,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y,  0,  y,  0,  y0.length);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y,  0,  y,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  nextStep,  0,  y0.length);  manager.stepAccepted(nextStep,  y);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
52	[BUG]  [BUGGY]  lastStep  =  manager.stopTime?  nextStep  :  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime?  nextStep  :  1;  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime?  nextStep  :  1;	  lastStep    =    manager.stopTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
53	[BUG]  [BUGGY]  lastStep  =  manager.stopTime?  nextStep  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime?  nextStep  :  null;  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime?  nextStep  :  null;	  lastStep    =    manager.stopTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(nextStep,  hNew);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(nextStep,  hNew);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  hNew);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  hNew);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y.length);  manager.stepAccepted(nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y.length);  manager.stepAccepted(nextStep,  hNew);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(y0,  0,  y0,  0,  y.length);  manager.stepAccepted(nextStep,  hNew);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(hNew,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  System.arraycopy(hNew,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  hNew);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	System.arraycopy(hNew,  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  hNew);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
58	[BUG]  [BUGGY]  lastStep  =  manager.stopTime(t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime(t0);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime(t0);	  lastStep    =    manager.stopTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
59	[BUG]  [BUGGY]  lastStep  =  manager.stopTime(exp);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  lastStep  =  manager.stopTime(exp);  [BUGGY]      interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	lastStep  =  manager.stopTime(exp);	  lastStep    =    manager.stopTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
60	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  firstTime,  nextStep,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  firstTime,  nextStep,  false);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  filterStep(stepSize  *  factor,  firstTime,  nextStep,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
61	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  forward,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }  final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);    [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  forward,  true);  [BUGGY]    lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	317	317	1	replace	hNew  =  filterStep(stepSize  *  factor,  forward,  true);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
