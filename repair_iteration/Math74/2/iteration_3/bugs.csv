bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalRelativeTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalRelativeTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  scalRelativeTolerance);	  scalAbsoluteTolerance    =    Math.max(scale,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	68	None	replace
2	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scala,  scale);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scala,  scale);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scala,  scale);	  scalAbsoluteTolerance    =    Math.min(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	12	None	replace
3	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scala,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scala,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scala,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.min(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	12	None	replace
4	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  y0);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  y0);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  y0);	  scalAbsoluteTolerance    =    Math.max(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	81	None	replace
5	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  vecRelativeTolerance);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  vecRelativeTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  vecRelativeTolerance);	  scalAbsoluteTolerance    =    Math.max(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	81	None	replace
6	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  vecRelativeTolerance);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  vecRelativeTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  vecRelativeTolerance);	  scalAbsoluteTolerance    =    Math.max(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	81	None	replace
7	[BUG]  [BUGGY]  scale  =  vecRelativeTolerance.doubleValue();  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  vecRelativeTolerance.doubleValue();  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  vecRelativeTolerance.doubleValue();	  scale    =    vecAbsoluteTolerance.doubleValue();    	non-compiled	[CE]  while  expected	64	None	replace
8	[BUG]  [BUGGY]  scale  =  vecAbsoluteTolerance.doubleValue()  +  1;  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  vecAbsoluteTolerance.doubleValue()  +  1;  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  vecAbsoluteTolerance.doubleValue()  +  1;	  scale    =    vecAbsoluteTolerance.doubleValue();    	non-compiled	[CE]  while  expected	64	None	replace
9	[BUG]  [BUGGY]  scale  =  y0.doubleValue();  [CE]  while  expected  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  y0.doubleValue();  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  y0.doubleValue();	  scale    =    vecAbsoluteTolerance.doubleValue();    	non-compiled	[CE]  while  expected	64	None	replace
10	[BUG]  [BUGGY]  Arrays.fill(scale,  0,  scale.length);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  0,  scale.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  0,  scale.length);	  Arrays.fill(scale,    0,    t0);    	non-compiled	[CE]  while  expected	67	None	replace
11	[BUG]  [BUGGY]  Arrays.fill(y0,  0,  scale);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  0,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  0,  scale);	  Arrays.fill(scale,    0,    t0);    	non-compiled	[CE]  while  expected	67	None	replace
12	[BUG]  [BUGGY]  Arrays.fill(scale,  0,  scale);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  0,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  0,  scale);	  Arrays.fill(scale,    0,    t0);    	non-compiled	[CE]  while  expected	67	None	replace
13	[BUG]  [BUGGY]  Arrays.fill(a,  0,  scale);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(a,  0,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(a,  0,  scale);	  Arrays.fill(scale,    0,    t0);    	non-compiled	[CE]  while  expected	67	None	replace
14	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  y0,  scale,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0,  scale,  vecAbsoluteTolerance);	  java.util.Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	59	None	replace
15	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0,  vecAbsoluteTolerance,  firstTime);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  y0,  vecAbsoluteTolerance,  firstTime);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0,  vecAbsoluteTolerance,  firstTime);	  java.util.Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	59	None	replace
16	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0,  vecRelativeTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  y0,  vecRelativeTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0,  vecRelativeTolerance);	  java.util.Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	59	None	replace
17	[BUG]  [BUGGY]  Arrays.fill(y0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  scale,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  scale,  vecAbsoluteTolerance);	  java.util.Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	59	None	replace
18	[BUG]  [BUGGY]  Arrays.fill(a,  scale);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(a,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(a,  scale);	  Arrays.fill(a,    t0);    	non-compiled	[CE]  while  expected	22	None	replace
19	[BUG]  [BUGGY]  Arrays.fill(a,  y0);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(a,  y0);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(a,  y0);	  Arrays.fill(a,    t0);    	non-compiled	[CE]  while  expected	22	None	replace
20	[BUG]  [BUGGY]  Arrays.fill(y0,  t0);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  t0);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  t0);	  Arrays.fill(a,    t0);    	non-compiled	[CE]  while  expected	22	None	replace
21	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  vecRelativeTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  vecRelativeTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  vecRelativeTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	62	None	replace
22	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  new  double[y0.length];  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  new  double[y0.length];  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	62	None	replace
23	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  t0;  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  t0;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  t0;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	62	None	replace
24	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    scale);    	non-compiled	[CE]  while  expected	27	None	replace
25	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  scale);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  scale);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  scale);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    scale);    	non-compiled	[CE]  while  expected	27	None	replace
26	[BUG]  [BUGGY]  if(firstTime)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(scale    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
27	[BUG]  [BUGGY]  if(firstTime)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }	  if(scale    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
28	[BUG]  [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }	  if(firstTime)    {    Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    }    	non-compiled	[CE]  while  expected	32	None	replace
29	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;	  if(firstTime)    {    Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    }    	non-compiled	[CE]  while  expected	32	None	replace
30	[BUG]  [BUGGY]  if(fsal)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  [CE]  while  expected  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(fsal)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(fsal)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }	  if(firstTime)    {    Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    }    	non-compiled	[CE]  while  expected	32	None	replace
31	[BUG]  [BUGGY]  Arrays.fill(b,  y0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(b,  y0,  scale,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(b,  y0,  scale,  vecAbsoluteTolerance);	  Arrays.fill(b,    scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	33	None	replace
32	[BUG]  [BUGGY]  Arrays.fill(a,  b,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(a,  b,  scale,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(a,  b,  scale,  vecAbsoluteTolerance);	  Arrays.fill(b,    scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	33	None	replace
33	[BUG]  [BUGGY]  Arrays.fill(b,  scale,  hNew);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(b,  scale,  hNew);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(b,  scale,  hNew);	  Arrays.fill(b,    scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	33	None	replace
34	[BUG]  [BUGGY]  Arrays.fill(b,  scale,  vecAbsoluteTolerance,  firstTime);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(b,  scale,  vecAbsoluteTolerance,  firstTime);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(b,  scale,  vecAbsoluteTolerance,  firstTime);	  Arrays.fill(b,    scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	33	None	replace
35	[BUG]  [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
36	[BUG]  [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[Y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[Y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[Y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
37	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  scale.length);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  scale.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  scale.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    scale.length);    	non-compiled	[CE]  while  expected	21	None	replace
38	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale.length  -  1);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale.length  -  1);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale.length  -  1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    scale.length);    	non-compiled	[CE]  while  expected	21	None	replace
39	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.abs(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.abs(scale,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.abs(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scala,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	80	None	replace
40	[BUG]  [BUGGY]  if(firstTime!=  vecAbsoluteTolerance)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime!=  vecAbsoluteTolerance)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime!=  vecAbsoluteTolerance)  {  scale  =  new  double[y0.length];  }	  if(vecAbsoluteTolerance!=    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	73	None	replace
41	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  firstTime)  {  scale  =  new  double[y0.length];  }	  if(vecAbsoluteTolerance!=    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	73	None	replace
42	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    scale);    	non-compiled	[CE]  while  expected	75	None	replace
43	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0.length  -  1);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0.length  -  1);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0.length  -  1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(scale,    t0.length);    	non-compiled	[CE]  while  expected	87	None	replace
44	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
45	[BUG]  [BUGGY]  if(firstTime)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
46	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance  ==  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
47	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	  if(vecRelativeTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
48	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y,    yDotK[1]);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
49	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y,    yDotK[1]);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
50	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }  [CE]  while  expected  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y,    yDotK[1]);    }    	non-compiled	[CE]  while  expected	40	None	replace
51	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[2]);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[2]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[2]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y,    yDotK[1]);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
52	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp,    yDotK[1]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
53	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp,    yDotK[1]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
54	[BUG]  [BUGGY]  if(equations  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(equations  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(equations  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp,    yDotK[1]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
55	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    scale.length);    	non-compiled	[CE]  while  expected	76	None	replace
56	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale.length  -  1);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale.length  -  1);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale.length  -  1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    scale.length);    	non-compiled	[CE]  while  expected	76	None	replace
57	[BUG]  [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance.length);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  vecAbsoluteTolerance.length);	  Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	79	None	replace
58	[BUG]  [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance,  y0.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance,  y0.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  vecAbsoluteTolerance,  y0.length);	  Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	79	None	replace
59	[BUG]  [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	  if(firstTime)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
60	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  if(firstTime)  {  scale  =  new  double[y0.length];  }	  if(firstTime)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
61	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  if(firstTime)  {  scale  =  new  double[y0.length];  }	  if(firstTime)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
62	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0,  t0);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0,  t0);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0,  t0);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	37	None	replace
63	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y1,  scale);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y1,  scale);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y1,  scale);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	37	None	replace
64	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	37	None	replace
65	[BUG]  [BUGGY]  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  true;  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  true;  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  true;	  Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    true;    	non-compiled	[CE]  while  expected	29	None	replace
66	[BUG]  [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }	  Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    true;    	non-compiled	[CE]  while  expected	29	None	replace
67	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }	  Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    true;    	non-compiled	[CE]  while  expected	29	None	replace
68	[BUG]  [BUGGY]  Arrays.fill(scale,  y0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  y0,  scale,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0,  scale,  vecAbsoluteTolerance);	  Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	48	None	replace
69	[BUG]  [BUGGY]  Arrays.fill(scale,  y0,  vecAbsoluteTolerance,  firstTime);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  y0,  vecAbsoluteTolerance,  firstTime);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0,  vecAbsoluteTolerance,  firstTime);	  Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	48	None	replace
70	[BUG]  [BUGGY]  Arrays.fill(scale,  y0,  vecRelativeTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  y0,  vecRelativeTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0,  vecRelativeTolerance);	  Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	48	None	replace
71	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  new  double[y0.length];  }	  if(scalAbsoluteTolerance    ==    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	23	None	replace
72	[BUG]  [BUGGY]  scale  =  new  double[y0.length];  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  new  double[y0.length];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  new  double[y0.length];	  if(scalAbsoluteTolerance    ==    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	23	None	replace
73	[BUG]  [BUGGY]  Arrays.fill(y0,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  vecAbsoluteTolerance);	  Arrays.fill(y0,    scale);    	non-compiled	[CE]  while  expected	10	None	replace
74	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  y0.length);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  y0.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  y0.length);	  scalAbsoluteTolerance    =    Math.max(scale,    firstTime);    	non-compiled	[CE]  while  expected	46	None	replace
75	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
76	[BUG]  [BUGGY]  if(firstTime)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
77	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance  ==  null)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
78	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  y0.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  y0.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  y0.length);	  scalAbsoluteTolerance    =    Math.min(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	60	None	replace
79	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  y0);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  y0);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  y0);	  scalAbsoluteTolerance    =    Math.min(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	60	None	replace
80	[BUG]  [BUGGY]  firstTime  =  false;  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  firstTime  =  false;  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	firstTime  =  false;	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  while  expected	65	None	replace
81	[BUG]  [BUGGY]  Context.checkState(fsal);  [CE]  while  expected  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Context.checkState(fsal);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Context.checkState(fsal);	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  while  expected	65	None	replace
82	[BUG]  [BUGGY]  luate(t0,  y0,  c,  scale);  [CE]  while  expected  [FE]                              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  luate(t0,  y0,  c,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	luate(t0,  y0,  c,  scale);	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  while  expected	65	None	replace
83	[BUG]  [BUGGY]  Context.checkState(y0.length  ==  1);  [CE]  while  expected  [FE]                                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Context.checkState(y0.length  ==  1);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Context.checkState(y0.length  ==  1);	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  while  expected	65	None	replace
84	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(scale);    	non-compiled	[CE]  while  expected	26	None	replace
85	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scale);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scale);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  scale);	  scalAbsoluteTolerance    =    Math.min(scale,    scale);    	non-compiled	[CE]  while  expected	14	None	replace
86	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
87	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
88	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  >=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  >=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  >=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
89	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t1,  y,  yDotK[0],  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t1,  y,  yDotK[0],  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t1,  y,  yDotK[0],  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
90	[BUG]  [BUGGY]  if(firstTime)  {  computeDerivatives(t0,  y0,  scale);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  computeDerivatives(t0,  y0,  scale);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  computeDerivatives(t0,  y0,  scale);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    computeDerivatives(t0,    y0,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	63	None	replace
91	[BUG]  [BUGGY]  if(firstTime)  {  computeDerivatives(t0,  y1,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  computeDerivatives(t0,  y1,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  computeDerivatives(t0,  y1,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    computeDerivatives(t0,    y0,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	63	None	replace
92	[BUG]  [BUGGY]  if(firstTime)  {  computeDerivatives(stepStart,  y0,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  computeDerivatives(stepStart,  y0,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  computeDerivatives(stepStart,  y0,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    computeDerivatives(t0,    y0,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	63	None	replace
93	[BUG]  [BUGGY]  luate(t0,  y0,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  luate(t0,  y0,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	luate(t0,  y0,  vecAbsoluteTolerance);	  if(firstTime)    {    computeDerivatives(t0,    y0,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	63	None	replace
94	[BUG]  [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
95	[BUG]  [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[Y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[Y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[Y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
96	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  0,  y0.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  0,  y0.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  0,  y0.length);	  java.util.Arrays.fill(scale,    0);    	non-compiled	[CE]  while  expected	18	None	replace
97	[BUG]  [BUGGY]  if(t0  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(t0  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(t0  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
98	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
99	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
100	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0]);    }    	non-compiled	[CE]  while  expected	82	None	replace
101	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
102	[BUG]  [BUGGY]  Arrays.fill(b,  scale);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(b,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(b,  scale);	  Arrays.fill(vecAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	34	None	replace
103	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scale,    firstTime);    }    	non-compiled	[CE]  while  expected	78	None	replace
104	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scale,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
105	[BUG]  [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scale,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
106	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [CE]  while  expected  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scale,    firstTime);    }    	non-compiled	[CE]  while  expected	78	None	replace
107	[BUG]  [BUGGY]  if(firstTime  ==  scale)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ==  scale)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ==  scale)  {  scale  =  new  double[y0.length];  }	  if(firstTime!=    scale)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	24	None	replace
108	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[y0.length];  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  final  double[][]  scale  =  new  double[y0.length];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	final  double[][]  scale  =  new  double[y0.length];	  if(firstTime!=    scale)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	24	None	replace
109	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
110	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
111	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
112	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  new  double[scale.length];  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  new  double[scale.length];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  new  double[scale.length];	  scalAbsoluteTolerance    =    new    double[y0.length];    	non-compiled	[CE]  while  expected	66	None	replace
113	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  new  double[y0.length  -  1];  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  new  double[y0.length  -  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  new  double[y0.length  -  1];	  scalAbsoluteTolerance    =    new    double[y0.length];    	non-compiled	[CE]  while  expected	66	None	replace
114	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  new  double[size];  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  new  double[size];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  new  double[size];	  scalAbsoluteTolerance    =    new    double[y0.length];    	non-compiled	[CE]  while  expected	66	None	replace
115	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  new  double[t0.length];  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  new  double[t0.length];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  new  double[t0.length];	  scalAbsoluteTolerance    =    new    double[y0.length];    	non-compiled	[CE]  while  expected	66	None	replace
116	[BUG]  [BUGGY]  scale  =  vecRelativeTolerance;  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  vecRelativeTolerance;  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  vecRelativeTolerance;	  scale    =    vecAbsoluteTolerance;    	non-compiled	[CE]  while  expected	41	None	replace
117	[BUG]  [BUGGY]  scale  =  y0.length;  [CE]  while  expected  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  y0.length;  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  y0.length;	  scale    =    vecAbsoluteTolerance;    	non-compiled	[CE]  while  expected	41	None	replace
118	[BUG]  [BUGGY]  scale  =  t0;  [CE]  while  expected  [FE]                              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  t0;  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  t0;	  scale    =    vecAbsoluteTolerance;    	non-compiled	[CE]  while  expected	41	None	replace
119	[BUG]  [BUGGY]  scale  =  vecAbsoluteTolerance  +  1;  [CE]  while  expected  [FE]                                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  vecAbsoluteTolerance  +  1;  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  vecAbsoluteTolerance  +  1;	  scale    =    vecAbsoluteTolerance;    	non-compiled	[CE]  while  expected	41	None	replace
120	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scala.length,  scale);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scala.length,  scale);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scala.length,  scale);	  scalAbsoluteTolerance    =    Math.min(scale,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	61	None	replace
121	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
122	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
123	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y[k]);    }    	non-compiled	[CE]  while  expected	39	None	replace
124	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y[k],  y[k]);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y[k],  y[k]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y[k],  y[k]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
125	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.max(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
126	[BUG]  [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.max(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
127	[BUG]  [BUGGY]  if(firstTime  >=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  >=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  >=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.max(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
128	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.max(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
129	[BUG]  [BUGGY]  if(vecRelativeTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecRelativeTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecRelativeTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }	  if(vecAbsoluteTolerance!=    null)    {    Arrays.fill(scale,    vecAbsoluteTolerance);    }    	non-compiled	[CE]  while  expected	5	None	replace
130	[BUG]  [BUGGY]  Arrays.fill(scale,  vecRelativeTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  vecRelativeTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  vecRelativeTolerance);	  if(vecAbsoluteTolerance!=    null)    {    Arrays.fill(scale,    vecAbsoluteTolerance);    }    	non-compiled	[CE]  while  expected	5	None	replace
131	[BUG]  [BUGGY]  Arrays.fill(y0,  0,  scale.length);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  0,  scale.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  0,  scale.length);	  Arrays.fill(scale,    0,    y0.length);    	non-compiled	[CE]  while  expected	17	None	replace
132	[BUG]  [BUGGY]  Arrays.fill(y0,  scale,  0,  y0.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  scale,  0,  y0.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  scale,  0,  y0.length);	  Arrays.fill(scale,    0,    y0.length);    	non-compiled	[CE]  while  expected	17	None	replace
133	[BUG]  [BUGGY]  Arrays.fill(a,  0,  scale.length);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(a,  0,  scale.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(a,  0,  scale.length);	  Arrays.fill(scale,    0,    y0.length);    	non-compiled	[CE]  while  expected	17	None	replace
134	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y,    yDotK[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
135	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y,    yDotK[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
136	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y,    yDotK[0]);    }    	non-compiled	[CE]  while  expected	38	None	replace
137	[BUG]  [BUGGY]  Arrays.fill(y0,  1);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  1);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  1);	  Arrays.fill(scale,    1);    	non-compiled	[CE]  while  expected	55	None	replace
138	[BUG]  [BUGGY]  Arrays.fill(scale,  2);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  2);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  2);	  Arrays.fill(scale,    1);    	non-compiled	[CE]  while  expected	55	None	replace
139	[BUG]  [BUGGY]  Arrays.fill(scale,  3);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  3);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  3);	  Arrays.fill(scale,    1);    	non-compiled	[CE]  while  expected	55	None	replace
140	[BUG]  [BUGGY]  Arrays.fill(y0,  new  double[scale.length],  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  new  double[scale.length],  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  new  double[scale.length],  vecAbsoluteTolerance);	  Arrays.fill(scale,    new    double[y0.length],    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	53	None	replace
141	[BUG]  [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  vecRelativeTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  vecRelativeTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  new  double[y0.length],  vecRelativeTolerance);	  Arrays.fill(scale,    new    double[y0.length],    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	53	None	replace
142	[BUG]  [BUGGY]  Arrays.fill(variables,  new  double[y0.length],  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(variables,  new  double[y0.length],  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(variables,  new  double[y0.length],  vecAbsoluteTolerance);	  Arrays.fill(scale,    new    double[y0.length],    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	53	None	replace
143	[BUG]  [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  yTmp);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  yTmp);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  new  double[y0.length],  yTmp);	  Arrays.fill(scale,    new    double[y0.length],    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	53	None	replace
144	[BUG]  [BUGGY]  if(firstTime)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
145	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }	  if(y0!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
146	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance  ==  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }	  if(y0!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
147	[BUG]  [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime    ==    null)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
148	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(firstTime!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(firstTime!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  if(firstTime!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime    ==    null)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
149	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(firstTime  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(firstTime  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  if(firstTime  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime    ==    null)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
150	[BUG]  [BUGGY]  if(firstTime  >=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  >=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  >=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
151	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ==  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
152	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0.length  -  1);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0.length  -  1);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0.length  -  1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(scale,    y0.length);    	non-compiled	[CE]  while  expected	20	None	replace
153	[BUG]  [BUGGY]  if(fsal)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(fsal)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(fsal)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	92	None	replace
154	[BUG]  [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  y0);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  y0);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  Arrays.fill(scale,  y0);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	92	None	replace
155	[BUG]  [BUGGY]  if(firstTime)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(scale!=    null)    {    if(scale    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
156	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(scale!=    null)    {    if(scale    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
157	[BUG]  [BUGGY]  if(firstTime)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }	  if(scale!=    null)    {    if(scale    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
158	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	31	None	replace
159	[BUG]  [BUGGY]  if(!firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(!firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(!firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	31	None	replace
160	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  new  double[y0.length]);  }  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  new  double[y0.length]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  new  double[y0.length]);  }	  java.util.Arrays.fill(scale,    new    double[y0.length]);    	non-compiled	[CE]  while  expected	58	None	replace
161	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  new  double[y0.length]);  }  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  new  double[y0.length]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  new  double[y0.length]);  }	  java.util.Arrays.fill(scale,    new    double[y0.length]);    	non-compiled	[CE]  while  expected	58	None	replace
162	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  new  double[y0.length  -  1]);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  new  double[y0.length  -  1]);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  new  double[y0.length  -  1]);	  java.util.Arrays.fill(scale,    new    double[y0.length]);    	non-compiled	[CE]  while  expected	58	None	replace
163	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  new  double[y0.length  +  1]);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  new  double[y0.length  +  1]);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  new  double[y0.length  +  1]);	  java.util.Arrays.fill(scale,    new    double[y0.length]);    	non-compiled	[CE]  while  expected	58	None	replace
164	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(scale);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(scale);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(scale);	  scalAbsoluteTolerance    =    calculateVectorAbsoluteTolerance(t0);    	non-compiled	[CE]  while  expected	72	None	replace
165	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(t0,  scale);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(t0,  scale);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(t0,  scale);	  scalAbsoluteTolerance    =    calculateVectorAbsoluteTolerance(t0);    	non-compiled	[CE]  while  expected	72	None	replace
166	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(y0);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(y0);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(y0);	  scalAbsoluteTolerance    =    calculateVectorAbsoluteTolerance(t0);    	non-compiled	[CE]  while  expected	72	None	replace
167	[BUG]  [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
168	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ==  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ==  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
169	[BUG]  [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
170	[BUG]  [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecAbsoluteTolerance!=    null)    {    Arrays.fill(scale,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
171	[BUG]  [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  }	  if(vecAbsoluteTolerance!=    null)    {    Arrays.fill(scale,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
172	[BUG]  [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecAbsoluteTolerance!=    null)    {    Arrays.fill(scale,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
173	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  y0.length);  }  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  y0.length);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  y0.length);  }	  java.util.Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	19	None	replace
174	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  y0.length);  }  else  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  y0.length);  }  else  {  scale  =  new  double[y0.length];  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  y0.length);  }  else  {  scale  =  new  double[y0.length];  }	  java.util.Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	19	None	replace
175	[BUG]  [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  new  double[y0.length];  }	  if(vecAbsoluteTolerance    ==    null)    {    Arrays.fill(scale,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
176	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  yDotK[0],  yTmp);  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  yDotK[0],  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  yDotK[0],  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y0,    yTmp);    }    	non-compiled	[CE]  while  expected	84	None	replace
177	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  yDotK[0],  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  yDotK[0],  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  yDotK[0],  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y0,    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
178	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y0,    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
179	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y0,    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
180	[BUG]  [BUGGY]  Arrays.fill(y0,  new  double[scale.length]);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  new  double[scale.length]);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  new  double[scale.length]);	  Arrays.fill(scale,    new    double[y0.length]);    	non-compiled	[CE]  while  expected	54	None	replace
181	[BUG]  [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  new  double[y0.length]);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  new  double[y0.length]);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(vecAbsoluteTolerance,  new  double[y0.length]);	  Arrays.fill(scale,    new    double[y0.length]);    	non-compiled	[CE]  while  expected	54	None	replace
182	[BUG]  [BUGGY]  Arrays.fill(a,  new  double[y0.length]);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(a,  new  double[y0.length]);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(a,  new  double[y0.length]);	  Arrays.fill(scale,    new    double[y0.length]);    	non-compiled	[CE]  while  expected	54	None	replace
183	[BUG]  [BUGGY]  Arrays.fill(variables,  new  double[y0.length]);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(variables,  new  double[y0.length]);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(variables,  new  double[y0.length]);	  Arrays.fill(scale,    new    double[y0.length]);    	non-compiled	[CE]  while  expected	54	None	replace
184	[BUG]  [BUGGY]  scalaAbsoluteTolerance  =  Math.max(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalaAbsoluteTolerance  =  Math.max(scale,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalaAbsoluteTolerance  =  Math.max(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scale,    scalaAbsoluteTolerance);    	non-compiled	[CE]  while  expected	11	None	replace
185	[BUG]  [BUGGY]  scalaAbsoluteTolerance  =  Math.min(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalaAbsoluteTolerance  =  Math.min(scale,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalaAbsoluteTolerance  =  Math.min(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scale,    scalaAbsoluteTolerance);    	non-compiled	[CE]  while  expected	11	None	replace
186	[BUG]  [BUGGY]  Arrays.fill(scale,  t0);  firstTime  =  false;  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  t0);  firstTime  =  false;  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  t0);  firstTime  =  false;	  Arrays.fill(scale,    y0);    firstTime    =    false;    	non-compiled	[CE]  while  expected	52	None	replace
187	[BUG]  [BUGGY]  Arrays.fill(scale,  y0);  firstTime  =  true;  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  y0);  firstTime  =  true;  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0);  firstTime  =  true;	  Arrays.fill(scale,    y0);    firstTime    =    false;    	non-compiled	[CE]  while  expected	52	None	replace
188	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y0);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y0);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y0);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	37	None	replace
189	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y1);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y1);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	37	None	replace
190	[BUG]  [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  hNew);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  hNew);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  new  double[y0.length],  hNew);	  Arrays.fill(scale,    new    double[y0.length],    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	53	None	replace
191	[BUG]  [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  0,  scale);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  0,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(vecAbsoluteTolerance,  0,  scale);	  Arrays.fill(scale,    0,    t0);    	non-compiled	[CE]  while  expected	67	None	replace
192	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0.length,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  y0.length,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0.length,  vecAbsoluteTolerance);	  java.util.Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	19	None	replace
193	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  vecAbsoluteTolerance.length);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  vecAbsoluteTolerance.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  vecAbsoluteTolerance.length);	  java.util.Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	19	None	replace
194	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0.length  -  1);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  y0.length  -  1);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0.length  -  1);	  java.util.Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	19	None	replace
195	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scale,    firstTime);    }    	non-compiled	[CE]  while  expected	78	None	replace
196	[BUG]  [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }	  if(firstTime)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
197	[BUG]  [BUGGY]  if(firstTime  ||  vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ||  vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ||  vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }	  if(firstTime)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	44	None	replace
198	[BUG]  [BUGGY]  if(firstTime  ||  vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ||  vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ||  vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	  if(firstTime)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	44	None	replace
199	[BUG]  [BUGGY]  vecAbsoluteTolerance  =  new  double[y0.length];  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  vecAbsoluteTolerance  =  new  double[y0.length];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	vecAbsoluteTolerance  =  new  double[y0.length];	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	15	None	replace
200	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  vecRelativeTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  vecRelativeTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  vecRelativeTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    scale);    	non-compiled	[CE]  while  expected	27	None	replace
201	[BUG]  [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  scale,  y0.length);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  scale,  y0.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(vecAbsoluteTolerance,  scale,  y0.length);	  Arrays.fill(vecAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	34	None	replace
202	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale,  vecRelativeTolerance);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale,  vecRelativeTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale,  vecRelativeTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    scale);    	non-compiled	[CE]  while  expected	75	None	replace
203	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(x0,  y0);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(x0,  y0);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(x0,  y0);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    t0);    	non-compiled	[CE]  while  expected	36	None	replace
204	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[scalAbsoluteTolerance.length];  }  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[scalAbsoluteTolerance.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[scalAbsoluteTolerance.length];  }	  if(vecAbsoluteTolerance!=    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	73	None	replace
205	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  0,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  0,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  0,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y,    yDotK[1]);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
206	[BUG]  [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  0,  scale.length);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  0,  scale.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(vecAbsoluteTolerance,  0,  scale.length);	  Arrays.fill(scale,    0,    y0.length);    	non-compiled	[CE]  while  expected	17	None	replace
207	[BUG]  [BUGGY]  Arrays.fill(variables,  0,  scale.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(variables,  0,  scale.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(variables,  0,  scale.length);	  Arrays.fill(scale,    0,    y0.length);    	non-compiled	[CE]  while  expected	17	None	replace
208	[BUG]  [BUGGY]  Arrays.fill(scale,  scale.length);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  scale.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  scale.length);	  Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	79	None	replace
209	[BUG]  [BUGGY]  Arrays.fill(scale,  scaleAbsoluteTolerance.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  scaleAbsoluteTolerance.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  scaleAbsoluteTolerance.length);	  Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	79	None	replace
210	[BUG]  [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  t0);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  t0);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(vecAbsoluteTolerance,  t0);	  Arrays.fill(a,    t0);    	non-compiled	[CE]  while  expected	22	None	replace
211	[BUG]  [BUGGY]  luate(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  luate(scale,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	luate(scale,  vecAbsoluteTolerance);	  if(vecAbsoluteTolerance    ==    null)    {    Arrays.fill(scale,    vecAbsoluteTolerance);    }    	non-compiled	[CE]  while  expected	7	None	replace
212	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
213	[BUG]  [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
214	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  new  double[y0.length];  System.arraycopy(y0,  0,  scale,  0,  y0.length);  }  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  new  double[y0.length];  System.arraycopy(y0,  0,  scale,  0,  y0.length);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  new  double[y0.length];  System.arraycopy(y0,  0,  scale,  0,  y0.length);  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	62	None	replace
215	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  new  double[y0.length];  System.arraycopy(y0,  0,  scale,  0,  y0.length);  }  else  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  new  double[y0.length];  System.arraycopy(y0,  0,  scale,  0,  y0.length);  }  else  {  scale  =  new  double[y0.length];  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  new  double[y0.length];  System.arraycopy(y0,  0,  scale,  0,  y0.length);  }  else  {  scale  =  new  double[y0.length];  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	62	None	replace
216	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  new  double[y0.length];  System.arraycopy(y,  0,  scale,  0,  y0.length);  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  new  double[y0.length];  System.arraycopy(y,  0,  scale,  0,  y0.length);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  new  double[y0.length];  System.arraycopy(y,  0,  scale,  0,  y0.length);  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	62	None	replace
217	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  0,  y0.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  0,  y0.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  0,  y0.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(scale,    y0.length);    	non-compiled	[CE]  while  expected	20	None	replace
218	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  new  double[vecAbsoluteTolerance.length];  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  new  double[vecAbsoluteTolerance.length];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  new  double[vecAbsoluteTolerance.length];	  scalAbsoluteTolerance    =    new    double[y0.length];    	non-compiled	[CE]  while  expected	66	None	replace
219	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  new  double[y0.length  +  1];  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  new  double[y0.length  +  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  new  double[y0.length  +  1];	  scalAbsoluteTolerance    =    new    double[y0.length];    	non-compiled	[CE]  while  expected	66	None	replace
220	[BUG]  [BUGGY]  if(firstTime  >=  vecAbsoluteTolerance)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  >=  vecAbsoluteTolerance)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  >=  vecAbsoluteTolerance)  {  scale  =  new  double[y0.length];  }	  if(firstTime!=    scale)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	24	None	replace
221	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  firstTime);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  firstTime);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  firstTime);	  scalAbsoluteTolerance    =    Math.max(scale,    firstTime);    	non-compiled	[CE]  while  expected	46	None	replace
222	[BUG]  [BUGGY]  Arrays.fill(scale,  y0,  scale);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  y0,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0,  scale);	  Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	48	None	replace
223	[BUG]  [BUGGY]  luate(t0,  y0,  scale);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  luate(t0,  y0,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	luate(t0,  y0,  scale);	  if(firstTime)    {    computeDerivatives(t0,    y0,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	63	None	replace
224	[BUG]  [BUGGY]  if(firstTime)  {  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp,    yDotK[1]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
225	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  y[0],  yTmp,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  y[0],  yTmp,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  y[0],  yTmp,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp,    yDotK[1]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
226	[BUG]  [BUGGY]  if(lastStep)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(lastStep)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(lastStep)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }	  if(firstTime)    {    Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    }    	non-compiled	[CE]  while  expected	32	None	replace
227	[BUG]  [BUGGY]  scale  =  scalAbsoluteTolerance.doubleValue();  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  scalAbsoluteTolerance.doubleValue();  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  scalAbsoluteTolerance.doubleValue();	  scale    =    vecAbsoluteTolerance.doubleValue();    	non-compiled	[CE]  while  expected	64	None	replace
228	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  new  double[y0.length],  vecAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  new  double[y0.length],  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  new  double[y0.length],  vecAbsoluteTolerance);	  java.util.Arrays.fill(scale,    new    double[y0.length]);    	non-compiled	[CE]  while  expected	58	None	replace
229	[BUG]  [BUGGY]  if(t0!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(t0!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(t0!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
230	[BUG]  [BUGGY]  scale  =  firstTime;  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  firstTime;  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  firstTime;	  scale    =    vecAbsoluteTolerance;    	non-compiled	[CE]  while  expected	41	None	replace
231	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }	  if(scale!=    null)    {    if(scale    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
232	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y0,    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
233	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  vecAbsoluteTolerance);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  vecAbsoluteTolerance);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  vecAbsoluteTolerance);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y0,    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
234	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y1,  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y1,  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y1,  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y0,    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
235	[BUG]  [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }  else  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }  else  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }  else  {  scale  =  new  double[y0.length];  }	  Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    true;    	non-compiled	[CE]  while  expected	29	None	replace
236	[BUG]  [BUGGY]  if(scalRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	74	None	replace
237	[BUG]  [BUGGY]  if(scalRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	74	None	replace
238	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y0.length);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y0.length);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y0.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    scale.length);    	non-compiled	[CE]  while  expected	21	None	replace
239	[BUG]  [BUGGY]  if(firstTime  >  scale)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  >  scale)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  >  scale)  {  scale  =  new  double[y0.length];  }	  if(firstTime    >=    scale)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	25	None	replace
240	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  int  k  =  0;  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  int  k  =  0;  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  int  k  =  0;  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y[k]);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
241	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y[k]);    }    	non-compiled	[CE]  >  expected	39	None	replace
242	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0,  scale);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  y0,  scale);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0,  scale);	  java.util.Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	59	None	replace
243	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0,  1,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  y0,  1,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0,  1,  vecAbsoluteTolerance);	  java.util.Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	59	None	replace
244	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(scale,  t0);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(scale,  t0);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(scale,  t0);	  scalAbsoluteTolerance    =    calculateVectorAbsoluteTolerance(t0);    	non-compiled	[CE]  while  expected	72	None	replace
245	[BUG]  [BUGGY]  if(t0!=  firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(t0!=  firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(t0!=  firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
246	[BUG]  [BUGGY]  if(t0!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(t0!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(t0!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
247	[BUG]  [BUGGY]  if(scalRelativeTolerance  ==  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalRelativeTolerance  ==  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalRelativeTolerance  ==  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
248	[BUG]  [BUGGY]  FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
249	[BUG]  [BUGGY]  FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  <  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  <  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  <  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
250	[BUG]  [BUGGY]  FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
251	[BUG]  [BUGGY]  FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  secondTime  =  false;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  secondTime  =  false;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	FirstOrderDifferentialEquations  <  =  t0  ||  firstTime  >  t0.length)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  secondTime  =  false;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
252	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0]);    }    	non-compiled	[CE]  >  expected	82	None	replace
253	[BUG]  [BUGGY]  if(firstTime  ||  fsal)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ||  fsal)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ||  fsal)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
254	[BUG]  [BUGGY]  if(scalEquals!=  null)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalEquals!=  null)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalEquals!=  null)  {  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance!=    null)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
255	[BUG]  [BUGGY]  if(firstTime  >=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  >=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  >=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
256	[BUG]  [BUGGY]  if(firstTime  >=  scale)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  >=  scale)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  >=  scale)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
257	[BUG]  [BUGGY]  if(firstTime  <  =  0)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  <  =  0)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  <  =  0)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
258	[BUG]  [BUGGY]  if(firstTime  >  scale)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  >  scale)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  >  scale)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	31	None	replace
259	[BUG]  [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  new  double[y0.length];  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	31	None	replace
260	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
261	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[scalAbsoluteTolerance.length];  }  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[scalAbsoluteTolerance.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[scalAbsoluteTolerance.length];  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	16	None	replace
262	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[1],  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[1],  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[1],  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
263	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  y[0],  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  y[0],  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  y[0],  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
264	[BUG]  [BUGGY]  if(y0!=  firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  firstTime)  {  scale  =  new  double[y0.length];  }	  if(firstTime    >=    scale)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	25	None	replace
265	[BUG]  [BUGGY]  scale  =  Math.min(scalaAbsoluteTolerance,  scale);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  Math.min(scalaAbsoluteTolerance,  scale);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  Math.min(scalaAbsoluteTolerance,  scale);	  scalAbsoluteTolerance    =    Math.min(scale,    scalaAbsoluteTolerance);    	non-compiled	[CE]  while  expected	13	None	replace
266	[BUG]  [BUGGY]  scale  =  Math.max(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  Math.max(scale,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  Math.max(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scale,    scalaAbsoluteTolerance);    	non-compiled	[CE]  while  expected	11	None	replace
267	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime    ==    null)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
268	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime    ==    null)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
269	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(firstTime!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(firstTime!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(firstTime!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime    ==    null)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
270	[BUG]  [BUGGY]  if(y0!=  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  null)  {  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
271	[BUG]  [BUGGY]  scale  =  scalAbsoluteTolerance;  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  scalAbsoluteTolerance;  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  scalAbsoluteTolerance;	  scale    =    vecAbsoluteTolerance;    	non-compiled	[CE]  while  expected	41	None	replace
272	[BUG]  [BUGGY]  scale  =  Math.min(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scale  =  Math.min(scale,  vecAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  Math.min(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.min(scale,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	61	None	replace
273	[BUG]  [BUGGY]  if(scale!=  scale)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scale!=  scale)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale!=  scale)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance!=    null)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
274	[BUG]  [BUGGY]  if(scale!=  null)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scale!=  null)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale!=  null)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(vecRelativeTolerance!=    null)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
275	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0,  t1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0,  t1);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0,  t1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  ')'  expected	37	None	replace
276	[BUG]  [BUGGY]  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  null)  {  scale  =  new  double[y0.length];  }	  if(scale!=    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
277	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  <  scale.length)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  <  scale.length)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  <  scale.length)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  }	  Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    true;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
278	[BUG]  [BUGGY]  Arrays.fill(y0,  scale,  t0.length);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(y0,  scale,  t0.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  scale,  t0.length);	  Arrays.fill(y0,    scale);    	non-compiled	[CE]  ')'  expected	10	None	replace
279	[BUG]  [BUGGY]  if(fsal)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(fsal)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(fsal)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
280	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  <  =  0)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance  <  =  0)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance  <  =  0)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(scale    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
281	[BUG]  [BUGGY]  if(y0!=  firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.max(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
282	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.max(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
283	[BUG]  [BUGGY]  if(y0!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.max(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
284	[BUG]  [BUGGY]  int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0]);    }    	non-compiled	[CE]  >  expected	82	None	replace
285	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance  ==  null)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance  ==  null)  {  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(scale!=    null)    {    if(scale    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	45	None	replace
286	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  firstTime)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  firstTime)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  firstTime)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(scale!=    null)    {    if(scale    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	45	None	replace
287	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[scaleAbsoluteTolerance.length];  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[scaleAbsoluteTolerance.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[scaleAbsoluteTolerance.length];  }	  if(vecAbsoluteTolerance!=    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  not  a  statement	73	None	replace
288	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  scalAbsoluteTolerance;  }  else  {  scale  =  scalAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  scalAbsoluteTolerance;  }  else  {  scale  =  scalAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  scalAbsoluteTolerance;  }  else  {  scale  =  scalAbsoluteTolerance;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
289	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  scalAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  scalAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  scalAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
290	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  t0;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  t0;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  t0;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
291	[BUG]  [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  t0);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  t0);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  new  double[y0.length],  t0);	  Arrays.fill(scale,    new    double[y0.length],    vecAbsoluteTolerance);    	non-compiled	[CE]  not  a  statement	53	None	replace
292	[BUG]  [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  vecAbsoluteTolerance,  t0);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  vecAbsoluteTolerance,  t0);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  new  double[y0.length],  vecAbsoluteTolerance,  t0);	  Arrays.fill(scale,    new    double[y0.length],    vecAbsoluteTolerance);    	non-compiled	[CE]  not  a  statement	53	None	replace
293	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  <  scale.length)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  <  scale.length)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  <  scale.length)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }	  Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  not  a  statement	30	None	replace
294	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  <  scale)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  <  scale)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  <  scale)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  not  a  statement	31	None	replace
295	[BUG]  [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  not  a  statement	31	None	replace
296	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	4	None	replace
297	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	4	None	replace
298	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	4	None	replace
299	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(firstTime!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  if(firstTime!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  if(firstTime!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(firstTime!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	4	None	replace
300	[BUG]  [BUGGY]  Arrays.fill(scale,  vAbsoluteTolerance);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  vAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  vAbsoluteTolerance);	  if(vecAbsoluteTolerance!=    null)    {    Arrays.fill(scale,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
301	[BUG]  [BUGGY]  if(fsal)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(fsal)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(fsal)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	42	None	replace
302	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  yTmp);  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  yTmp);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  yTmp);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y0,    yTmp);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
303	[BUG]  [BUGGY]  if(y0!=  firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  firstTime)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
304	[BUG]  [BUGGY]  if(y0!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  null)  {  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
305	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[scaleAbsoluteTolerance.length];  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[scaleAbsoluteTolerance.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[scaleAbsoluteTolerance.length];  }	  if(vecAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  not  a  statement	15	None	replace
306	[BUG]  [BUGGY]  if(scale!=  firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scale!=  firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale!=  firstTime)  {  scale  =  new  double[y0.length];  }	  if(firstTime!=    scale)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  not  a  statement	24	None	replace
307	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  <  firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance  <  firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance  <  firstTime)  {  scale  =  new  double[y0.length];  }	  if(scalAbsoluteTolerance    ==    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  not  a  statement	23	None	replace
308	[BUG]  [BUGGY]  if(t0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(t0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(t0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
309	[BUG]  [BUGGY]  if(y0  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
310	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  t0.length);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  java.util.Arrays.fill(scale,  t0.length);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  t0.length);	  java.util.Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  not  a  statement	19	None	replace
311	[BUG]  [BUGGY]  Arrays.fill(scale,  y0.length,  vecAbsoluteTolerance);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  y0.length,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0.length,  vecAbsoluteTolerance);	  java.util.Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  not  a  statement	19	None	replace
312	[BUG]  [BUGGY]  Arrays.fill(scale,  y0,  1,  vecAbsoluteTolerance);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  y0,  1,  vecAbsoluteTolerance);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0,  1,  vecAbsoluteTolerance);	  Arrays.fill(scale,    y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  not  a  statement	48	None	replace
313	[BUG]  [BUGGY]  if(y0!=  firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	69	None	replace
314	[BUG]  [BUGGY]  if(scale  ==  firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scale  ==  firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale  ==  firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	69	None	replace
315	[BUG]  [BUGGY]  if(y0!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	69	None	replace
316	[BUG]  [BUGGY]  if(y0!=  firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(y0!=  firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  firstTime)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	  if(vecAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  not  a  statement	69	None	replace
317	[BUG]  [BUGGY]  if(t0!=  firstTime)  {  computeDerivatives(t0,  y0,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(t0!=  firstTime)  {  computeDerivatives(t0,  y0,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(t0!=  firstTime)  {  computeDerivatives(t0,  y0,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    computeDerivatives(t0,    y0,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
318	[BUG]  [BUGGY]  if(t0!=  firstTime)  {  computeDerivatives(t0,  y0,  scale);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(t0!=  firstTime)  {  computeDerivatives(t0,  y0,  scale);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(t0!=  firstTime)  {  computeDerivatives(t0,  y0,  scale);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    computeDerivatives(t0,    y0,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
319	[BUG]  [BUGGY]  if(firstTime)  {  computeDerivatives(t0,  y0,  scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  computeDerivatives(t0,  y0,  scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  computeDerivatives(t0,  y0,  scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(firstTime)    {    computeDerivatives(t0,    y0,    vecAbsoluteTolerance);    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
320	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  not  a  statement	90	None	replace
321	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  0,  yDotK[0]);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  0,  yDotK[0]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  0,  yDotK[0]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(y0[k],    y,    yDotK[0]);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
322	[BUG]  [BUGGY]  Arrays.fill(scale,  y0,  t0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  Arrays.fill(scale,  y0,  t0);  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0,  t0);	  Arrays.fill(scale,    y0);    	non-compiled	[CE]  not  a  statement	9	None	replace
323	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scala);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scala);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  scala);	  scalAbsoluteTolerance    =    Math.max(scala,    scale);    	non-compiled	[CE]  not  a  statement	47	None	replace
324	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
325	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
326	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(scalAbsoluteTolerance!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance!=  null)  {  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	  if(y0!=    null)    {    if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
327	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  vAbsoluteTolerance);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  vAbsoluteTolerance);  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  vAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scale,    scalAbsoluteTolerance);    	non-compiled	[CE]  not  a  statement	68	None	replace
328	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
329	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  t0.length;  firstTime  =  false;  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  t0.length;  firstTime  =  false;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  t0.length;  firstTime  =  false;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
330	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  t0;  firstTime  =  false;  }  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  t0;  firstTime  =  false;  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  t0;  }  else  {  scale  =  t0;  firstTime  =  false;  }	  if(firstTime)    {    scale    =    vecAbsoluteTolerance;    }    else    {    scale    =    vecAbsoluteTolerance;    firstTime    =    false;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
331	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  >=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];      [BUGGY]  if(vecAbsoluteTolerance  >=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [BUGGY]      }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  >=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }	  if(equations!=    null)    {    for(int    k    =    0;    k    <    scale.length;    k++)    {    computeDerivatives(t0,    y,    yDotK[0],    yTmp,    yDotK[1]);    }    	non-compiled	[CE]  not  a  statement	83	None	replace
