bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime  ==  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  ==  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  if(firstTime!=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime!=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime!=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  while  expected  [FE]                    AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  while  expected	10	None	replace
4	[BUG]  [BUGGY]  if(firstTime!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	1	None	replace
6	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	1	None	replace
7	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	1	None	replace
8	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  Arrays.fill(scale,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	1	None	replace
9	[BUG]  [BUGGY]  Arrays.fill(scale,  y0);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  y0);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0);	  java.util.Arrays.fill(scale,    scale);    	non-compiled	[CE]  while  expected	12	None	replace
10	[BUG]  [BUGGY]  Arrays.fill(y0,  scale);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(y0,  scale);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(y0,  scale);	  java.util.Arrays.fill(scale,    scale);    	non-compiled	[CE]  while  expected	12	None	replace
11	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scalaAbsoluteTolerance);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scalaAbsoluteTolerance);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  scalaAbsoluteTolerance);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	14	None	replace
12	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  scale);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  scale);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  scale);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	14	None	replace
13	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalaAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalaAbsoluteTolerance);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  scalaAbsoluteTolerance);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	14	None	replace
14	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scale);  [CE]  while  expected  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scale);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  scale);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	14	None	replace
15	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	6	None	replace
16	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	6	None	replace
17	[BUG]  [BUGGY]  Arrays.fill(scale,  0,  y0.length);  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  0,  y0.length);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  0,  y0.length);	  java.util.Arrays.fill(scale,    1);    	non-compiled	[CE]  while  expected	11	None	replace
18	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  0);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  java.util.Arrays.fill(scale,  0);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  0);	  java.util.Arrays.fill(scale,    1);    	non-compiled	[CE]  while  expected	11	None	replace
19	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0.length);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  java.util.Arrays.fill(scale,  y0.length);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0.length);	  java.util.Arrays.fill(scale,    1);    	non-compiled	[CE]  while  expected	11	None	replace
20	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0.length);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0.length);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0.length);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0.length);    	non-compiled	[CE]  while  expected	18	None	replace
21	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale.length);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale.length);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale.length);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0.length);    	non-compiled	[CE]  while  expected	18	None	replace
22	[BUG]  [BUGGY]  Arrays.fill(a,  t0);  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(a,  t0);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(a,  t0);	  java.util.Arrays.fill(scale,    t0);    	non-compiled	[CE]  while  expected	4	None	replace
23	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(scalAbsoluteTolerance  ==  firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scalAbsoluteTolerance  ==  firstTime)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance!=    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	20	None	replace
24	[BUG]  [BUGGY]  if(firstTime!=  scale)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime!=  scale)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime!=  scale)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance!=    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	20	None	replace
25	[BUG]  [BUGGY]  if(firstTime  >=  scale)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]                  AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime  >=  scale)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  >=  scale)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance!=    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	20	None	replace
26	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0);    	non-compiled	[CE]  while  expected	19	None	replace
27	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale);  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0);    	non-compiled	[CE]  while  expected	19	None	replace
28	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0);  [CE]  while  expected  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0);    	non-compiled	[CE]  while  expected	19	None	replace
29	[BUG]  [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  true;	      Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	16	None	replace
30	[BUG]  [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  [CE]  while  expected  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;	      Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	16	None	replace
31	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  [CE]  while  expected  [FE]                  AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  firstTime  =  false;	      Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	16	None	replace
32	[BUG]  [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  [CE]  while  expected  [FE]                    AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }	      Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	16	None	replace
33	[BUG]  [BUGGY]  Arrays.fill(b,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(b,  scale,  vecAbsoluteTolerance);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(b,  scale,  vecAbsoluteTolerance);	  Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	3	None	replace
34	[BUG]  [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  scale);  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  scale);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(vecAbsoluteTolerance,  scale);	  Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	3	None	replace
35	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0);  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0);    	non-compiled	[CE]  while  expected	17	None	replace
36	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t0);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t0);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t0);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0);    	non-compiled	[CE]  while  expected	17	None	replace
37	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0);    	non-compiled	[CE]  while  expected	17	None	replace
38	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[0]);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y[k]);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(y0[k],  y,  yDotK[1]);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  scale  =  vecAbsoluteTolerance;  [CE]  while  expected  [FE]                      AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scale  =  vecAbsoluteTolerance;  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  vecAbsoluteTolerance;	      	non-compiled	[CE]  while  expected	5	None	replace
42	[BUG]  [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	9	None	replace
44	[BUG]  [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
45	[BUG]  [BUGGY]  if(scale!=  null)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(scale!=  null)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale!=  null)  {  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
46	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  firstTime);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  firstTime);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  firstTime);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    firstTime);    	non-compiled	[CE]  while  expected	15	None	replace
47	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scala,  scale);  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.max(scala,  scale);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scala,  scale);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    firstTime);    	non-compiled	[CE]  while  expected	15	None	replace
48	[BUG]  [BUGGY]  Arrays.fill(scale,  y0,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  y0,  vecAbsoluteTolerance);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0,  vecAbsoluteTolerance);	  java.util.Arrays.fill(scale,    y0);    	non-compiled	[CE]  while  expected	2	None	replace
49	[BUG]  [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  if(vecRelativeTolerance!=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecRelativeTolerance!=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecRelativeTolerance!=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	7	None	replace
52	[BUG]  [BUGGY]  Arrays.fill(scale,  y0);  firstTime  =  false;  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  y0);  firstTime  =  false;  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0);  firstTime  =  false;	      Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	16	None	replace
53	[BUG]  [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  vecAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  new  double[y0.length],  vecAbsoluteTolerance);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  new  double[y0.length],  vecAbsoluteTolerance);	  Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	3	None	replace
54	[BUG]  [BUGGY]  Arrays.fill(scale,  new  double[y0.length]);  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  new  double[y0.length]);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  new  double[y0.length]);	  Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	3	None	replace
55	[BUG]  [BUGGY]  Arrays.fill(scale,  1);  [CE]  while  expected  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  1);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  1);	  Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	3	None	replace
56	[BUG]  [BUGGY]  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecRelativeTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	9	None	replace
57	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  2);  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  java.util.Arrays.fill(scale,  2);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  2);	  java.util.Arrays.fill(scale,    1);    	non-compiled	[CE]  while  expected	11	None	replace
58	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  new  double[y0.length]);  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  java.util.Arrays.fill(scale,  new  double[y0.length]);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  new  double[y0.length]);	  java.util.Arrays.fill(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	1	None	replace
59	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  java.util.Arrays.fill(scale,  y0,  vecAbsoluteTolerance);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0,  vecAbsoluteTolerance);	  java.util.Arrays.fill(scale,    y0);    	non-compiled	[CE]  while  expected	2	None	replace
60	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  vecAbsoluteTolerance);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  vecAbsoluteTolerance);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	14	None	replace
61	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalAbsoluteTolerance);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  scalAbsoluteTolerance);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	14	None	replace
62	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  }	      	non-compiled	[CE]  while  expected	5	None	replace
63	[BUG]  [BUGGY]  if(firstTime)  {  computeDerivatives(t0,  y0,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]                  AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime)  {  computeDerivatives(t0,  y0,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  computeDerivatives(t0,  y0,  vecAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }	      	non-compiled	[CE]  while  expected	5	None	replace
64	[BUG]  [BUGGY]  scale  =  vecAbsoluteTolerance.doubleValue();  [CE]  while  expected  [FE]                    AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scale  =  vecAbsoluteTolerance.doubleValue();  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scale  =  vecAbsoluteTolerance.doubleValue();	      	non-compiled	[CE]  while  expected	5	None	replace
65	[BUG]  [BUGGY]  if(firstTime)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }  [CE]  while  expected  [FE]                      AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  scale  =  vecAbsoluteTolerance;  }  else  {  scale  =  vecAbsoluteTolerance;  firstTime  =  false;  }	      	non-compiled	[CE]  while  expected	5	None	replace
66	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  new  double[y0.length];  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  new  double[y0.length];  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  new  double[y0.length];	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	6	None	replace
67	[BUG]  [BUGGY]  Arrays.fill(scale,  0,  t0);  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  0,  t0);  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  0,  t0);	  java.util.Arrays.fill(scale,    t0);    	non-compiled	[CE]  while  expected	4	None	replace
68	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scalAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scalAbsoluteTolerance);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  scalAbsoluteTolerance);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    firstTime);    	non-compiled	[CE]  while  expected	15	None	replace
69	[BUG]  [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  while  expected  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  while  expected	10	None	replace
70	[BUG]  [BUGGY]  if(firstTime  >=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime  >=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime  >=  null)  {  if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
71	[BUG]  [BUGGY]  Arrays.fill(scale,  0);  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  0);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  0);	      Arrays.fill(scale,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	13	None	replace
72	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(t0);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(t0);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateVectorAbsoluteTolerance(t0);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0);    	non-compiled	[CE]  while  expected	19	None	replace
73	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance!=    firstTime)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	20	None	replace
74	[BUG]  [BUGGY]  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecRelativeTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	7	None	replace
75	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale);  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0);    	non-compiled	[CE]  while  expected	17	None	replace
76	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale.length);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale.length);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale.length);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0.length);    	non-compiled	[CE]  while  expected	18	None	replace
77	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [CE]  while  expected  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.max(scalAbsoluteTolerance,  firstTime);  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  while  expected	10	None	replace
78	[BUG]  [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [CE]  while  expected  [FE]                  AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(vecAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scale,  firstTime);  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    Math.min(scalAbsoluteTolerance,    firstTime);    }    	non-compiled	[CE]  while  expected	10	None	replace
79	[BUG]  [BUGGY]  Arrays.fill(scale,  y0.length);  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  Arrays.fill(scale,  y0.length);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  y0.length);	      Arrays.fill(scale,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	13	None	replace
80	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scala,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.max(scala,  vecAbsoluteTolerance);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scala,  vecAbsoluteTolerance);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    firstTime);    	non-compiled	[CE]  while  expected	15	None	replace
81	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  vecAbsoluteTolerance);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  vecAbsoluteTolerance);	      scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    firstTime);    	non-compiled	[CE]  while  expected	15	None	replace
82	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0]);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
83	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp,  yDotK[1]);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  yTmp);  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y0,  yTmp);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
85	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }  [BUGGY]    }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(equations!=  null)  {  for(int  k  =  0;  k  <  scale.length;  k++)  {  computeDerivatives(t0,  y,  yDotK[0],  yTmp);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
86	[BUG]  [BUGGY]  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]            AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(scale  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale  ==  null)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	8	None	replace
87	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0.length);  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0.length);  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0.length);	      scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0.length);    	non-compiled	[CE]  while  expected	18	None	replace
88	[BUG]  [BUGGY]  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]        AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(scale!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(scale!=  null)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    	non-compiled	[CE]  while  expected	6	None	replace
89	[BUG]  [BUGGY]  if(y0!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(y0!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
90	[BUG]  [BUGGY]  if(y0!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(y0!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  null)  {  if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }	      if(scalAbsoluteTolerance    ==    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
91	[BUG]  [BUGGY]  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]          AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(y0!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }	      if(scalAbsoluteTolerance!=    null)    {    scale    =    new    double[y0.length];    }    else    {    scale    =    vecAbsoluteTolerance;    }    	non-compiled	[CE]  while  expected	7	None	replace
92	[BUG]  [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]              AssertionError    [CONTEXT]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];    [BUGGY]  if(firstTime)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]    java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	if(firstTime)  {  Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  }  else  {  scale  =  vecAbsoluteTolerance;  }	      Arrays.fill(scale,    scalAbsoluteTolerance);    firstTime    =    false;    	non-compiled	[CE]  while  expected	16	None	replace
