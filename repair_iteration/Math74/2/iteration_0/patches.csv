bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]    AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(scale,  vecAbsoluteTolerance);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  vecAbsoluteTolerance);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  while  expected	3	None	replace
2	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  y0);  [CE]  while  expected  [FE]      AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(scale,  y0);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  y0);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  while  expected	3	None	replace
3	[BUG]  [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]        AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	Arrays.fill(scale,  vecAbsoluteTolerance);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  while  expected	3	None	replace
4	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  t0);  [CE]  while  expected  [FE]          AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(scale,  t0);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  t0);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  while  expected	3	None	replace
5	[BUG]  [BUGGY]    [CE]  while  expected  [FE]            AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	  	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  while  expected	3	None	replace
6	[BUG]  [BUGGY]    if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]    AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }		non-compiled	[CE]  while  expected	4	None	add
7	[BUG]  [BUGGY]    if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]      AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }		non-compiled	[CE]  while  expected	4	None	add
8	[BUG]  [BUGGY]    if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]        AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }		non-compiled	[CE]  while  expected	4	None	add
9	[BUG]  [BUGGY]    if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [CE]  while  expected  [FE]          AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    if(scalAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  vecAbsoluteTolerance;  }		non-compiled	[CE]  while  expected	4	None	add
10	[BUG]  [BUGGY]    if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [CE]  while  expected  [FE]            AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    if(scalAbsoluteTolerance!=  null)  {  scale  =  new  double[y0.length];  }  else  {  scale  =  Math.min(scalAbsoluteTolerance,  firstTime);  }		non-compiled	[CE]  while  expected	4	None	add
11	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  1);  [CE]  while  expected  [FE]    AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(scale,  1);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  1);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  while  expected	3	None	replace
12	[BUG]  [BUGGY]  java.util.Arrays.fill(scale,  scale);  [CE]  while  expected  [FE]      AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]  java.util.Arrays.fill(scale,  scale);  [BUGGY]  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	java.util.Arrays.fill(scale,  scale);	java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  	non-compiled	[CE]  while  expected	3	None	replace
13	[BUG]  [BUGGY]    Arrays.fill(scale,  scalAbsoluteTolerance);  [CE]  while  expected  [FE]    AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    Arrays.fill(scale,  scalAbsoluteTolerance);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    Arrays.fill(scale,  scalAbsoluteTolerance);		non-compiled	[CE]  while  expected	4	None	add
14	[BUG]  [BUGGY]    scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  scale);  [CE]  while  expected  [FE]      AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  scale);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  scale);		non-compiled	[CE]  while  expected	4	None	add
15	[BUG]  [BUGGY]    scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  firstTime);  [CE]  while  expected  [FE]        AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  firstTime);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  firstTime);		non-compiled	[CE]  while  expected	4	None	add
16	[BUG]  [BUGGY]    Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  [CE]  while  expected  [FE]          AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    Arrays.fill(scale,  scalAbsoluteTolerance);  firstTime  =  false;		non-compiled	[CE]  while  expected	4	None	add
17	[BUG]  [BUGGY]    scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0);  [CE]  while  expected  [FE]    AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0);		non-compiled	[CE]  while  expected	4	None	add
18	[BUG]  [BUGGY]    scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0.length);  [CE]  while  expected  [FE]      AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0.length);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0.length);		non-compiled	[CE]  while  expected	4	None	add
19	[BUG]  [BUGGY]    scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0);  [CE]  while  expected  [FE]        AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0);  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0);		non-compiled	[CE]  while  expected	4	None	add
20	[BUG]  [BUGGY]    if(scalAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[y0.length];  }  [CE]  while  expected  [FE]          AssertionError  [CONTEXT]  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {  scale  =  new  double[y0.length];  [BUGGY]    if(scalAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[y0.length];  }  [BUGGY]  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	248	248	1	replace	    if(scalAbsoluteTolerance!=  firstTime)  {  scale  =  new  double[y0.length];  }		non-compiled	[CE]  while  expected	4	None	add
