bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  dt,  hNew);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  dt,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  dt,  hNew);	  loop    =    new    CombinedEventsManager.doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
2	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  dt);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  dt);	  loop    =    new    CombinedEventsManager.doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
3	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(hNew,  y0,  t0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(hNew,  y0,  t0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.doubleValue(hNew,  y0,  t0);	  loop    =    new    CombinedEventsManager.doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
4	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  b);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  b);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  b);	  loop    =    new    CombinedEventsManager.doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
5	[BUG]  [BUGGY]  hNew  =  hNew  +  2;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  hNew  +  2;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  hNew  +  2;	  hNew    =    hNew    +    1;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
6	[BUG]  [BUGGY]  hNew  =  hNew  +  3;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  hNew  +  3;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  hNew  +  3;	  hNew    =    hNew    +    1;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
7	[BUG]  [BUGGY]  hNew  =  dt  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  dt  +  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  dt  +  1;	  hNew    =    hNew    +    1;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
8	[BUG]  [BUGGY]  loop  =  Math.abs(dt);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.abs(dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.abs(dt);	  loop    =    Math.abs(hNew);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
9	[BUG]  [BUGGY]  loop  =  Math.abs(hNew  -  dt);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.abs(hNew  -  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.abs(hNew  -  dt);	  loop    =    Math.abs(hNew);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
10	[BUG]  [BUGGY]  loop  =  Math.abs(hNew  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.abs(hNew  +  1);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.abs(hNew  +  1);	  loop    =    Math.abs(hNew);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
11	[BUG]  [BUGGY]  loop  =  Math.abs(hNew  +  stepStart);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.abs(hNew  +  stepStart);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.abs(hNew  +  stepStart);	  loop    =    Math.abs(hNew);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
12	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  -  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  -  1);	  hNew    =    Math.max(hNew,    dt    -    stepStart);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
13	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  -  stepStart  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  -  stepStart  +  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  -  stepStart  +  1);	  hNew    =    Math.max(hNew,    dt    -    stepStart);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
14	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  -  error);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  -  error);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  -  error);	  hNew    =    Math.max(hNew,    dt    -    stepStart);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
15	[BUG]  [BUGGY]  hNew  =  Math.abs(hNew  +  2);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.abs(hNew  +  2);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.abs(hNew  +  2);	  hNew    =    Math.abs(hNew    +    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
16	[BUG]  [BUGGY]  hNew  =  Math.abs(hNew  *  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.abs(hNew  *  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.abs(hNew  *  1);	  hNew    =    Math.abs(hNew    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
17	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.Integrator(hNew);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.Integrator(hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.Integrator(hNew);	  loop    =    new    CombinedEventsManager.Integrator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
18	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.Integrator(0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.Integrator(0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.Integrator(0);	  loop    =    new    CombinedEventsManager.Integrator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
19	[BUG]  [BUGGY]  hNew  =  new  CombinedEventsManager.Integrator();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  new  CombinedEventsManager.Integrator();  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  new  CombinedEventsManager.Integrator();	  loop    =    new    CombinedEventsManager.Integrator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
20	[BUG]  [BUGGY]  loop  =  hNew  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  hNew  -  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  hNew  -  1;	  loop    =    hNew    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
21	[BUG]  [BUGGY]  loop  =  hNew  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  hNew  +  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  hNew  +  1;	  loop    =    hNew    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
22	[BUG]  [BUGGY]  loop  =(hNew  +  1)  <  <  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =(hNew  +  1)  <  <  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =(hNew  +  1)  <  <  1;	  loop    =    hNew    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
23	[BUG]  [BUGGY]  loop  =(hNew  -  1)  <  <  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =(hNew  -  1)  <  <  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =(hNew  -  1)  <  <  1;	  loop    =    hNew    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
24	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  +  stepStart);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt  +  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt  +  stepStart);	  hNew    =    Math.max(hNew,    dt    +    stepStart);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
25	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart,  error);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart,  error);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  +  stepStart,  error);	  hNew    =    Math.max(hNew,    dt    +    stepStart);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
26	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepEnd);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepEnd);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  +  stepEnd);	  hNew    =    Math.max(hNew,    dt    +    stepStart);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
27	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart,  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart,  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  +  stepStart,  1);	  hNew    =    Math.max(hNew,    dt    +    stepStart);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
28	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  dt);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  dt);	  loop    =    new    CombinedEquationsManager(t0,    y0,    hNew);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
29	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  dt);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  dt);	  loop    =    new    CombinedEquationsManager(t0,    y0,    hNew);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
30	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(hNew,  y0,  t0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager(hNew,  y0,  t0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager(hNew,  y0,  t0);	  loop    =    new    CombinedEquationsManager(t0,    y0,    hNew);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
31	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  rki);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  rki);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  rki);	  loop    =    new    CombinedEquationsManager(t0,    y0,    hNew);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
32	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  1);	  hNew    =    Math.max(hNew,    0);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
33	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  2);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  2);	  hNew    =    Math.max(hNew,    0);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
34	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  1);	  hNew    =    Math.max(hNew,    0);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
35	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  3);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  3);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  3);	  hNew    =    Math.max(hNew,    0);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
36	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager(manager,  error,  t0,  y1,  hNew);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager(manager,  error,  t0,  y1,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager(manager,  error,  t0,  y1,  hNew);	  loop    =    new    CombinedEventsManager(manager,    t0,    y1,    hNew);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
37	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager(manager,  error,  y0,  hNew);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager(manager,  error,  y0,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager(manager,  error,  y0,  hNew);	  loop    =    new    CombinedEventsManager(manager,    t0,    y1,    hNew);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
38	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager(manager,  t0,  y,  hNew);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager(manager,  t0,  y,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager(manager,  t0,  y,  hNew);	  loop    =    new    CombinedEventsManager(manager,    t0,    y1,    hNew);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
39	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager(t0,  y0,  hNew);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager(t0,  y0,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager(t0,  y0,  hNew);	  loop    =    new    CombinedEventsManager(manager,    t0,    y1,    hNew);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
40	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt,  stepStart  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt,  stepStart  +  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt,  stepStart  +  1);	  hNew    =    Math.min(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  +  1,  stepStart);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt  +  1,  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt  +  1,  stepStart);	  hNew    =    Math.min(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt,  stepEnd  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt,  stepEnd  +  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt,  stepEnd  +  1);	  hNew    =    Math.min(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt,  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt,  1);	  hNew    =    Math.min(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
44	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt)-  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt)-  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt)-  1;	  hNew    =    Math.min(hNew,    hNew)-    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
45	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t)-  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  t)-  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  t)-  1;	  hNew    =    Math.min(hNew,    hNew)-    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
46	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  hNew)/  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  hNew)/  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  hNew)/  1;	  hNew    =    Math.min(hNew,    hNew)-    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
47	[BUG]  [BUGGY]  hNew  =  Math.max(t,  hNew);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(t,  hNew);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(t,  hNew);	  hNew    =    Math.max(hNew,    t);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
48	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  +  2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  +  2);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  +  2);	  hNew    =    Math.max(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
49	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  +  1,  stepStart);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  +  1,  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  +  1,  stepStart);	  hNew    =    Math.max(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
50	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t0,  y);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  t0,  y);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  t0,  y);	  hNew    =    Math.min(hNew,    t0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
51	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t0,  dt);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  t0,  dt);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  t0,  dt);	  hNew    =    Math.min(hNew,    t0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
52	[BUG]  [BUGGY]  hNew  =  Math.min(t0,  hNew);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(t0,  hNew);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(t0,  hNew);	  hNew    =    Math.min(hNew,    t0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
53	[BUG]  [BUGGY]  hNew  =  Math.max(t0,  hNew  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(t0,  hNew  +  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(t0,  hNew  +  1);	  hNew    =    Math.max(t0,    hNew);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
54	[BUG]  [BUGGY]  hNew  =  Math.max(t0,  dt);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(t0,  dt);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(t0,  dt);	  hNew    =    Math.max(t0,    hNew);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
55	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  hNew);  hNew  =  hNew;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
56	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  yNew);  hNew  =  hNew;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  yNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  yNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
57	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  yNew);  hNew  =  hNew;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  yNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  yNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
58	[BUG]  [BUGGY]  loop  =  Math.max(dt,  hNew);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(dt,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(dt,  hNew);	  loop    =    error;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  loop  -=  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  -=  null;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  -=  null;	  loop    -=    true;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  -  stepStart  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0  -  stepStart  +  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0  -  stepStart  +  1);	  hNew    =    Math.max(hNew,    t0    -    stepStart);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
61	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t0  -  stepStart);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  t0  -  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  t0  -  stepStart);	  hNew    =    Math.max(hNew,    t0    -    stepStart);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
62	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t1  -  stepStart);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t1  -  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t1  -  stepStart);	  hNew    =    Math.max(hNew,    t0    -    stepStart);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
63	[BUG]  [BUGGY]  loop  =  Math.max(l,  hNew,  dt);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(l,  hNew,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(l,  hNew,  dt);	  loop    =    Math.max(l,    hNew);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  loop  =  Math.max(l,  hNew,  t);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(l,  hNew,  t);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(l,  hNew,  t);	  loop    =    Math.max(l,    hNew);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  loop  =  Math.max(l,  hNew,  t0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(l,  hNew,  t0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(l,  hNew,  t0);	  loop    =    Math.max(l,    hNew);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  loop  =  Math.max(l,  hNew,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(l,  hNew,  0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(l,  hNew,  0);	  loop    =    Math.max(l,    hNew);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  hNew  +  1,  dt);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  hNew  +  1,  dt);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  hNew  +  1,  dt);	  hNew    =    Math.min(hNew,    hNew    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
68	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  hNew  +  1,  hSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  hNew  +  1,  hSize);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  hNew  +  1,  hSize);	  hNew    =    Math.min(hNew,    hNew    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
69	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  -  stepStart  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt  -  stepStart  +  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt  -  stepStart  +  1);	  hNew    =    Math.min(hNew,    dt    -    stepStart);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
70	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  -  error);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt  -  error);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt  -  error);	  hNew    =    Math.min(hNew,    dt    -    stepStart);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
71	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  hNew.length  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  hNew.length  -  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  hNew.length  -  1);	  hNew    =    Math.min(hNew,    hNew.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
72	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  hNew.length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  hNew.length);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  hNew.length);	  hNew    =    Math.min(hNew,    hNew.length);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
73	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  hNew.length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  hNew.length  +  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  hNew.length  +  1);	  hNew    =    Math.min(hNew,    hNew.length);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
74	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t,  stepStart);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  t,  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  t,  stepStart);	  hNew    =    Math.min(hNew,    t);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
75	[BUG]  [BUGGY]  hNew  =  Math.min(t,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(t,  hNew);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(t,  hNew);	  hNew    =    Math.min(hNew,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
76	[BUG]  [BUGGY]  hNew  =  c;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  c;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  c;	  hNew    =    b;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
77	[BUG]  [BUGGY]  hNew  =  t  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  t  +  stepStart;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  t  +  stepStart;	  hNew    =    t;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
78	[BUG]  [BUGGY]  loop  -=  Math.min(hNew,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  -=  Math.min(hNew,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  -=  Math.min(hNew,  hNew);	  loop    -=    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
79	[BUG]  [BUGGY]  loop  -=  Math.max(hNew,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  -=  Math.max(hNew,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  -=  Math.max(hNew,  dt);	  loop    -=    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
80	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  +  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.abs(dt  +  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.abs(dt  +  stepStart);	  hNew    =    Math.abs(dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
81	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  dt);	  loop    =    new    CombinedEquationsManager().doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
82	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  hNew,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  hNew,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  hNew,  dt);	  loop    =    new    CombinedEquationsManager().doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
83	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y1,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y1,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue(t0,  y1,  hNew);	  loop    =    new    CombinedEquationsManager().doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
84	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(hNew,  y0,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(hNew,  y0,  t0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue(hNew,  y0,  t0);	  loop    =    new    CombinedEquationsManager().doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
85	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.min(hNew,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.min(hNew,  dt);	  loop    =    Math.min(hNew,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
86	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  hNew  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.min(hNew,  hNew  +  1);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.min(hNew,  hNew  +  1);	  loop    =    Math.min(hNew,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
87	[BUG]  [BUGGY]  loop  =  Math.max(len,  hNew  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(len,  hNew  +  1);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(len,  hNew  +  1);	  loop    =    Math.max(len,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
88	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  len);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.min(hNew,  len);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.min(hNew,  len);	  loop    =    Math.max(len,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
89	[BUG]  [BUGGY]  loop  =  Math.max(len,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(len,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(len,  dt);	  loop    =    Math.max(len,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
90	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
91	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  dt,  0,  hNew);  hNew  =  hNew;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  dt,  0,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  dt,  0,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
92	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  b,  0,  b);  hNew  =  b;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  b,  0,  b);  hNew  =  b;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  b,  0,  b);  hNew  =  b;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
93	[BUG]  [BUGGY]  loop  -=  hNew  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  -=  hNew  +  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  -=  hNew  +  1;	  loop    -=    hNew;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
94	[BUG]  [BUGGY]  loop  -=  dt;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  -=  dt;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  -=  dt;	  loop    -=    hNew;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
95	[BUG]  [BUGGY]  loop  -=  Math.max(hNew,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  -=  Math.max(hNew,  0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  -=  Math.max(hNew,  0);	  loop    -=    hNew;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
96	[BUG]  [BUGGY]  loop  -=  3;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  -=  3;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  -=  3;	  loop    -=    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
97	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(hNew);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue(hNew);	  loop    =    new    CombinedEquationsManager().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
98	[BUG]  [BUGGY]  hNew  =  new  CombinedEquationsManager().doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  new  CombinedEquationsManager().doubleValue();  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  new  CombinedEquationsManager().doubleValue();	  loop    =    new    CombinedEquationsManager().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
99	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue()  +  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue()  +  1;	  loop    =    new    CombinedEquationsManager().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
100	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  dt,  hNew);  hNew  =  hNew;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  dt,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  dt,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
101	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  hNew);  hNew  =  hNew;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
102	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  hNew,  hNew);  hNew  =  hNew;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  hNew,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(dt)  <  =  Math.abs(dt))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  hNew,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
103	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt));  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt));	  hNew    =    Math.max(dt,    hNew);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
104	[BUG]  [BUGGY]  hNew  =  Math.max(dt,  hNew  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(dt,  hNew  +  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(dt,  hNew  +  1);	  hNew    =    Math.max(dt,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
105	[BUG]  [BUGGY]  loop  =  Math.max(l,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(l,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(l,  dt);	  loop    =    Math.max(hNew,    dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
106	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  hNew)/  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  hNew)/  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  hNew)/  1;	  hNew    =    Math.max(hNew,    hNew)-    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
107	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt)-  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt)-  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt)-  1;	  hNew    =    Math.max(hNew,    hNew)-    1;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
108	[BUG]  [BUGGY]  loop  =  hNew  &&  hNew;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  hNew  &&  hNew;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  hNew  &&  hNew;	  loop    =    hNew    ||    hNew;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
109	[BUG]  [BUGGY]  loop  =  hNew  ||  dt;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  hNew  ||  dt;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  hNew  ||  dt;	  loop    =    hNew    ||    hNew;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
110	[BUG]  [BUGGY]  loop  =  hNew  ||  hNew  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  hNew  ||  hNew  +  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  hNew  ||  hNew  +  1;	  loop    =    hNew    ||    hNew;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
111	[BUG]  [BUGGY]  loop  =  new  Double(hNew,  dt);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  Double(hNew,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  Double(hNew,  dt);	  loop    =    new    Double(hNew);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
112	[BUG]  [BUGGY]  loop  =  new  Double(dt);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  Double(dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  Double(dt);	  loop    =    new    Double(hNew);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
113	[BUG]  [BUGGY]  loop  =  new  Double(t0,  hNew);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  Double(t0,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  Double(t0,  hNew);	  loop    =    new    Double(hNew);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
114	[BUG]  [BUGGY]  loop  =  new  Double(hNew,  t0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  Double(hNew,  t0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  Double(hNew,  t0);	  loop    =    new    Double(hNew);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
115	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  -  2);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt  -  2);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt  -  2);	  hNew    =    Math.min(hNew,    dt    -    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
116	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  -  1,  stepStart);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt  -  1,  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt  -  1,  stepStart);	  hNew    =    Math.min(hNew,    dt    -    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
117	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  dt));  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.min(hNew,  dt));  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.min(hNew,  dt));	  loop    =    dt;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
118	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0,  stepStart);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0,  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0,  stepStart);	  hNew    =    Math.max(hNew,    t0    +    stepStart);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
119	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  dt);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  dt);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0  +  stepStart,  dt);	  hNew    =    Math.max(hNew,    t0    +    stepStart);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
120	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  y);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0  +  stepStart,  y);	  hNew    =    Math.max(hNew,    t0    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
121	[BUG]  [BUGGY]  hNew  =  Math.max(t0,  hNew  +  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(t0,  hNew  +  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(t0,  hNew  +  stepStart);	  hNew    =    Math.max(hNew,    t0    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
122	[BUG]  [BUGGY]  loop  =  Math.max(hNew,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(hNew,  t0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(hNew,  t0);	  loop    =    t0;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
123	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.min(hNew,  t0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.min(hNew,  t0);	  loop    =    t0;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
124	[BUG]  [BUGGY]  hNew  =  dt  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  dt  +  stepStart;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  dt  +  stepStart;	  hNew    =    dt;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
125	[BUG]  [BUGGY]  hNew  =  dt.intValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  dt.intValue();  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  dt.intValue();	  hNew    =    dt;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
126	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  hNew  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  hNew  +  2);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  hNew  +  2);	  hNew    =    Math.max(hNew,    hNew    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
127	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  hNew  *  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  hNew  *  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  hNew  *  1);	  hNew    =    Math.max(hNew,    hNew    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
128	[BUG]  [BUGGY]  hNew  =  new  Double(dt  +  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  new  Double(dt  +  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  new  Double(dt  +  stepStart);	  hNew    =    new    Double(dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
129	[BUG]  [BUGGY]  hNew  =  new  Double(stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  new  Double(stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  new  Double(stepStart);	  hNew    =    new    Double(dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
130	[BUG]  [BUGGY]  hNew  =  new  Double(dt,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  new  Double(dt,  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  new  Double(dt,  stepStart);	  hNew    =    new    Double(dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
131	[BUG]  [BUGGY]  hNew  =  new  Double(hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  new  Double(hNew);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  new  Double(hNew);	  hNew    =    new    Double(dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
132	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  hNew)-  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  hNew)-  2;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  hNew)-  2;	  hNew    =    Math.max(hNew,    hNew)-    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
133	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.Integrator(2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.Integrator(2);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.Integrator(2);	  loop    =    new    CombinedEventsManager.Integrator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
134	[BUG]  [BUGGY]  loop  =  Math.max(l,  t0,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(l,  t0,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(l,  t0,  dt);	  loop    =    Math.max(hNew,    dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
135	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(0);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue(0);	  loop    =    new    CombinedEquationsManager().doubleValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
136	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  k);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  k);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0  +  stepStart,  k);	  hNew    =    Math.max(hNew,    t0    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
137	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  0);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0  +  stepStart,  0);	  hNew    =    Math.max(hNew,    t0    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
138	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  l);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  l);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0  +  stepStart,  l);	  hNew    =    Math.max(hNew,    t0    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
139	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  *  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  *  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  *  1);	  hNew    =    Math.max(hNew,    dt    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
140	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  hNew)-  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  hNew)-  2;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  hNew)-  2;	  hNew    =    Math.min(hNew,    hNew)-    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
141	[BUG]  [BUGGY]  hNew  =  dt  +  stepEnd;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  dt  +  stepEnd;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  dt  +  stepEnd;	  hNew    =    dt;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
142	[BUG]  [BUGGY]  loop  =  hNew  /  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  hNew  /  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  hNew  /  1;	  loop    =    hNew    <    <    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
143	[BUG]  [BUGGY]  loop  =  hNew  %  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  hNew  %  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  hNew  %  1;	  loop    =    hNew    <    <    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
144	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  hNew  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  hNew  +  1);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  hNew  +  1);	  loop    =    new    CombinedEquationsManager().doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
145	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  hNew,  t1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  hNew,  t1);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue(t0,  y0,  hNew,  t1);	  loop    =    new    CombinedEquationsManager().doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
147	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	System.arraycopy(y0,  0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  0,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	System.arraycopy(y0,  0,  y0,  hNew,  0,  hNew);	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
149	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart  -  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  +  stepStart  -  1);	  hNew    =    Math.max(hNew,    dt    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
150	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  *  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  *  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  *  stepStart);	  hNew    =    Math.max(hNew,    dt    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
151	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  tOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  tOffset);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  tOffset);	  loop    =    new    CombinedEventsManager.doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
152	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  t1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  t1);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  t1);	  loop    =    new    CombinedEventsManager.doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
153	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  t2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  t2);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.doubleValue(t0,  y0,  hNew,  t2);	  loop    =    new    CombinedEventsManager.doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
154	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  -  stepStart  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0  -  stepStart  -  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0  -  stepStart  -  1);	  hNew    =    Math.max(hNew,    t0    -    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
155	[BUG]  [BUGGY]  loop  =  Math.min(len,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.min(len,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.min(len,  hNew);	  loop    =    Math.max(len,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
156	[BUG]  [BUGGY]  loop  =  new  Double(hNew  +  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  Double(hNew  +  stepStart);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  Double(hNew  +  stepStart);	  loop    =    new    Double(hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
157	[BUG]  [BUGGY]  loop  =  new  Double(hNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  Double(hNew,  t);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  Double(hNew,  t);	  loop    =    new    Double(hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
158	[BUG]  [BUGGY]  loop  =  Math.min(error,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.min(error,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.min(error,  hNew);	  loop    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
159	[BUG]  [BUGGY]  loop  =  Math.abs(l);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.abs(l);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.abs(l);	  loop    =    Math.abs(hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
160	[BUG]  [BUGGY]  loop  =  Math.abs(hNew  +  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.abs(hNew  +  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.abs(hNew  +  dt);	  loop    =    Math.abs(hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
161	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  t  -  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  t  -  1);	  hNew    =    Math.min(hNew,    dt    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
162	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  hNew  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  hNew  -  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  hNew  -  1);	  hNew    =    Math.min(hNew,    dt    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  System.arraycopy(y0,  0,  y0,  hNew,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	System.arraycopy(y0,  0,  y0,  hNew,  hNew);	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
164	[BUG]  [BUGGY]  LooperTraversal.traverse(compiler,  rki,  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  LooperTraversal.traverse(compiler,  rki,  this);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	LooperTraversal.traverse(compiler,  rki,  this);	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(y0,  y0,  hNew,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  System.arraycopy(y0,  y0,  hNew,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	System.arraycopy(y0,  y0,  hNew,  hNew);	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
166	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t0  +  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  t0  +  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  t0  +  stepStart);	  hNew    =    Math.min(hNew,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
167	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  0);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  0);	  hNew    =    Math.max(hNew,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
168	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  hNew)-  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.min(hNew,  hNew)-  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.min(hNew,  hNew)-  1;	  loop    =    Math.min(hNew,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
169	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  hNew)+  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.min(hNew,  hNew)+  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.min(hNew,  hNew)+  1;	  loop    =    Math.min(hNew,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
170	[BUG]  [BUGGY]  loop  =  hNew  ||  t0;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  hNew  ||  t0;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  hNew  ||  t0;	  loop    =    hNew    ||    hNew;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
171	[BUG]  [BUGGY]  loop  -=  4;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  -=  4;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  -=  4;	  loop    -=    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
172	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew  +  1);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  hNew  +  1);	  loop    =    new    CombinedEquationsManager(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
173	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  tOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  tOffset);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  tOffset);	  loop    =    new    CombinedEquationsManager(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
174	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager(manager,  y0,  t1,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager(manager,  y0,  t1,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager(manager,  y0,  t1,  hNew);	  loop    =    new    CombinedEventsManager(manager,    t0,    y1,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
175	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager(manager,  t0,  y0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager(manager,  t0,  y0,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager(manager,  t0,  y0,  hNew);	  loop    =    new    CombinedEventsManager(manager,    t0,    y1,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
176	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager(manager,  hNew,  y0,  t1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager(manager,  hNew,  y0,  t1);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager(manager,  hNew,  y0,  t1);	  loop    =    new    CombinedEventsManager(manager,    t0,    y1,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
177	[BUG]  [BUGGY]  loop  -=  Math.min(hNew,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  -=  Math.min(hNew,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  -=  Math.min(hNew,  dt);	  loop    -=    hNew;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
178	[BUG]  [BUGGY]  hNew  =  new  Double(y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  new  Double(y0);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  new  Double(y0);	  hNew    =    new    Double(dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
179	[BUG]  [BUGGY]  hNew  =  new  Double(t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  new  Double(t0);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  new  Double(t0);	  hNew    =    new    Double(dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
180	[BUG]  [BUGGY]  hNew  =  hNew  *  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  hNew  *  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  hNew  *  1;	  hNew    =    hNew    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
181	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  hNew  *  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  hNew  *  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  hNew  *  1);	  hNew    =    Math.min(hNew,    hNew    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
182	[BUG]  [BUGGY]  loop  =  Math.max(t0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(t0,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(t0,  hNew);	  loop    =    t0;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
183	[BUG]  [BUGGY]  loop  =  Math.max(loop,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(loop,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(loop,  hNew);	  loop    =    t0;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
184	[BUG]  [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  hNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
185	[BUG]  [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  yNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  yNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  yNew,  0,  yNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
186	[BUG]  [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  hNew,  0,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
187	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(y0,  t0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.doubleValue(y0,  t0,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.doubleValue(y0,  t0,  hNew);	  loop    =    new    CombinedEventsManager.doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
188	[BUG]  [BUGGY]  hNew  =  Math.abs(hNew  /  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.abs(hNew  /  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.abs(hNew  /  1);	  hNew    =    Math.abs(hNew    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
189	[BUG]  [BUGGY]  hNew  =  Math.abs(hNew  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.abs(hNew  -  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.abs(hNew  -  1);	  hNew    =    Math.abs(hNew    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
190	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  t.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  t.length);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  t.length);	  loop    =    new    CombinedEquationsManager(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
191	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(y0,  t0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager(y0,  t0,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager(y0,  t0,  hNew);	  loop    =    new    CombinedEquationsManager(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
192	[BUG]  [BUGGY]  hNew  =  new  Double(dt  -  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  new  Double(dt  -  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  new  Double(dt  -  stepStart);	  hNew    =    new    Double(dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
193	[BUG]  [BUGGY]  hNew  =  dt  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  dt  -  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  dt  -  1;	  hNew    =    dt;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
194	[BUG]  [BUGGY]  hNew  =  dt  -  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  dt  -  stepStart;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  dt  -  stepStart;	  hNew    =    dt;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
195	[BUG]  [BUGGY]  loop  =  Math.max(loop,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(loop,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(loop,  dt);	  loop    =    Math.max(hNew,    dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
196	[BUG]  [BUGGY]  loop  =  Math.max(t0,  dt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(t0,  dt);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(t0,  dt);	  loop    =    Math.max(hNew,    dt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
197	[BUG]  [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  yNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  yNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  yNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
198	[BUG]  [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  hNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
199	[BUG]  [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  y);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  y);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  0,  y);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
200	[BUG]  [BUGGY]  loop  =  Math.abs(loop);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.abs(loop);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.abs(loop);	  loop    =    Math.abs(hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
201	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  y1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  y1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  y1);	  hNew    =    Math.min(hNew,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
202	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  /  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  dt  /  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  dt  /  1);	  hNew    =    Math.min(hNew,    dt    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
203	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager(manager,  hNew,  t0,  y1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager(manager,  hNew,  t0,  y1);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager(manager,  hNew,  t0,  y1);	  loop    =    new    CombinedEventsManager(manager,    t0,    y1,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
204	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  y1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  y1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0  +  stepStart,  y1);	  hNew    =    Math.max(hNew,    t0    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
205	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  p);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart,  p);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t0  +  stepStart,  p);	  hNew    =    Math.max(hNew,    t0    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
206	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t  -  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  t  -  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  t  -  stepStart);	  hNew    =    Math.min(hNew,    dt    -    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
207	[BUG]  [BUGGY]  if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  hNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
208	[BUG]  [BUGGY]  if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  hNew,  hNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  hNew,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  hNew,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
209	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  /  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  /  1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  /  1);	  hNew    =    Math.max(hNew,    dt    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
210	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart,  0);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  +  stepStart,  0);	  hNew    =    Math.max(hNew,    dt    +    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
211	[BUG]  [BUGGY]  if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
212	[BUG]  [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(y)  <  =  Math.abs(y))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
213	[BUG]  [BUGGY]  if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	if(Math.abs(loop)  <  =  Math.abs(loop))  {  loop  =  false;  }  else  {  System.arraycopy(y0,  0,  y0,  hNew,  0,  hNew);  hNew  =  hNew;  }	  loop    =    false;    }    else    if(hNew    >    0)    {    System.arraycopy(y0,    y0,    hNew,    0,    hNew);    hNew    =    hNew;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
214	[BUG]  [BUGGY]  loop  =  hNew  &  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  hNew  &  1;  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  hNew  &  1;	  loop    =    hNew    <    <    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
215	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(y0,  t0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEquationsManager().doubleValue(y0,  t0,  hNew);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEquationsManager().doubleValue(y0,  t0,  hNew);	  loop    =    new    CombinedEquationsManager().doubleValue(t0,    y0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
216	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  /  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  dt  /  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  dt  /  stepStart);	  hNew    =    Math.max(hNew,    dt    -    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
217	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t  -  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t  -  stepStart);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t  -  stepStart);	  hNew    =    Math.max(hNew,    dt    -    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
218	[BUG]  [BUGGY]  loop  =  Math.max(hNew,  len);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  Math.max(hNew,  len);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  Math.max(hNew,  len);	  loop    =    Math.max(len,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
219	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t1);	  hNew    =    Math.max(t0,    hNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
220	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t)-  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  t)-  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  t)-  1;	  hNew    =    Math.max(hNew,    hNew)-    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
221	[BUG]  [BUGGY]  hNew  =  hNew  /  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  hNew  /  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  hNew  /  1;	  hNew    =    hNew    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
222	[BUG]  [BUGGY]  loop  =  new  CombinedEventsManager.Integrator(a);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  loop  =  new  CombinedEventsManager.Integrator(a);  [BUGGY]      }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	loop  =  new  CombinedEventsManager.Integrator(a);	  loop    =    new    CombinedEventsManager.Integrator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
223	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t0,  t1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  t0,  t1);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  t0,  t1);	  hNew    =    Math.min(hNew,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
224	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.max(hNew,  error);  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.max(hNew,  error);	  hNew    =    Math.max(hNew,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
225	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  hNew.length)-  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {  loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {        [BUGGY]  hNew  =  Math.min(hNew,  hNew.length)-  1;  [BUGGY]      loop  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	300	300	1	replace	hNew  =  Math.min(hNew,  hNew.length)-  1;	  hNew    =    Math.min(hNew,    hNew.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
