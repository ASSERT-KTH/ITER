bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  nextStep  =  hNew  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  hNew  +  stepStart;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  hNew  +  stepStart;	  final    double    nextStep    =    stepStart    +    hNew;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
2	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  +  hNew  +  factor;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepStart  +  hNew  +  factor;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  +  hNew  +  factor;	  final    double    nextStep    =    stepStart    +    hNew;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
3	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  +  factor;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepStart  +  factor;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  +  factor;	  final    double    nextStep    =    stepStart    +    hNew;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
4	[BUG]  [BUGGY]  final  double  nextStep  =  lastStep  +  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  lastStep  +  hNew;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  lastStep  +  hNew;	  final    double    nextStep    =    stepStart    +    hNew;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
5	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(hNew,  safety  *  Math.pow(exp)));  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(hNew,  safety  *  Math.pow(exp)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepSize,  Math.max(hNew,  safety  *  Math.pow(exp)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
6	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
7	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(hNew,  exp)));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(hNew,  exp)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(hNew,  exp)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
8	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  hNew  *  Math.pow(exp)));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  hNew  *  Math.pow(exp)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  hNew  *  Math.pow(exp)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
9	[BUG]  [BUGGY]  final  double  nextStep  =  minReduction  *  stepSize;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  minReduction  *  stepSize;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  minReduction  *  stepSize;	  final    double    nextStep    =    minReduction    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
10	[BUG]  [BUGGY]  final  double  nextStep  =  minReduction  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  minReduction  +  stepStart;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  minReduction  +  stepStart;	  final    double    nextStep    =    minReduction    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
11	[BUG]  [BUGGY]  final  double  nextStep  =  stepSize  +  minReduction;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepSize  +  minReduction;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepSize  +  minReduction;	  final    double    nextStep    =    minReduction    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
12	[BUG]  [BUGGY]  final  double  nextStep  =  hNew  /  stepSize;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  hNew  /  stepSize;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  hNew  /  stepSize;	  final    double    nextStep    =    stepStart    /    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
13	[BUG]  [BUGGY]  final  double  nextStep  =  stepSize  /  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepSize  /  stepStart;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepSize  /  stepStart;	  final    double    nextStep    =    stepStart    /    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
14	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  /  factor;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepStart  /  factor;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  /  factor;	  final    double    nextStep    =    stepStart    /    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
15	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  *  stepSize;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepStart  *  stepSize;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  *  stepSize;	  final    double    nextStep    =    stepStart    /    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
16	[BUG]  [BUGGY]  final  double  nextStep  =  hNew  +  factor;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  hNew  +  factor;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  hNew  +  factor;	  final    double    nextStep    =    hNew    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
17	[BUG]  [BUGGY]  final  double  nextStep  =  hNew  *  stepSize;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  hNew  *  stepSize;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  hNew  *  stepSize;	  final    double    nextStep    =    hNew    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
18	[BUG]  [BUGGY]  final  double  nextStep  =  stepSize  +  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepSize  +  hNew;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepSize  +  hNew;	  final    double    nextStep    =    hNew    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
19	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  back,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  back,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  back,  false);	      hNew    =    filterStep(stepSize    *    hNew,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
20	[BUG]  [BUGGY]  hNew  =  filterStep(factor,  stepSize  *  hNew,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(factor,  stepSize  *  hNew,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(factor,  stepSize  *  hNew,  forward,  false);	      hNew    =    filterStep(stepSize    *    hNew,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
21	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  error,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  error,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  error,  forward,  false);	      hNew    =    filterStep(hNew,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
22	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  error,  exp,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  error,  exp,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  error,  exp,  false);	      hNew    =    filterStep(hNew,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
23	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  error,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  error,  true);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  error,  true);	      hNew    =    filterStep(hNew,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
24	[BUG]  [BUGGY]  hNew  =  filterStep(error,  hNew,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(error,  hNew,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(error,  hNew,  false);	      hNew    =    filterStep(hNew,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
25	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
26	[BUG]  [BUGGY]  hNew  =  filterStep(y0  *  stepSize,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(y0  *  stepSize,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(y0  *  stepSize,  forward,  false);	      hNew    =    filterStep(stepSize    *    y,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
27	[BUG]  [BUGGY]  hNew  =  filterStep(t0  *  y,  stepSize,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(t0  *  y,  stepSize,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(t0  *  y,  stepSize,  false);	      hNew    =    filterStep(stepSize    *    y,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
28	[BUG]  [BUGGY]  hNew  =  filterStep(t0  *  y,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(t0  *  y,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(t0  *  y,  forward,  false);	      hNew    =    filterStep(stepSize    *    y,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
29	[BUG]  [BUGGY]  final  double  nextStep  =  hNew  +  error;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  hNew  +  error;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  hNew  +  error;	  final    double    nextStep    =    stepStart    +    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
30	[BUG]  [BUGGY]  final  double  nextStep  =  error  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  error  +  stepStart;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  error  +  stepStart;	  final    double    nextStep    =    stepStart    +    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
31	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  +  error,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepStart  +  error,  hNew);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  +  error,  hNew);	  final    double    nextStep    =    stepStart    +    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
32	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(exp)));    hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
33	[BUG]  [BUGGY]  final  double  nextStep  =  stepSize  +  factor;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepSize  +  factor;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepSize  +  factor;	  final    double    nextStep    =    stepSize    +    stepStart;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
34	[BUG]  [BUGGY]  final  double  nextStep  =  stepSize  *  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepSize  *  stepStart;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepSize  *  stepStart;	  final    double    nextStep    =    stepSize    +    stepStart;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
35	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  Math.pow(error,  exp));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  Math.pow(error,  exp));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  Math.pow(error,  exp));	      hNew    =    filterStep(stepSize    *    Math.pow(exp));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
36	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  Math.pow(exp),  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  Math.pow(exp),  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  Math.pow(exp),  forward,  false);	      hNew    =    filterStep(stepSize    *    Math.pow(exp));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
37	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  Math.pow(exp),  forward);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  Math.pow(exp),  forward);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  Math.pow(exp),  forward);	      hNew    =    filterStep(stepSize    *    Math.pow(exp));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
38	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  forward,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  forward,  true);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  forward,  true);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
39	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize,  hNew,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize,  hNew,  false);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize,  hNew,  false);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
40	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  error,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  error,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  error,  forward,  false);	      hNew    =    filterStep(stepSize    *    factor,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
41	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  error,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  error,  true);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  error,  true);	      hNew    =    filterStep(stepSize    *    factor,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
42	[BUG]  [BUGGY]  hNew  =  filterStep(exp,  stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(exp,  stepSize  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(exp,  stepSize  *  factor,  forward,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
43	[BUG]  [BUGGY]  hNew  =  filterStep(factor  *  stepSize,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(factor  *  stepSize,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(factor  *  stepSize,  forward,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
44	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  input,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  input,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  input,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
45	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
46	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(exp,  hNew)));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(exp,  hNew)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(exp,  hNew)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
47	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(hNew,  safety  *  Math.pow(error,  exp)));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(hNew,  safety  *  Math.pow(error,  exp)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepSize,  Math.max(hNew,  safety  *  Math.pow(error,  exp)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
48	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  hNew  *  Math.pow(error,  exp)));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  hNew  *  Math.pow(error,  exp)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  hNew  *  Math.pow(error,  exp)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
49	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  minReduction,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  minReduction,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  maxGrowth  *  factor,  minReduction,  false);	      hNew    =    filterStep(hNew,    maxGrowth    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
50	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  input,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  input,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  maxGrowth  *  factor,  input,  false);	      hNew    =    filterStep(hNew,    maxGrowth    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
51	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  stepSize  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  stepSize  *  factor,  forward,  false);	      hNew    =    filterStep(hNew,    maxGrowth    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
52	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  true);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  maxGrowth  *  factor,  true);	      hNew    =    filterStep(hNew,    maxGrowth    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
53	[BUG]  [BUGGY]  final  double  nextStep  =  stepSize  +  maxGrowth;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepSize  +  maxGrowth;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepSize  +  maxGrowth;	  final    double    nextStep    =    maxGrowth    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
54	[BUG]  [BUGGY]  final  double  nextStep  =  maxGrowth  +  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  maxGrowth  +  hNew;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  maxGrowth  +  hNew;	  final    double    nextStep    =    maxGrowth    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  y0.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(yTmp,  0,  hNew,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  hNew.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  hNew.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(yTmp,  0,  y,  0,  hNew.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  ySize.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  ySize.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  ySize.length);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
59	[BUG]  [BUGGY]  hNew  =  filterStep(factor  *  hNew,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(factor  *  hNew,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(factor  *  hNew,  forward,  false);	      hNew    =    filterStep(stepSize    *    hNew,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
60	[BUG]  [BUGGY]  hNew  =  filterStep(fsal  *  hNew,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(fsal  *  hNew,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(fsal  *  hNew,  forward,  false);	      hNew    =    filterStep(stepSize    *    hNew,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
61	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  y0,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  y0,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  y0,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
62	[BUG]  [BUGGY]  hNew  =  filterStep(fsal  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(fsal  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(fsal  *  factor,  forward,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
63	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  error,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  error,  null);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  error,  null);	      hNew    =    filterStep(stepSize    *    factor,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  yTmp.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(y0,  0,  y,  0,  yTmp.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  y0.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(hNew,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(hNew,  0,  y0,  0,  y0.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(hNew,  0,  y0,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
67	[BUG]  [BUGGY]  final  double  nextStep  =  hNew  +  stepSize  +  factor;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  hNew  +  stepSize  +  factor;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  hNew  +  stepSize  +  factor;	  final    double    nextStep    =    hNew    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
68	[BUG]  [BUGGY]  hNew  =  filterStep(x0  *  y,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(x0  *  y,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(x0  *  y,  forward,  false);	      hNew    =    filterStep(stepSize    *    y,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
69	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  minGrowth,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  minGrowth,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  maxGrowth  *  factor,  minGrowth,  false);	      hNew    =    filterStep(hNew,    maxGrowth    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
70	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  factor  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  factor  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  factor  *  factor,  forward,  false);	      hNew    =    filterStep(hNew,    maxGrowth    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
71	[BUG]  [BUGGY]  final  double  nextStep  =  firstTime  +  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  firstTime  +  hNew;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  firstTime  +  hNew;	  final    double    nextStep    =    stepStart    +    hNew;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
72	[BUG]  [BUGGY]  final  double  nextStep  =  error  +  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  error  +  hNew;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  error  +  hNew;	  final    double    nextStep    =    stepStart    +    hNew;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
73	[BUG]  [BUGGY]  final  double  nextStep  =  errorStart  +  stepSize;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  errorStart  +  stepSize;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  errorStart  +  stepSize;	  final    double    nextStep    =    stepStart    +    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
74	[BUG]  [BUGGY]  final  double  nextStep  =  error  *  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  error  *  stepStart;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  error  *  stepStart;	  final    double    nextStep    =    stepStart    +    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
75	[BUG]  [BUGGY]  Integer  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  Integer  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	Integer  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(exp)));    hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
76	[BUG]  [BUGGY]  final  double  nextStep  =  minReduction  +  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  minReduction  +  hNew;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  minReduction  +  hNew;	  final    double    nextStep    =    minReduction    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
77	[BUG]  [BUGGY]  final  double  nextStep  =  minGrowth  +  stepSize;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  minGrowth  +  stepSize;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  minGrowth  +  stepSize;	  final    double    nextStep    =    minReduction    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
78	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  factor,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  factor,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  factor,  false);	      hNew    =    filterStep(hNew,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
79	[BUG]  [BUGGY]  int  stepSize  =  Math.min(relativeTolerance,  Math.max(hNew,  safety  *  Math.pow(error,  exp)));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(relativeTolerance,  Math.max(hNew,  safety  *  Math.pow(error,  exp)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(relativeTolerance,  Math.max(hNew,  safety  *  Math.pow(error,  exp)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  hNew);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(y0,  0,  y0,  0,  hNew);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(y0,  0,  y0,  0,  y0.length);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(y0,  y0,  hNew,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(y0,  y0,  hNew,  0,  y0.length);  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(y0,  y0,  hNew,  0,  y0.length);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
83	[BUG]  [BUGGY]  final  double  nextStep  =  maxGrowth  /  stepSize;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  maxGrowth  /  stepSize;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  maxGrowth  /  stepSize;	  final    double    nextStep    =    maxGrowth    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
84	[BUG]  [BUGGY]  int  stepSize  =  Math.min(reduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(reduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(reduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
85	[BUG]  [BUGGY]  Integer  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  Integer  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	Integer  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  yTmp.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(y0,  0,  y0,  0,  yTmp.length);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
88	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(hNew)));  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(hNew)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(hNew)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
89	[BUG]  [BUGGY]  hNew  =  filterStep(exp  *  Math.pow(stepSize));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(exp  *  Math.pow(stepSize));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(exp  *  Math.pow(stepSize));	      hNew    =    filterStep(stepSize    *    Math.pow(exp));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
90	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  y0,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  y0,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  maxGrowth  *  factor,  y0,  false);	      hNew    =    filterStep(hNew,    maxGrowth    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
91	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  null,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth  *  factor,  null,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  maxGrowth  *  factor,  null,  false);	      hNew    =    filterStep(hNew,    maxGrowth    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
92	[BUG]  [BUGGY]  if(hNew  >  maxGrowth)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  if(hNew  >  maxGrowth)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  }  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	if(hNew  >  maxGrowth)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
93	[BUG]  [BUGGY]  if(hNew  >  maxGrowth)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  for(int  k  =  0;  k  <  scalAbsoluteTolerance;  k++)  {  System.arra  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  if(hNew  >  maxGrowth)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  for(int  k  =  0;  k  <  scalAbsoluteTolerance;  k++)  {  System.arra  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	if(hNew  >  maxGrowth)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  for(int  k  =  0;  k  <  scalAbsoluteTolerance;  k++)  {  System.arra	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
94	[BUG]  [BUGGY]  if(hNew  >  maxGrowth)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  for(int  k  =  0;  k  <  scalAbsoluteTolerance;  k++)  {  System.arraycopy(y  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  if(hNew  >  maxGrowth)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  for(int  k  =  0;  k  <  scalAbsoluteTolerance;  k++)  {  System.arraycopy(y  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	if(hNew  >  maxGrowth)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  for(int  k  =  0;  k  <  scalAbsoluteTolerance;  k++)  {  System.arraycopy(y	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
95	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  forward,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  forward,  error,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  forward,  error,  false);	      hNew    =    filterStep(stepSize    *    factor,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
96	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  /  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepStart  /  hNew;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  /  hNew;	  final    double    nextStep    =    stepStart    +    hNew;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
97	[BUG]  [BUGGY]  int  stepSize  =  Math.min(maxGrowth,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(maxGrowth,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(maxGrowth,  Math.max(relativeTolerance,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
98	[BUG]  [BUGGY]  final  double  nextStep  =  stepStart  /  error;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  stepStart  /  error;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  stepStart  /  error;	  final    double    nextStep    =    stepStart    +    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
99	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  backward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  backward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  backward,  false);	      hNew    =    filterStep(stepSize    *    y,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y0.length);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	System.arraycopy(y0,  0,  y2,  0,  y0.length);	      System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
101	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(exp,  hNew)));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(exp,  hNew)));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepStart,  Math.max(relativeTolerance,  safety  *  Math.pow(exp,  hNew)));	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(error,    exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
102	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  stepStart,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  stepStart,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  stepStart,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
103	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  t0,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  factor,  t0,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  factor,  t0,  forward,  false);	      hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
104	[BUG]  [BUGGY]  int  stepSize  =  Math.min(maxGrowth,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(maxGrowth,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(maxGrowth,  Math.max(relativeTolerance,  safety  *  Math.pow(exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(exp)));    hNew    =    filterStep(stepSize    *    factor,    forward,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
105	[BUG]  [BUGGY]  final  double  nextStep  =  minGrowth  +  hNew;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  final  double  nextStep  =  minGrowth  +  hNew;  [BUGGY]    System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	final  double  nextStep  =  minGrowth  +  hNew;	  final    double    nextStep    =    maxGrowth    +    stepSize;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
106	[BUG]  [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth,  error,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(hNew,  maxGrowth,  error,  false);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(hNew,  maxGrowth,  error,  false);	      hNew    =    filterStep(hNew,    error,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
107	[BUG]  [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(exp),  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(exp),  hNew);  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	int  stepSize  =  Math.min(stepSize,  Math.max(relativeTolerance,  safety  *  Math.pow(exp),  hNew);	      int    stepSize    =    Math.min(stepSize,    Math.max(relativeTolerance,    safety    *    Math.pow(exp)));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
108	[BUG]  [BUGGY]  hNew  =  filterStep(stepSize  *  Math.pow(t0,  exp));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  double  factor  =  Math.min(maxGrowth,  Math.max(minReduction,  safety  *  Math.pow(error,  exp)));  hNew  =  filterStep(stepSize  *  factor,  forward,  false);  }  }      [BUGGY]  hNew  =  filterStep(stepSize  *  Math.pow(t0,  exp));  [BUGGY]    final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	314	314	1	replace	hNew  =  filterStep(stepSize  *  Math.pow(t0,  exp));	      hNew    =    filterStep(stepSize    *    Math.pow(exp));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
