projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*y,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y0,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=lastStep+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(hNew,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(hNew,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+minReduction;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize/stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor,stepSize*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,exp,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(error,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0*stepSize,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*y,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*y,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+error,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize*stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(error,exp));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp,stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor*stepSize,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,input,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(hNew,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,minReduction,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,input,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+maxGrowth;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,yTmp,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,hNew,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y0,0,ySize.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(fsal*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,y0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(fsal*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y,0,yTmp.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,ytmp,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(hNew,0,y0,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepSize+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(x0*y,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,minGrowth,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=firstTime+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=errorStart+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error*stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(hNew,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,0,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,y0,hNew,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,0,yTmp.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y1,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp*Math.pow(stepSize));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,y0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,null,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,y0.length);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,y0.length);for(intk=0;k<scalAbsoluteTolerance;k++){System.arra
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,y0.length);for(intk=0;k<scalAbsoluteTolerance;k++){System.arraycopy(y
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(maxGrowth,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,backward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y2,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,stepStart,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,t0,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(maxGrowth,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp),hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(t0,exp));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,hNew,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error/stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew/error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error.length/stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(minReduction,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(hNew,Math.max(relativeTolerance,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,yNew,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,exp,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp,error,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,factor,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error*hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew*stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart*error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error*factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor*stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize*factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize*hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart*hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,back,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(back,stepSize*factor,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(back*factor,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(hNew,0,yTmp,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y0,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yNew,0,y,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+firstTime;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=firstTime+hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=firstTime/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=firstTime+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew/factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor/stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/factor,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/factor,hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew/Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,hNew*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize*minReduction;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction*hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,nextStep,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,minGrowth,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+factor,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=lastStep+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+factor,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y,0,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y1,0,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,0,hNew,factor);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y2,0,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,y0,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0,maxGrowth*factor,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,y0,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,input,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,input,maxGrowth,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(input,maxGrowth*factor,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y0,0,yTmp.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y,0,yTmp.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,hNew,0,yTmp.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+minReduction;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth+minReduction;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew/Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,hNew*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*stepSize,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor,stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor,stepSize*factor,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(x0*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew/stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew.length/stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+errorStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=errorStart+stepSize,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,transient,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,input,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,true,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+minGrowth;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth+hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth*hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,y0.length);for(intk=0;k<scalAbsoluteTolerance;k++){System.
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,y0.length);for(intk=0;k<scalAbsoluteTolerance;k++){System
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepStart+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor+stepStart+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepStart+stepSize,factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+factor+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(hNew,Math.max(relativeTolerance,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize,factor,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize,hNew,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew*factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+factor,hSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,reverse,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(fsal*factor,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(fsal*factor,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+minReduction;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction*stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+stepStart,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp,error)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety/Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+stepStart,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+stepStart,hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0*factor,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y,0,ySize.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,hNew,0,ySize.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(ySize,0,y0,0,ySize.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yFields,0,y0,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(hNew,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(hNew,safety/Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(hNew,safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,Math.max(hNew,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(hNew,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*factor,stepSize,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,t0,y,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,y0,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,t0,stepStart,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize/maxGrowth;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,exp,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,stepStart,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,input,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,exp,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(hNew,safety*Math.pow(relativeTolerance)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(hNew,y)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,stepStart,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yNew,0,hNew,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize/factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepStart,error);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepStart,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0*x0,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(x0*factor,y,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0,stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(xTmp,stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp,factor*stepSize,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp,stepSize*factor,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,input,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth,error,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,maxGrowth,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth,error,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth,exp,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,nextIsLast,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(hNew,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(input*stepSize,input,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+lastStep;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=lastStep+hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,y0.length);for(intk=0;k<scalAbsol
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew*error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor*factor,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+maxGrowth;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth+hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,Math.max(hNew,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(requires,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(priority*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(hNew,safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp,t0));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(t0,stepStart));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,error,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor,stepSize*factor,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor,stepSize*factor,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,null,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp),hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(error,exp),hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp),hNew,factor);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(error,exp)),hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,error,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,forward,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(hNew,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(error,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp*Math.pow(stepStart));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp*Math.pow(stepStart,stepSize));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp*Math.pow(stepSize,error));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,minReduction,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+maxGrowth;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize*maxGrowth;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp,error)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety/Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(error,hNew,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*factor,y,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*factor,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*y,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0*t0,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(hNew,error)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(hNew,hSize)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(error,exp,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(error,maxGrowth,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(error,stepStart));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp,error));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),next,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y1,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,y0,t,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,y0,yTmp,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,y1,hNew,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(exp,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,safety*Math.pow(exp)),hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,backward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(backward*factor,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor*factor,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor+stepSize+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+factor+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepSize*factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),stepStart,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),input,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*factor,y,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0*t0,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*factor,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,nextStep,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(hNew,k)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepStart+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor+hNew+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,manager,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(x0,stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp,factor*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,error,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*factor,y0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(error,exp),forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(error*Math.pow(stepSize,exp));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0*t,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(maxGrowth,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,hNew*Math.pow(exp,safety)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp,factor)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,input*factor,maxGrowth,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp)+1,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(error,maxGrowth,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(error,factor,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(error,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,yTmp,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+stepSize,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+factor,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+hNew,stepStart);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(t0,0,y0,0,t.length);System.arraycopy(yTmp,0,y0,0,hNew.length);for(intk=0;k<scalAbsoluteTolerance;k++){System.
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(t0,0,y0,0,t.length);System.arraycopy(yTmp,0,y0,0,hNew.length);for(intk=0;k<scalAbsol
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(t0,0,y0,0,t.length);System.arraycopy(yTmp,0,y0,0,hNew.length);for(intk=0;k<scalAbsoluteTolerance;k++){System
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(t0,0,y0,0,t.length);System.arraycopy(yTmp,0,y0,0,hNew.length);for(intk=0;k<scalAbsoluteTole
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0*t,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=t0+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=y0+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp)),hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew*fsal,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=inputSize+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,error,exp,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,input,exp,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,Math.max(safeTolerance,factor*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,Math.max(safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,nextStep,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=inputSize/factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=value/factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor*stepSize,error,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,input,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(steps,Math.max(relativeTolerance,safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew*Math.pow(exp,safety)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(t0,0,y0,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*factor,stepStart,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor*stepSize,stepStart,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(hNew,hNew*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,factor*Math.pow(hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,hNew,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*stepSize,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth,factor,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,null,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*stepSize,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(x0*stepSize,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(reduction,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(reduction,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew*safety*Math.pow(hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(hNew,safety*Math.pow(hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,ytmp,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=inputSize*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(reduction,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=errorStart/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=errorStart+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,Math.max(safeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(minReduction,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,Math.max(safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=firstStep+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart*factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth+error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=inputSize/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth/factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=factor/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y1,0,yTmp.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)),hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp)),hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew*Math.pow(exp),safety);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,input,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y2,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor,error*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,yTmp,0,ySize.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,0,hNew,t0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(fsal*factor,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(value*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,yTmp,0,yTmp.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,input,null,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(reduction,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(maxGrowth,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(stepStart,Math.max(reduction,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(lastStep,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+fact;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp*Math.pow(maxGrowth));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp*Math.pow(y0));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(stepStart,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(level,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(level,safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y,0,hNew.length-1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(requiresReduction,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,exp,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,stepSize,exp,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize,hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew*maxGrowth;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y,0,y0,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp,factor)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(t0,error));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(w*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth,input,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,nextIsLast,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp),hNew,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,t0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,y0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew.stepStart/stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(ySize,0,y,0,ySize.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp*Math.cos(stepSize));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp*Math.pow(10,stepSize));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,advance,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=firstTime+error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,hNew.length);for(intk=0;k<scalAbsoluteTolerance;k++){System.
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,hNew.length);for(intk=0;k<scalAbsol
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,out,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(exp,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,stepSize*factor,t0,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,stepSize*factor,y0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,stepSize*factor,input,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(lastGrowth,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,input,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+factor,t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,safety*Math.pow(exp,error)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.max(reduction,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=inputSize+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+factor*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,factor*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety/Math.pow(hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(hNew,hSize)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth,factor,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety/Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth+hNew+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,factor*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew/factor*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew-factor*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=inputStart+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp)/2,forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp,hSize)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minStep+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(hNew,factor)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(reduction,safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety/Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(requires,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(priority*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(requiresReduction,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,t0,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,input,t0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(lastGrowth,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,t0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxSize*factor,null,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,error,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,hNew.length);for(intk=0;k<scalAbsoluteTolerance;k++){System
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp,stepSize*factor,y0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp,stepSize*factor,t0,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(reduction,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y*t0,forward,false);
