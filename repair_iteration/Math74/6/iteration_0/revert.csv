projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*y,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y0,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth+stepSize;
