projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*y,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y0,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=lastStep+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(hNew,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(hNew,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew*Math.pow(exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+minReduction;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize/stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew*stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,back,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor,stepSize*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,exp,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,error,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(error,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(y0*stepSize,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*y,stepSize,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(t0*y,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart+error,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize*stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(error,exp));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(exp),forward);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize,hNew,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp,stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor*stepSize,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,input,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(hNew,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,hNew*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,minReduction,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,input,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,true);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepSize+maxGrowth;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,yTmp,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,hNew,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y,0,hNew.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(yTmp,0,y0,0,ySize.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(factor*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(fsal*hNew,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,y0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(fsal*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,error,null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y,0,yTmp.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,ytmp,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(hNew,0,y0,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=hNew+stepSize+factor;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(x0*y,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,minGrowth,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=firstTime+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=errorStart+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=error*stepStart;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minReduction+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth+stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,factor,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(relativeTolerance,Math.max(hNew,safety*Math.pow(error,exp)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,0,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,y0,hNew,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=maxGrowth/stepSize;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(reduction,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314IntegerstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y0,0,yTmp.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y1,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(exp*Math.pow(stepSize));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,y0,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth*factor,null,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,y0.length);}
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,y0.length);for(intk=0;k<scalAbsoluteTolerance;k++){System.arra
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314if(hNew>maxGrowth){System.arraycopy(y0,0,y0,0,y0.length);System.arraycopy(yTmp,0,y0,0,y0.length);for(intk=0;k<scalAbsoluteTolerance;k++){System.arraycopy(y
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,forward,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(maxGrowth,Math.max(relativeTolerance,safety*Math.pow(error,exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=stepStart/error;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,backward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314System.arraycopy(y0,0,y2,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepStart,Math.max(relativeTolerance,safety*Math.pow(exp,hNew)));
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,stepStart,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*factor,t0,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(maxGrowth,Math.max(relativeTolerance,safety*Math.pow(exp)));hNew=filterStep(stepSize*factor,forward,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314finaldoublenextStep=minGrowth+hNew;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(hNew,maxGrowth,error,false);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314intstepSize=Math.min(stepSize,Math.max(relativeTolerance,safety*Math.pow(exp),hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java314hNew=filterStep(stepSize*Math.pow(t0,exp));
