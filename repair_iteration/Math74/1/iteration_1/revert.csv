projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[y0.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[vecAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[y0.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scaleAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalaAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,firstTime);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getOrder();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=scalAbsoluteTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,scalRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalaAbsoluteTolerance.length+1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalaAbsoluteTolerance.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scala.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scaleTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(t0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale()*scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length+1]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length],scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0,t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()*scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()+2;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=scalAbsoluteTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.cloneTree();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getIsLast();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getOrder()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length+1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,firstTime);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scale,firstTime);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getSlope();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale(y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.getScales();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=scalAbsoluteTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[y.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length+1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[vecAbsoluteTolerance.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalAbsoluteTolerance.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalableAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,vecRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scalaAbsoluteTolerance.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getRelativeTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getRelativeTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getReal();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,scaleAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getTick();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scaleAbsoluteTolerance.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scala.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,yTmp);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,vecRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateParentPointer();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,vecAbsoluteTolerance,scalAbsoluteTolerance);
