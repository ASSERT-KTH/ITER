projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[y0.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[vecAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[y0.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scaleAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalaAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,firstTime);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getOrder();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=scalAbsoluteTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,scalRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalaAbsoluteTolerance.length+1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalaAbsoluteTolerance.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scala.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scaleTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(t0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale()*scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length+1]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length],scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0,t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()*scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()+2;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=scalAbsoluteTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.cloneTree();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getIsLast();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getOrder()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length+1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,firstTime);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scale,firstTime);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getSlope();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale(y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.getScales();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=scalAbsoluteTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[y.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length+1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[vecAbsoluteTolerance.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalAbsoluteTolerance.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalableAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,vecRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scalaAbsoluteTolerance.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getRelativeTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(null);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getRelativeTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getReal();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,scaleAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getTick();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scaleAbsoluteTolerance.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scala.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,yTmp);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,vecRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateParentPointer();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,vecAbsoluteTolerance,scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0,t);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0,tmp);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale,yTmp);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0,t0,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray(newdouble[scala.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.toArray(newdouble[scala.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scala.length-1]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getSlope()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getSlope(y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getSlope()*scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,hNew);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,hNew,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scala.length+1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scala.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scala.length*2];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scala.length+2];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.getScales();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getOtherOrder();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getOrder().length;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale().length;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247DoublescalAbsoluteTolerance=getOrder().doubleValue();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateScale()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateScale(t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateScale(t0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length+2];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length/1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length+3];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length-2];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length/1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.toArray(newdouble[y0.length],scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scale.length],scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length],scalRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length],y);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length-2];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length+2];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length+3];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scale,vecRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0,scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y1,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale,y0,t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0.length,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,y0,scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,y0,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(b,scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getIsLast()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getIsFirst();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getIsLast()*scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalAbsoluteTolerance.length-2];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray(newdouble[scalaAbsoluteTolerance.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.toArray(newdouble[scalaAbsoluteTolerance.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()/scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()*scale+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()*scale,y0.length;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray(newdouble[scale.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length+1]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=scalAbsoluteTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Double[][]scale=vecAbsoluteTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,vecAbsoluteTolerance.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.cloneTree();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.clone();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=scalAbsoluteTolerance.cloneTree();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getTick()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getTick().length;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale()*scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalarAbsoluteTolerance.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scale,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scale,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scale,scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale,t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.toArray(scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray(scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(scale,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.getScales();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=scalAbsoluteTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecRelativeTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(t0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scale,scalaAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scale,scalaAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scala,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getMean();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,scale,scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,scale,vAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,scaleAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(y0,scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScaleRelativeTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getRelativeTolerance(y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getRelativeTolerance()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalAbsoluteTolerance.length+1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=scalAbsoluteTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecRelativeTolerance.toArray();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Double[][]scale=vecAbsoluteTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(scale.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(t0.length,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[y.length-2];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[y.length];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateParentPointer().length;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateParentPointer()+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediatePosition();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScaleRelativeTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getDerivativeTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scale,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scala,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length+2]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecRelativeTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.toArray(newdouble[scaleAbsoluteTolerance.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.toArray(newdouble[scaleAbsoluteTolerance.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0.length,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0.length-1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0,t0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scaleAbsoluteTolerance.length-1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(b,y0,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(variables,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale()/scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale()*scale+1;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale()*scale,y0.length;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale(t0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale(y0.length-1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale(scale.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale(y0.length+1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalaAbsoluteTolerance.length+2];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scale,0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scalaAbsoluteTolerance,0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,y0AbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecRelativeTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,2);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getRelativeTolerance(y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getRelativeTolerance(y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getSale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scale.length*1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=y0.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale,1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(t0,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(scale,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateScale(t0,y);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getTick();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[vecAbsoluteTolerance.length/1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0,yTmp);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0,t1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,scale.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getRelativeTolerance(y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[vecAbsoluteTolerance.length+1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalaAbsoluteTolerance.length*1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[y.length-1]+scalAbsoluteTolerance;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecRelativeTolerance.toArray(newdouble[y0.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(b,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,y0,scale,vecRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(t0,scale,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scalaAbsoluteTolerance.length+1]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(null,y0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale(null,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(vecAbsoluteTolerance,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getIsLast()+2;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[t0.length*1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getSlopeRelativeTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()*scale+2;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length],yRelativeTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale(scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=y0.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,firstTime,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(scale,scalAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(y0.length-1);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getSlope();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScale()+scale;
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length+3]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(values);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,vAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,y0.length,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(y0.length,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getVisibleTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getTickSize();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getScaleAbsoluteTolerance();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=getSlope();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=calculateScaleAbsoluteTolerance(scale,0,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScale(scale,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scala.length+1]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getOrder().doubleValue()*scale,y0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.doubleValue();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getIsInverted();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=createImmediateScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247y0=getImmediateScalePointer();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.min(y0.length,scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=scalAbsoluteTolerance.toArray(scale);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247finaldouble[][]scale=vecAbsoluteTolerance.cloneTree();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.abs(scale,vecAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vAbsoluteTolerance.getValues();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length],t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[y0.length],a);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(scalaAbsoluteTolerance,t0);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scalAbsoluteTolerance=Math.max(y0,scalaAbsoluteTolerance);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247scale=newdouble[scalaAbsoluteTolerance.length/1];
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247Arrays.fill(scale,t0.length);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vecAbsoluteTolerance.toArray(newdouble[scalaVerticalTolerance.length]);
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247double[][]scale=vAbsoluteTolerance.getScale();
projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java247doublescalAbsoluteTolerance=getScaleAbsoluteTolerance();
