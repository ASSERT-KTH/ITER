bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    yTmp);    	non-compiled	[CE]  while  expected	71	None	replace
2	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  tmp);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  tmp);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  tmp);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    yTmp);    	non-compiled	[CE]  while  expected	71	None	replace
3	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  yTmp);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  yTmp);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  yTmp);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    yTmp);    	non-compiled	[CE]  while  expected	71	None	replace
4	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t0,  scale);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t0,  scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t0,  scale);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    t0);    	non-compiled	[CE]  while  expected	17	None	replace
5	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    t0);    	non-compiled	[CE]  while  expected	17	None	replace
6	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  scale);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    t0);    	non-compiled	[CE]  while  expected	17	None	replace
7	[BUG]  [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scala.length]);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scala.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scala.length]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scala.length]);    	non-compiled	[CE]  while  expected	69	None	replace
8	[BUG]  [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[scala.length]);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[scala.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecRelativeTolerance.toArray(new  double[scala.length]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scala.length]);    	non-compiled	[CE]  while  expected	69	None	replace
9	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scala.length  -  1]);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scala.length  -  1]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scala.length  -  1]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scala.length]);    	non-compiled	[CE]  while  expected	69	None	replace
10	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getSlope()  +  1;  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getSlope()  +  1;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getSlope()  +  1;	  double    scalAbsoluteTolerance    =    getSlope();    	non-compiled	[CE]  while  expected	42	None	replace
11	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getSlope(y0.length);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getSlope(y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getSlope(y0.length);	  double    scalAbsoluteTolerance    =    getSlope();    	non-compiled	[CE]  while  expected	42	None	replace
12	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getSlope()  *  scale;  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getSlope()  *  scale;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getSlope()  *  scale;	  double    scalAbsoluteTolerance    =    getSlope();    	non-compiled	[CE]  while  expected	42	None	replace
13	[BUG]  [BUGGY]  Arrays.fill(y0,  hNew);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(y0,  hNew);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(y0,  hNew);	  Arrays.fill(scale,    hNew);    	non-compiled	[CE]  while  expected	62	None	replace
14	[BUG]  [BUGGY]  Arrays.fill(scale,  hNew,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  hNew,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  hNew,  vecAbsoluteTolerance);	  Arrays.fill(scale,    hNew);    	non-compiled	[CE]  while  expected	62	None	replace
15	[BUG]  [BUGGY]  scale  =  new  double[scala.length  +  1];  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scala.length  +  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scala.length  +  1];	  scale    =    new    double[scala.length];    	non-compiled	[CE]  while  expected	9	None	replace
16	[BUG]  [BUGGY]  scale  =  new  double[scala.length  -  1];  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scala.length  -  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scala.length  -  1];	  scale    =    new    double[scala.length];    	non-compiled	[CE]  while  expected	9	None	replace
17	[BUG]  [BUGGY]  scale  =  new  double[scala.length  *  2];  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scala.length  *  2];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scala.length  *  2];	  scale    =    new    double[scala.length];    	non-compiled	[CE]  while  expected	9	None	replace
18	[BUG]  [BUGGY]  scale  =  new  double[scala.length  +  2];  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scala.length  +  2];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scala.length  +  2];	  scale    =    new    double[scala.length];    	non-compiled	[CE]  while  expected	9	None	replace
19	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0.length);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(scale);    	non-compiled	[CE]  while  expected	30	None	replace
20	[BUG]  [BUGGY]  double[][]  scale  =  vecRelativeTolerance.getScales();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecRelativeTolerance.getScales();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecRelativeTolerance.getScales();	  double[][]    scale    =    vecAbsoluteTolerance.getScales();    	non-compiled	[CE]  while  expected	44	None	replace
21	[BUG]  [BUGGY]  y0  =  getOtherOrder();  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getOtherOrder();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getOtherOrder();	  y0    =    getOrder()    +    1;    	non-compiled	[CE]  while  expected	28	None	replace
22	[BUG]  [BUGGY]  y0  =  getOrder().length;  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getOrder().length;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getOrder().length;	  y0    =    getOrder()    +    1;    	non-compiled	[CE]  while  expected	28	None	replace
23	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale().length;  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale().length;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale().length;	  scalAbsoluteTolerance    =    getScale()    +    1;    	non-compiled	[CE]  while  expected	11	None	replace
24	[BUG]  [BUGGY]  Double  scalAbsoluteTolerance  =  getOrder().doubleValue();  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Double  scalAbsoluteTolerance  =  getOrder().doubleValue();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Double  scalAbsoluteTolerance  =  getOrder().doubleValue();	  double    scalAbsoluteTolerance    =    getOrder().doubleValue()    +    1;    	non-compiled	[CE]  while  expected	21	None	replace
25	[BUG]  [BUGGY]  y0  =  getImmediateScale()  +  1;  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getImmediateScale()  +  1;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getImmediateScale()  +  1;	  y0    =    getImmediateScale();    	non-compiled	[CE]  while  expected	29	None	replace
26	[BUG]  [BUGGY]  y0  =  getImmediateScale(t0);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getImmediateScale(t0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getImmediateScale(t0);	  y0    =    getImmediateScale();    	non-compiled	[CE]  while  expected	29	None	replace
27	[BUG]  [BUGGY]  y0  =  getImmediateScale(t0.length);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getImmediateScale(t0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getImmediateScale(t0.length);	  y0    =    getImmediateScale();    	non-compiled	[CE]  while  expected	29	None	replace
28	[BUG]  [BUGGY]  scale  =  new  double[t0.length  +  2];  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[t0.length  +  2];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[t0.length  +  2];	  scale    =    new    double[t0.length    +    1];    	non-compiled	[CE]  while  expected	49	None	replace
29	[BUG]  [BUGGY]  scale  =  new  double[t0.length  /  1];  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[t0.length  /  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[t0.length  /  1];	  scale    =    new    double[t0.length    +    1];    	non-compiled	[CE]  while  expected	49	None	replace
30	[BUG]  [BUGGY]  scale  =  new  double[t0.length  +  3];  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[t0.length  +  3];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[t0.length  +  3];	  scale    =    new    double[t0.length    +    1];    	non-compiled	[CE]  while  expected	49	None	replace
31	[BUG]  [BUGGY]  scale  =  new  double[scale.length  -  2];  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scale.length  -  2];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scale.length  -  2];	  scale    =    new    double[scale.length    -    1];    	non-compiled	[CE]  while  expected	35	None	replace
32	[BUG]  [BUGGY]  scale  =  new  double[scale.length  /  1];  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scale.length  /  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scale.length  /  1];	  scale    =    new    double[scale.length    -    1];    	non-compiled	[CE]  while  expected	35	None	replace
33	[BUG]  [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[y0.length],  scalAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[y0.length],  scalAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecRelativeTolerance.toArray(new  double[y0.length],  scalAbsoluteTolerance);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length],    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	16	None	replace
34	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scale.length],  scalAbsoluteTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scale.length],  scalAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scale.length],  scalAbsoluteTolerance);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length],    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	16	None	replace
35	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  scalRelativeTolerance);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  scalRelativeTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  scalRelativeTolerance);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length],    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	16	None	replace
36	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  y);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  y);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  y);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length],    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	16	None	replace
37	[BUG]  [BUGGY]  scale  =  new  double[t0.length  -  2];  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[t0.length  -  2];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[t0.length  -  2];	  scale    =    new    double[t0.length    -    1];    	non-compiled	[CE]  while  expected	48	None	replace
38	[BUG]  [BUGGY]  scale  =  new  double[scale.length  +  2];  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scale.length  +  2];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scale.length  +  2];	  scale    =    new    double[scale.length    +    1];    	non-compiled	[CE]  while  expected	36	None	replace
39	[BUG]  [BUGGY]  scale  =  new  double[scale.length  +  3];  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scale.length  +  3];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scale.length  +  3];	  scale    =    new    double[scale.length    +    1];    	non-compiled	[CE]  while  expected	36	None	replace
40	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    vecRelativeTolerance);    	non-compiled	[CE]  while  expected	75	None	replace
41	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  vecRelativeTolerance);  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  vecRelativeTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  vecRelativeTolerance);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    vecRelativeTolerance);    	non-compiled	[CE]  while  expected	75	None	replace
42	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	18	None	replace
43	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y1,  scale);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y1,  scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y1,  scale);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	18	None	replace
44	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0,  t0);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0,  t0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  y0,  t0);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	18	None	replace
45	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale.length);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0.length);    	non-compiled	[CE]  while  expected	32	None	replace
46	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0.length);  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0.length);    	non-compiled	[CE]  while  expected	32	None	replace
47	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0.length,  scale);  [CE]  while  expected  [FE]                            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0.length,  scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0.length,  scale);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0.length);    	non-compiled	[CE]  while  expected	32	None	replace
48	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  y0.length);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  y0.length);	  scalAbsoluteTolerance    =    Math.min(scalaAbsoluteTolerance,    firstTime);    	non-compiled	[CE]  while  expected	38	None	replace
49	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  y0);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  y0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  y0);	  scalAbsoluteTolerance    =    Math.min(scalaAbsoluteTolerance,    firstTime);    	non-compiled	[CE]  while  expected	38	None	replace
50	[BUG]  [BUGGY]  Arrays.fill(y0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(y0,  scale,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(y0,  scale,  vecAbsoluteTolerance);	  Arrays.fill(scale,    vecAbsoluteTolerance,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	77	None	replace
51	[BUG]  [BUGGY]  Arrays.fill(scale,  y0,  scalAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  y0,  scalAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  y0,  scalAbsoluteTolerance);	  Arrays.fill(scale,    vecAbsoluteTolerance,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	77	None	replace
52	[BUG]  [BUGGY]  Arrays.fill(scale,  y0,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  y0,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  y0,  vecAbsoluteTolerance);	  Arrays.fill(scale,    vecAbsoluteTolerance,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	77	None	replace
53	[BUG]  [BUGGY]  Arrays.fill(b,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(b,  scale,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(b,  scale,  vecAbsoluteTolerance);	  Arrays.fill(scale,    vecAbsoluteTolerance,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	77	None	replace
54	[BUG]  [BUGGY]  y0  =  getIsLast()  +  1;  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getIsLast()  +  1;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getIsLast()  +  1;	  y0    =    getIsLast();    	non-compiled	[CE]  while  expected	27	None	replace
55	[BUG]  [BUGGY]  y0  =  getIsFirst();  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getIsFirst();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getIsFirst();	  y0    =    getIsLast();    	non-compiled	[CE]  while  expected	27	None	replace
56	[BUG]  [BUGGY]  y0  =  getIsLast()  *  scale;  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getIsLast()  *  scale;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getIsLast()  *  scale;	  y0    =    getIsLast();    	non-compiled	[CE]  while  expected	27	None	replace
57	[BUG]  [BUGGY]  scale  =  new  double[scalAbsoluteTolerance.length  -  2];  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scalAbsoluteTolerance.length  -  2];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scalAbsoluteTolerance.length  -  2];	  scale    =    new    double[scalAbsoluteTolerance.length    -    1];    	non-compiled	[CE]  while  expected	51	None	replace
58	[BUG]  [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scalaAbsoluteTolerance.length]);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scalaAbsoluteTolerance.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scalaAbsoluteTolerance.length]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scalaAbsoluteTolerance.length]);    	non-compiled	[CE]  while  expected	58	None	replace
59	[BUG]  [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[scalaAbsoluteTolerance.length]);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[scalaAbsoluteTolerance.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecRelativeTolerance.toArray(new  double[scalaAbsoluteTolerance.length]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scalaAbsoluteTolerance.length]);    	non-compiled	[CE]  while  expected	58	None	replace
60	[BUG]  [BUGGY]  [][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  [][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scalaAbsoluteTolerance.length]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
61	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  /  scale;  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  /  scale;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getOrder().doubleValue()  /  scale;	  double    scalAbsoluteTolerance    =    getOrder().doubleValue()    *    scale;    	non-compiled	[CE]  while  expected	22	None	replace
62	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale  +  1;  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale  +  1;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale  +  1;	  double    scalAbsoluteTolerance    =    getOrder().doubleValue()    *    scale;    	non-compiled	[CE]  while  expected	22	None	replace
63	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale,  y0.length;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale,  y0.length;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale,  y0.length;	  double    scalAbsoluteTolerance    =    getOrder().doubleValue()    *    scale;    	non-compiled	[CE]  ';'  expected	22	None	replace
64	[BUG]  [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scale.length]);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scale.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scale.length]);	  final    double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length]);    	non-compiled	[CE]  while  expected	15	None	replace
65	[BUG]  [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length  +  1]);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length  +  1]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length  +  1]);	  final    double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length]);    	non-compiled	[CE]  while  expected	15	None	replace
66	[BUG]  [BUGGY]  final  double[][]  scale  =  scalAbsoluteTolerance.getScale();  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  scalAbsoluteTolerance.getScale();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  scalAbsoluteTolerance.getScale();	  double[][]    scale    =    scalAbsoluteTolerance.getScale();    	non-compiled	[CE]  while  expected	24	None	replace
67	[BUG]  [BUGGY]  Double[][]  scale  =  vecAbsoluteTolerance.getScale();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Double[][]  scale  =  vecAbsoluteTolerance.getScale();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Double[][]  scale  =  vecAbsoluteTolerance.getScale();	  double[][]    scale    =    scalAbsoluteTolerance.getScale();    	non-compiled	[CE]  while  expected	24	None	replace
68	[BUG]  [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  vecAbsoluteTolerance.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  vecAbsoluteTolerance.length);	  Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	33	None	replace
69	[BUG]  [BUGGY]  double[][]  scale  =  vecRelativeTolerance.cloneTree();  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecRelativeTolerance.cloneTree();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecRelativeTolerance.cloneTree();	  double[][]    scale    =    vecAbsoluteTolerance.cloneTree();    	non-compiled	[CE]  while  expected	26	None	replace
70	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.clone();  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.clone();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.clone();	  double[][]    scale    =    vecAbsoluteTolerance.cloneTree();    	non-compiled	[CE]  while  expected	26	None	replace
71	[BUG]  [BUGGY]  double[][]  scale  =  scalAbsoluteTolerance.cloneTree();  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  scalAbsoluteTolerance.cloneTree();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  scalAbsoluteTolerance.cloneTree();	  double[][]    scale    =    vecAbsoluteTolerance.cloneTree();    	non-compiled	[CE]  while  expected	26	None	replace
72	[BUG]  [BUGGY]  y0  =  getTick()  +  1;  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getTick()  +  1;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getTick()  +  1;	  y0    =    getTick();    	non-compiled	[CE]  while  expected	67	None	replace
73	[BUG]  [BUGGY]  y0  =  getTick().length;  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getTick().length;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getTick().length;	  y0    =    getTick();    	non-compiled	[CE]  while  expected	67	None	replace
74	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale(y0.length);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale(y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale(y0.length);	  scalAbsoluteTolerance    =    getScale(null);    	non-compiled	[CE]  while  expected	60	None	replace
75	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale(y0);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale(y0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale(y0);	  scalAbsoluteTolerance    =    getScale(null);    	non-compiled	[CE]  while  expected	60	None	replace
76	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale(scale);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale(scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale(scale);	  scalAbsoluteTolerance    =    getScale(null);    	non-compiled	[CE]  while  expected	60	None	replace
77	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScale()  +  1;  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScale()  +  1;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScale()  +  1;	  double    scalAbsoluteTolerance    =    getScale();    	non-compiled	[CE]  while  expected	41	None	replace
78	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScale()  *  scale;  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScale()  *  scale;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScale()  *  scale;	  double    scalAbsoluteTolerance    =    getScale();    	non-compiled	[CE]  while  expected	41	None	replace
79	[BUG]  [BUGGY]  scale  =  new  double[scalarAbsoluteTolerance.length];  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scalarAbsoluteTolerance.length];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scalarAbsoluteTolerance.length];	  scale    =    new    double[scalableAbsoluteTolerance.length];    	non-compiled	[CE]  while  expected	53	None	replace
80	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  y0.length);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  y0.length);	  scalAbsoluteTolerance    =    Math.max(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	73	None	replace
81	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  y0);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  y0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  y0);	  scalAbsoluteTolerance    =    Math.max(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	73	None	replace
82	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalAbsoluteTolerance);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  scalAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	73	None	replace
83	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  t0);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(scale,    y0);    	non-compiled	[CE]  while  expected	20	None	replace
84	[BUG]  [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(scale);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecRelativeTolerance.toArray(scale);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(scale);    	non-compiled	[CE]  while  expected	1	None	replace
85	[BUG]  [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(scale);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecAbsoluteTolerance.toArray(scale);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(scale);    	non-compiled	[CE]  while  expected	1	None	replace
86	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(scale,  y0.length);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(scale,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(scale,  y0.length);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(scale);    	non-compiled	[CE]  while  expected	1	None	replace
87	[BUG]  [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.getScales();  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.getScales();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecAbsoluteTolerance.getScales();	  final    double[][]    scale    =    vecAbsoluteTolerance.getValues();    	non-compiled	[CE]  while  expected	46	None	replace
88	[BUG]  [BUGGY]  final  double[][]  scale  =  scalAbsoluteTolerance.getValues();  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  scalAbsoluteTolerance.getValues();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  scalAbsoluteTolerance.getValues();	  final    double[][]    scale    =    vecAbsoluteTolerance.getValues();    	non-compiled	[CE]  while  expected	46	None	replace
89	[BUG]  [BUGGY]  final  double[][]  scale  =  vecRelativeTolerance.getValues();  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecRelativeTolerance.getValues();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecRelativeTolerance.getValues();	  final    double[][]    scale    =    vecAbsoluteTolerance.getValues();    	non-compiled	[CE]  while  expected	46	None	replace
90	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale(t0,  y0.length);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale(t0,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale(t0,  y0.length);	  scalAbsoluteTolerance    =    getScale(t0);    	non-compiled	[CE]  while  expected	70	None	replace
91	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scalaAbsoluteTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  scalaAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  scalaAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.min(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	37	None	replace
92	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalaAbsoluteTolerance);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scalaAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  scalaAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.min(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	37	None	replace
93	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scala,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scala,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scala,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.min(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	37	None	replace
94	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getMean();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getMean();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getMean();	  double    scalAbsoluteTolerance    =    getReal();    	non-compiled	[CE]  while  expected	64	None	replace
95	[BUG]  [BUGGY]  Arrays.fill(y0,  scale,  scalAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(y0,  scale,  scalAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(y0,  scale,  scalAbsoluteTolerance);	  Arrays.fill(y0,    scale);    	non-compiled	[CE]  while  expected	4	None	replace
96	[BUG]  [BUGGY]  Arrays.fill(y0,  scale,  vAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(y0,  scale,  vAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(y0,  scale,  vAbsoluteTolerance);	  Arrays.fill(y0,    scale);    	non-compiled	[CE]  while  expected	4	None	replace
97	[BUG]  [BUGGY]  Arrays.fill(scale,  scaleAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  scaleAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  scaleAbsoluteTolerance);	  Arrays.fill(y0,    scaleAbsoluteTolerance);    	non-compiled	[CE]  while  expected	65	None	replace
98	[BUG]  [BUGGY]  Arrays.fill(y0,  scalAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(y0,  scalAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(y0,  scalAbsoluteTolerance);	  Arrays.fill(y0,    scaleAbsoluteTolerance);    	non-compiled	[CE]  while  expected	65	None	replace
99	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScaleRelativeTolerance();  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScaleRelativeTolerance();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScaleRelativeTolerance();	  double    scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  while  expected	63	None	replace
100	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getRelativeTolerance(y0.length);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getRelativeTolerance(y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getRelativeTolerance(y0.length);	  double    scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  while  expected	63	None	replace
101	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getRelativeTolerance()  +  1;  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getRelativeTolerance()  +  1;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getRelativeTolerance()  +  1;	  double    scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  while  expected	63	None	replace
102	[BUG]  [BUGGY]  scale  =  new  double[scalAbsoluteTolerance.length  +  1];  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scalAbsoluteTolerance.length  +  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scalAbsoluteTolerance.length  +  1];	  scale    =    new    double[scalAbsoluteTolerance.length];    	non-compiled	[CE]  while  expected	52	None	replace
103	[BUG]  [BUGGY]  final  double[][]  scale  =  scalAbsoluteTolerance.toArray();  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  scalAbsoluteTolerance.toArray();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  scalAbsoluteTolerance.toArray();	  final    double[][]    scale    =    vecAbsoluteTolerance.toArray();    	non-compiled	[CE]  while  expected	3	None	replace
104	[BUG]  [BUGGY]  final  double[][]  scale  =  vecRelativeTolerance.toArray();  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecRelativeTolerance.toArray();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecRelativeTolerance.toArray();	  final    double[][]    scale    =    vecAbsoluteTolerance.toArray();    	non-compiled	[CE]  while  expected	3	None	replace
105	[BUG]  [BUGGY]  Double[][]  scale  =  vecAbsoluteTolerance.getValues();  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Double[][]  scale  =  vecAbsoluteTolerance.getValues();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Double[][]  scale  =  vecAbsoluteTolerance.getValues();	  double[][]    scale    =    scalAbsoluteTolerance.getValues();    	non-compiled	[CE]  while  expected	45	None	replace
106	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale(scale.length);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale(scale.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale(scale.length);	  scalAbsoluteTolerance    =    getScale(t0.length);    	non-compiled	[CE]  while  expected	12	None	replace
107	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale(t0.length,  y0.length);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale(t0.length,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale(t0.length,  y0.length);	  scalAbsoluteTolerance    =    getScale(t0.length);    	non-compiled	[CE]  while  expected	12	None	replace
108	[BUG]  [BUGGY]  scale  =  new  double[y.length  -  2];  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[y.length  -  2];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[y.length  -  2];	  scale    =    new    double[y.length    -    1];    	non-compiled	[CE]  while  expected	47	None	replace
109	[BUG]  [BUGGY]  scale  =  new  double[y.length  ];  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[y.length  ];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[y.length  ];	  scale    =    new    double[y.length    -    1];    	non-compiled	[CE]  while  expected	47	None	replace
110	[BUG]  [BUGGY]  y0  =  getImmediateParentPointer().length;  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getImmediateParentPointer().length;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getImmediateParentPointer().length;	  y0    =    getImmediateParentPointer();    	non-compiled	[CE]  while  expected	76	None	replace
111	[BUG]  [BUGGY]  y0  =  getImmediateParentPointer()  +  1;  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getImmediateParentPointer()  +  1;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getImmediateParentPointer()  +  1;	  y0    =    getImmediateParentPointer();    	non-compiled	[CE]  while  expected	76	None	replace
112	[BUG]  [BUGGY]  y0  =  getImmediatePosition();  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getImmediatePosition();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getImmediatePosition();	  y0    =    getImmediateParentPointer();    	non-compiled	[CE]  while  expected	76	None	replace
113	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScaleRelativeTolerance();  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScaleRelativeTolerance();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScaleRelativeTolerance();	  scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  while  expected	59	None	replace
114	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getDerivativeTolerance();  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getDerivativeTolerance();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getDerivativeTolerance();	  scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  while  expected	59	None	replace
115	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scale);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  scale);	  scalAbsoluteTolerance    =    Math.max(scale,    firstTime);    	non-compiled	[CE]  while  expected	40	None	replace
116	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scala,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scala,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scala,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	39	None	replace
117	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length  +  2]);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length  +  2]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length  +  2]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length    +    1]);    	non-compiled	[CE]  while  expected	14	None	replace
118	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  y0.length);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  y0.length);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    y0);    	non-compiled	[CE]  while  expected	55	None	replace
119	[BUG]  [BUGGY]  final  double[][]  scale  =  vecRelativeTolerance.getScale();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecRelativeTolerance.getScale();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecRelativeTolerance.getScale();	  final    double[][]    scale    =    vecAbsoluteTolerance.getScale();    	non-compiled	[CE]  while  expected	25	None	replace
120	[BUG]  [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[scaleAbsoluteTolerance.length]);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[scaleAbsoluteTolerance.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecRelativeTolerance.toArray(new  double[scaleAbsoluteTolerance.length]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scaleAbsoluteTolerance.length]);    	non-compiled	[CE]  while  expected	68	None	replace
121	[BUG]  [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scaleAbsoluteTolerance.length]);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scaleAbsoluteTolerance.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scaleAbsoluteTolerance.length]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scaleAbsoluteTolerance.length]);    	non-compiled	[CE]  while  expected	68	None	replace
122	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0.length,  scale);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0.length,  scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0.length,  scale);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0.length);    	non-compiled	[CE]  while  expected	19	None	replace
123	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0.length  -  1);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0.length  -  1);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0.length  -  1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0.length);    	non-compiled	[CE]  while  expected	19	None	replace
124	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t0.length);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t0.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0.length);    	non-compiled	[CE]  while  expected	19	None	replace
125	[BUG]  [BUGGY]  scale  =  new  double[scaleAbsoluteTolerance.length  -  1];  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scaleAbsoluteTolerance.length  -  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scaleAbsoluteTolerance.length  -  1];	  scale    =    new    double[vecAbsoluteTolerance.length    -    1];    	non-compiled	[CE]  while  expected	50	None	replace
126	[BUG]  [BUGGY]  Arrays.fill(b,  y0,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(b,  y0,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(b,  y0,  vecAbsoluteTolerance);	  Arrays.fill(y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	5	None	replace
127	[BUG]  [BUGGY]  Arrays.fill(variables,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(variables,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(variables,  vecAbsoluteTolerance);	  Arrays.fill(y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	5	None	replace
128	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale()  /  scale;  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale()  /  scale;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale()  /  scale;	  scalAbsoluteTolerance    =    getScale()    *    scale;    	non-compiled	[CE]  while  expected	13	None	replace
129	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale()  *  scale  +  1;  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale()  *  scale  +  1;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale()  *  scale  +  1;	  scalAbsoluteTolerance    =    getScale()    *    scale;    	non-compiled	[CE]  while  expected	13	None	replace
130	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale()  *  scale,  y0.length;  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale()  *  scale,  y0.length;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale()  *  scale,  y0.length;	  scalAbsoluteTolerance    =    getScale()    *    scale;    	non-compiled	[CE]  ';'  expected	13	None	replace
131	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScale(t0.length);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScale(t0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScale(t0.length);	  double    scalAbsoluteTolerance    =    getScale(y0.length);    	non-compiled	[CE]  while  expected	43	None	replace
132	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScale(y0.length  -  1);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScale(y0.length  -  1);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScale(y0.length  -  1);	  double    scalAbsoluteTolerance    =    getScale(y0.length);    	non-compiled	[CE]  while  expected	43	None	replace
133	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScale(scale.length);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScale(scale.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScale(scale.length);	  double    scalAbsoluteTolerance    =    getScale(y0.length);    	non-compiled	[CE]  while  expected	43	None	replace
134	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScale(y0.length  +  1);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScale(y0.length  +  1);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScale(y0.length  +  1);	  double    scalAbsoluteTolerance    =    getScale(y0.length);    	non-compiled	[CE]  while  expected	43	None	replace
135	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    scale);    	non-compiled	[CE]  while  expected	66	None	replace
136	[BUG]  [BUGGY]  scale  =  new  double[scalaAbsoluteTolerance.length  +  2];  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scalaAbsoluteTolerance.length  +  2];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scalaAbsoluteTolerance.length  +  2];	  scale    =    new    double[scalaAbsoluteTolerance.length    +    1];    	non-compiled	[CE]  while  expected	7	None	replace
137	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  1);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  1);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  1);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    0);    	non-compiled	[CE]  while  expected	56	None	replace
138	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  0);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scale,  0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scale,  0);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    0);    	non-compiled	[CE]  while  expected	56	None	replace
139	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  1);  [CE]  while  expected  [FE]                          AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  1);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  1);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    0);    	non-compiled	[CE]  while  expected	56	None	replace
140	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  0);  [CE]  while  expected  [FE]                            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scalaAbsoluteTolerance,  0);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    0);    	non-compiled	[CE]  while  expected	56	None	replace
141	[BUG]  [BUGGY]  Arrays.fill(scale,  y0AbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  y0AbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  y0AbsoluteTolerance);	  Arrays.fill(y0,    scaleAbsoluteTolerance);    	non-compiled	[CE]  while  expected	65	None	replace
142	[BUG]  [BUGGY]  double[][]  scale  =  vecRelativeTolerance.getValues();  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecRelativeTolerance.getValues();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecRelativeTolerance.getValues();	  double[][]    scale    =    scalAbsoluteTolerance.getValues();    	non-compiled	[CE]  while  expected	45	None	replace
143	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  2);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  2);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  2);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    0);    	non-compiled	[CE]  while  expected	56	None	replace
144	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getRelativeTolerance(y0.length);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getRelativeTolerance(y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getRelativeTolerance(y0.length);	  scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  ';'  expected	59	None	replace
145	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getRelativeTolerance(y0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getRelativeTolerance(y0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getRelativeTolerance(y0);	  scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  ';'  expected	59	None	replace
146	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getSale();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getSale();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getSale();	  scalAbsoluteTolerance    =    getScale()    +    1;    	non-compiled	[CE]  ';'  expected	11	None	replace
147	[BUG]  [BUGGY]  scale  =  new  double[scale.length  *  1];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scale.length  *  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scale.length  *  1];	  scale    =    new    double[scale.length    +    1];    	non-compiled	[CE]  ';'  expected	36	None	replace
148	[BUG]  [BUGGY]  final  double[][]  scale  =  y0.getScale();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  y0.getScale();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  y0.getScale();	  final    double[][]    scale    =    vecAbsoluteTolerance.getScale();    	non-compiled	[CE]  ';'  expected	25	None	replace
149	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  1);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(scale,    y0);    	non-compiled	[CE]  ';'  expected	20	None	replace
150	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale(t0,  y0);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale(t0,  y0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale(t0,  y0);	  scalAbsoluteTolerance    =    getScale(t0);    	non-compiled	[CE]  while  expected	70	None	replace
151	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  y0);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(scale,  y0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(scale,  y0);	  scalAbsoluteTolerance    =    Math.max(scale,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	73	None	replace
152	[BUG]  [BUGGY]  y0  =  getImmediateScale(t0,  y);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getImmediateScale(t0,  y);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getImmediateScale(t0,  y);	  y0    =    getImmediateScale();    	non-compiled	[CE]  while  expected	29	None	replace
153	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getTick();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getTick();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getTick();	  double    scalAbsoluteTolerance    =    getReal();    	non-compiled	[CE]  while  expected	64	None	replace
154	[BUG]  [BUGGY]  scale  =  new  double[vecAbsoluteTolerance.length  /  1];  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[vecAbsoluteTolerance.length  /  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[vecAbsoluteTolerance.length  /  1];	  scale    =    new    double[vecAbsoluteTolerance.length    -    1];    	non-compiled	[CE]  while  expected	50	None	replace
155	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  yTmp);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  yTmp);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  yTmp);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    t0);    	non-compiled	[CE]  while  expected	17	None	replace
156	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t1);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t1);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0,  t1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0,    t0);    	non-compiled	[CE]  while  expected	17	None	replace
157	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale.length);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0.length);    	non-compiled	[CE]  while  expected	19	None	replace
158	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getRelativeTolerance(y0);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getRelativeTolerance(y0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getRelativeTolerance(y0);	  double    scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  while  expected	63	None	replace
159	[BUG]  [BUGGY]  scale  =  new  double[vecAbsoluteTolerance.length  +  1];  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[vecAbsoluteTolerance.length  +  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[vecAbsoluteTolerance.length  +  1];	  scale    =    new    double[scalaAbsoluteTolerance.length    +    1];    	non-compiled	[CE]  while  expected	7	None	replace
160	[BUG]  [BUGGY]  scale  =  new  double[scalaAbsoluteTolerance.length  *  1];  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scalaAbsoluteTolerance.length  *  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scalaAbsoluteTolerance.length  *  1];	  scale    =    new    double[scalaAbsoluteTolerance.length    +    1];    	non-compiled	[CE]  while  expected	7	None	replace
161	[BUG]  [BUGGY]  scale  =  new  double[y.length  -  1]  +  scalAbsoluteTolerance;  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[y.length  -  1]  +  scalAbsoluteTolerance;  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[y.length  -  1]  +  scalAbsoluteTolerance;	  scale    =    new    double[y.length    -    1];    	non-compiled	[CE]  while  expected	47	None	replace
162	[BUG]  [BUGGY]  final  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[y0.length]);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[y0.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecRelativeTolerance.toArray(new  double[y0.length]);	  final    double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length]);    	non-compiled	[CE]  while  expected	15	None	replace
163	[BUG]  [BUGGY]  Arrays.fill(b,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(b,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(b,  vecAbsoluteTolerance);	  Arrays.fill(y0,    vecAbsoluteTolerance);    	non-compiled	[CE]  while  expected	5	None	replace
164	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale,  vecRelativeTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale,  vecRelativeTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  y0,  scale,  vecRelativeTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	18	None	replace
165	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y0);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t0,  scale,  y0);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(t0,    y0,    scale);    	non-compiled	[CE]  while  expected	18	None	replace
166	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scalaAbsoluteTolerance.length  +  1]);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scalaAbsoluteTolerance.length  +  1]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scalaAbsoluteTolerance.length  +  1]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scalaAbsoluteTolerance.length]);    	non-compiled	[CE]  while  expected	58	None	replace
167	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale(null,  y0);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale(null,  y0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale(null,  y0);	  scalAbsoluteTolerance    =    getScale(null);    	non-compiled	[CE]  while  expected	60	None	replace
168	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale(null,  y0.length);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale(null,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale(null,  y0.length);	  scalAbsoluteTolerance    =    getScale(null);    	non-compiled	[CE]  while  expected	60	None	replace
169	[BUG]  [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  scale);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(vecAbsoluteTolerance,  scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(vecAbsoluteTolerance,  scale);	  Arrays.fill(y0,    scale);    	non-compiled	[CE]  while  expected	4	None	replace
170	[BUG]  [BUGGY]  y0  =  getIsLast()  +  2;  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getIsLast()  +  2;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getIsLast()  +  2;	  y0    =    getIsLast();    	non-compiled	[CE]  while  expected	27	None	replace
171	[BUG]  [BUGGY]  scale  =  new  double[t0.length  *  1];  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[t0.length  *  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[t0.length  *  1];	  scale    =    new    double[t0.length    +    1];    	non-compiled	[CE]  while  expected	49	None	replace
172	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getSlopeRelativeTolerance();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getSlopeRelativeTolerance();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getSlopeRelativeTolerance();	  double    scalAbsoluteTolerance    =    getSlope();    	non-compiled	[CE]  while  expected	42	None	replace
173	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale  +  2;  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale  +  2;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale  +  2;	  double    scalAbsoluteTolerance    =    getOrder().doubleValue()    *    scale;    	non-compiled	[CE]  while  expected	22	None	replace
174	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  yRelativeTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  yRelativeTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  yRelativeTolerance);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length],    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	16	None	replace
175	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScale(scale);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScale(scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScale(scale);	  double    scalAbsoluteTolerance    =    getScale(y0.length);    	non-compiled	[CE]  while  expected	43	None	replace
176	[BUG]  [BUGGY]  double[][]  scale  =  y0.getScale();  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  y0.getScale();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  y0.getScale();	  double[][]    scale    =    scalAbsoluteTolerance.getScale();    	non-compiled	[CE]  while  expected	24	None	replace
177	[BUG]  [BUGGY]  Arrays.fill(scale,  firstTime,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  firstTime,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  firstTime,  vecAbsoluteTolerance);	  Arrays.fill(scale,    vecAbsoluteTolerance,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	77	None	replace
178	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(scale,  scalAbsoluteTolerance);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(scale,  scalAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(scale,  scalAbsoluteTolerance);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(scale);    	non-compiled	[CE]  while  expected	1	None	replace
179	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0.length  -  1);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0.length  -  1);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(y0.length  -  1);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(y0.length);    	non-compiled	[CE]  while  expected	32	None	replace
180	[BUG]  [BUGGY]  y0  =  getSlope();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getSlope();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getSlope();	  y0    =    getTick();    	non-compiled	[CE]  while  expected	67	None	replace
181	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(scale);    	non-compiled	[CE]  while  expected	30	None	replace
182	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScale()  +  scale;  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScale()  +  scale;  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScale()  +  scale;	  scalAbsoluteTolerance    =    getScale()    *    scale;    	non-compiled	[CE]  while  expected	13	None	replace
183	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length  +  3]);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length  +  3]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length  +  3]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length    +    1]);    	non-compiled	[CE]  while  expected	14	None	replace
184	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(values);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(values);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(values);	  double[][]    scale    =    scalAbsoluteTolerance.toArray();    	non-compiled	[CE]  while  expected	2	None	replace
185	[BUG]  [BUGGY]  Arrays.fill(scale,  vAbsoluteTolerance);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  vAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  vAbsoluteTolerance);	  Arrays.fill(scale,    y0);    	non-compiled	[CE]  while  expected	34	None	replace
186	[BUG]  [BUGGY]  Arrays.fill(scale,  y0.length,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  y0.length,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  y0.length,  vecAbsoluteTolerance);	  Arrays.fill(scale,    vecAbsoluteTolerance,    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	77	None	replace
187	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(y0.length,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(y0.length,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(y0.length,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.min(scalaAbsoluteTolerance,    vecRelativeTolerance);    	non-compiled	[CE]  while  expected	54	None	replace
188	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getVisibleTolerance();  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getVisibleTolerance();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getVisibleTolerance();	  double    scalAbsoluteTolerance    =    getScale();    	non-compiled	[CE]  while  expected	41	None	replace
189	[BUG]  [BUGGY]  y0  =  getTickSize();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getTickSize();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getTickSize();	  y0    =    getTick();    	non-compiled	[CE]  while  expected	67	None	replace
190	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getScaleAbsoluteTolerance();  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getScaleAbsoluteTolerance();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getScaleAbsoluteTolerance();	  scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  while  expected	59	None	replace
191	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  getSlope();  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  getSlope();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  getSlope();	  scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  while  expected	59	None	replace
192	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  0,  y0.length);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  0,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(scale,  0,  y0.length);	  scalAbsoluteTolerance    =    calculateScaleAbsoluteTolerance(scale,    y0);    	non-compiled	[CE]  while  expected	20	None	replace
193	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScale(scale,  y0.length);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScale(scale,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScale(scale,  y0.length);	  double    scalAbsoluteTolerance    =    getScale(y0.length);    	non-compiled	[CE]  while  expected	43	None	replace
194	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scala.length  +  1]);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scala.length  +  1]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scala.length  +  1]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scala.length]);    	non-compiled	[CE]  while  expected	69	None	replace
195	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale,  y0.length);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale,  y0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getOrder().doubleValue()  *  scale,  y0.length);	  double    scalAbsoluteTolerance    =    getOrder().doubleValue()    *    scale;    	non-compiled	[CE]  ';'  expected	22	None	replace
196	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.doubleValue();  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.doubleValue();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.doubleValue();	  double[][]    scale    =    vecAbsoluteTolerance.cloneTree();    	non-compiled	[CE]  while  expected	26	None	replace
197	[BUG]  [BUGGY]  y0  =  getIsInverted();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getIsInverted();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getIsInverted();	  y0    =    getIsLast();    	non-compiled	[CE]  while  expected	27	None	replace
198	[BUG]  [BUGGY]  y0  =  createImmediateScale();  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  createImmediateScale();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  createImmediateScale();	  y0    =    getImmediateScale();    	non-compiled	[CE]  while  expected	29	None	replace
199	[BUG]  [BUGGY]  y0  =  getImmediateScalePointer();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  y0  =  getImmediateScalePointer();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	y0  =  getImmediateScalePointer();	  y0    =    getImmediateParentPointer();    	non-compiled	[CE]  while  expected	76	None	replace
200	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.min(y0.length,  scale);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.min(y0.length,  scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.min(y0.length,  scale);	  scalAbsoluteTolerance    =    Math.min(scalaAbsoluteTolerance,    scale);    	non-compiled	[CE]  while  expected	37	None	replace
201	[BUG]  [BUGGY]  double[][]  scale  =  scalAbsoluteTolerance.toArray(scale);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  scalAbsoluteTolerance.toArray(scale);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  scalAbsoluteTolerance.toArray(scale);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(scale);    	non-compiled	[CE]  while  expected	1	None	replace
202	[BUG]  [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.cloneTree();  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  final  double[][]  scale  =  vecAbsoluteTolerance.cloneTree();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	final  double[][]  scale  =  vecAbsoluteTolerance.cloneTree();	  final    double[][]    scale    =    vecAbsoluteTolerance.getScale();    	non-compiled	[CE]  while  expected	25	None	replace
203	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.abs(scale,  vecAbsoluteTolerance);  [CE]  while  expected  [FE]                        AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.abs(scale,  vecAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.abs(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scale,    firstTime);    	non-compiled	[CE]  while  expected	40	None	replace
204	[BUG]  [BUGGY]  double[][]  scale  =  vAbsoluteTolerance.getValues();  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vAbsoluteTolerance.getValues();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vAbsoluteTolerance.getValues();	  double[][]    scale    =    scalAbsoluteTolerance.getValues();    	non-compiled	[CE]  while  expected	45	None	replace
205	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  t0);  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  t0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  t0);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length],    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	16	None	replace
206	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  a);  [CE]  while  expected  [FE]                  AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  a);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[y0.length],  a);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[y0.length],    scalAbsoluteTolerance);    	non-compiled	[CE]  while  expected	16	None	replace
207	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  t0);  [CE]  while  expected  [FE]                    AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  t0);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(scalaAbsoluteTolerance,  t0);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    y0);    	non-compiled	[CE]  while  expected	55	None	replace
208	[BUG]  [BUGGY]  scalAbsoluteTolerance  =  Math.max(y0,  scalaAbsoluteTolerance);  [CE]  while  expected  [FE]                      AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scalAbsoluteTolerance  =  Math.max(y0,  scalaAbsoluteTolerance);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scalAbsoluteTolerance  =  Math.max(y0,  scalaAbsoluteTolerance);	  scalAbsoluteTolerance    =    Math.max(scalaAbsoluteTolerance,    y0);    	non-compiled	[CE]  while  expected	55	None	replace
209	[BUG]  [BUGGY]  scale  =  new  double[scalaAbsoluteTolerance.length  /  1];  [CE]  while  expected  [FE]                AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  scale  =  new  double[scalaAbsoluteTolerance.length  /  1];  [BUGGY]      java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	scale  =  new  double[scalaAbsoluteTolerance.length  /  1];	  scale    =    new    double[scalaAbsoluteTolerance.length    -    1];    	non-compiled	[CE]  while  expected	8	None	replace
210	[BUG]  [BUGGY]  Arrays.fill(scale,  t0.length);  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  Arrays.fill(scale,  t0.length);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	Arrays.fill(scale,  t0.length);	  Arrays.fill(scale,    y0.length);    	non-compiled	[CE]  while  expected	33	None	replace
211	[BUG]  [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scalaVerticalTolerance.length]);  [CE]  while  expected  [FE]            AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scalaVerticalTolerance.length]);  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vecAbsoluteTolerance.toArray(new  double[scalaVerticalTolerance.length]);	  double[][]    scale    =    vecAbsoluteTolerance.toArray(new    double[scaleAbsoluteTolerance.length]);    	non-compiled	[CE]  while  expected	68	None	replace
212	[BUG]  [BUGGY]  double[][]  scale  =  vAbsoluteTolerance.getScale();  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double[][]  scale  =  vAbsoluteTolerance.getScale();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double[][]  scale  =  vAbsoluteTolerance.getScale();	  double[][]    scale    =    scalAbsoluteTolerance.getScale();    	non-compiled	[CE]  while  expected	24	None	replace
213	[BUG]  [BUGGY]  double  scalAbsoluteTolerance  =  getScaleAbsoluteTolerance();  [CE]  while  expected  [FE]              AssertionError      [CONTEXT]      for  (boolean  loop  =  true;  loop;)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale;  if  (vecAbsoluteTolerance  ==  null)  {      [BUGGY]  double  scalAbsoluteTolerance  =  getScaleAbsoluteTolerance();  [BUGGY]      scale  =  new  double[y0.length];  java.util.Arrays.fill(scale,  scalAbsoluteTolerance);  }  else  {  scale  =  vecAbsoluteTolerance;  }  hNew  =  initializeStep(equations,  forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	247	247	1	replace	double  scalAbsoluteTolerance  =  getScaleAbsoluteTolerance();	  double    scalAbsoluteTolerance    =    getRelativeTolerance();    	non-compiled	[CE]  while  expected	63	None	replace
