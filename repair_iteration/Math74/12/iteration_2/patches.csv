bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  handler.handleStep(interpolator,  stepSize,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  stepSize,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  stepSize,  nextStep);	  handler.handleStep(interpolator,    stepSize,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
2	[BUG]  [BUGGY]  handler.handleStep(interpolator,  steps,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  steps,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  steps,  stepStart);	  handler.handleStep(interpolator,    stepSize,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
3	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  stepStart,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  stepStart,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  stepStart,  nextStep);	  handler.handleStep(t0,    y0,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
4	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  nextStep,  lastStep);	  handler.handleStep(t0,    y0,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
5	[BUG]  [BUGGY]  safely())  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safely())  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safely())  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length  -  2);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length  -  2);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  2],  handler.handleStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  2],  handler.handleStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  2],  handler.handleStep);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);	  System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);	  System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
12	[BUG]  [BUGGY]  if(handler!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {	  if(lastStep!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
13	[BUG]  [BUGGY]  if(handler  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler  ==  null)  {  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler  ==  null)  {	  if(lastStep!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1);  handler.handleStep(interpolator,  lastStep);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep,  firstTime);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep,  firstTime);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  handler);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  handler);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  handler);	  System.arraycopy(yDotK[stages    -    1],    0,    y1,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);	  System.arraycopy(yDotK[stages    -    1],    0,    y1,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
18	[BUG]  [BUGGY]  handler.handleStep(y0,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(y0,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(y0,  t0);	  handler.handleStep(t0,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
19	[BUG]  [BUGGY]  handler.handleStep(t0,  y,  a);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y,  a);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y,  a);	  handler.handleStep(t0,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
20	[BUG]  [BUGGY]  handler.handleStep(t0,  y,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y,  nextStep);	  handler.handleStep(t0,    nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
21	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y,  lastStep);	  handler.handleStep(t0,    nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
22	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y,  stepSize);	  handler.handleStep(t0,    nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
23	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y,  stages);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y,  stages);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y,  stages);	  handler.handleStep(t0,    nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  y],  0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  y],  0,  y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  y],  0,  y	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length,  handler.handleStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length,  handler.handleStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length,  handler.handleStep);	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
26	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length,  handler.handleStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length,  handler.handleStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length,  handler.handleStep);	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
27	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y0,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y0,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  lastStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  lastStep.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  lastStep.length);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  handler,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  handler,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  handler,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  nextStep.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  nextStep.length);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.length);  manager.stepAccepted(nextStep,  y);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  manager.stepAccepted(nextStep,  y);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
35	[BUG]  [BUGGY]  handler.handleStep(t0,  t,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  t,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  t,  y);	  handler.handleStep(t0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  yDotK[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  yDotK[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  yDotK[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y0],    0,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.handleStep,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.handleStep,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.handleStep,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y0],    0,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  handler.handleStep,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  handler.handleStep,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0],  0,  handler.handleStep,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y0],    0,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
39	[BUG]  [BUGGY]  handler.handleStep(t0,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  stepSize);	  handler.handleStep(interpolator,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
40	[BUG]  [BUGGY]  handler.handleStep(interpolator,  t0,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  t0,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  t0,  stepSize);	  handler.handleStep(interpolator,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length  -  1);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1],  handler.handleStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1],  handler.handleStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1],  handler.handleStep);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    yDotK[0],    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  yDotK[0],  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  yDotK[0],  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  yDotK[0],  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    yDotK[0],    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  handler.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  handler.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  handler.length  -  1);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    yDotK[0],    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
46	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  interpolator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  interpolator);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  interpolator);	  handler.handleStep(t0,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
47	[BUG]  [BUGGY]  handler.handleStep(t0,  y,  interpolator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y,  interpolator);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y,  interpolator);	  handler.handleStep(t0,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
48	[BUG]  [BUGGY]  handler.handleStep(t0,  interpolator,  stages);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  interpolator,  stages);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  interpolator,  stages);	  handler.handleStep(t0,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);	  if(stages    >    1)    {    System.arraycopy(y0,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);	  if(stages    >    1)    {    System.arraycopy(y0,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  ytmp,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  ytmp,  0,  handler.length);	  System.arraycopy(y0,    0,    ytmp,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
52	[BUG]  [BUGGY]  manager.stepAccepted(handler,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  manager.stepAccepted(handler,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	manager.stepAccepted(handler,  lastStep);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
53	[BUG]  [BUGGY]  Manager.stepAccepted(handler,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  Manager.stepAccepted(handler,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	Manager.stepAccepted(handler,  lastStep);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  handler.length);  manager.stepAccepted(handler,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  handler.length);  manager.stepAccepted(handler,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  handler.length);  manager.stepAccepted(handler,  lastStep);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  handler.length);  manager.stepAccepted(stages,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  handler.length);  manager.stepAccepted(stages,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  handler.length);  manager.stepAccepted(stages,  lastStep);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
56	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  stages);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  stages);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  stages);	  handler.handleStep(t0,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
57	[BUG]  [BUGGY]  prosecutor.addError(t0,  y0,  stepStart,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  prosecutor.addError(t0,  y0,  stepStart,  nextStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	prosecutor.addError(t0,  y0,  stepStart,  nextStep);	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
58	[BUG]  [BUGGY]  prosecutor.addError(t0,  y0,  stepStart,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  prosecutor.addError(t0,  y0,  stepStart,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	prosecutor.addError(t0,  y0,  stepStart,  lastStep);	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
59	[BUG]  [BUGGY]  prosecutor.addError(t0,  y0,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  prosecutor.addError(t0,  y0,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	prosecutor.addError(t0,  y0,  lastStep);	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
60	[BUG]  [BUGGY]  prosecutor.reset(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  prosecutor.reset(nextStep,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	prosecutor.reset(nextStep,  y);	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  yTmp.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y,  0,  yTmp.length);	  System.arraycopy(y0,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  yTmp.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  yTmp.length);	  System.arraycopy(y0,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  yTmp,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  yTmp,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  yTmp,  0,  handler.length);	  System.arraycopy(yTmp,    0,    y,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  ytmp,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  ytmp,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  ytmp,  0,  handler.length);	  System.arraycopy(yTmp,    0,    y,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1],  0,  yDotK[0],  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1],  0,  yDotK[0],  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  yDotK[stages  -  1],  0,  yDotK[0],  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  handler.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  handler.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  handler.length  -  1);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
67	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  y0,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  y0,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  y0,  lastStep);	  handler.handleStep(interpolator,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
68	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  stepStart,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  stepStart,  y0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  stepStart,  y0);	  handler.handleStep(interpolator,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
69	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  y0,  t);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  y0,  t);	  handler.handleStep(interpolator,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
70	[BUG]  [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }	  if(handler!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arra    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
71	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }	  if(handler!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arra    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
72	[BUG]  [BUGGY]  if(fsal)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(fsal)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(fsal)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }	  if(handler!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arra    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
73	[BUG]  [BUGGY]  handler.handleStep(interpolator,  stepStart,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  stepStart,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  stepStart,  t0);	  handler.handleStep(interpolator,    t0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
74	[BUG]  [BUGGY]  handler.handleStep(t0,  interpolator,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  interpolator,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  interpolator,  stepStart);	  handler.handleStep(interpolator,    t0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
75	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  stepStart);	  handler.handleStep(interpolator,    nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
76	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y0,  lastStep);	  handler.handleStep(t0,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
77	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  firstTime);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y0,  firstTime);	  handler.handleStep(t0,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
78	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y0,  stepSize);	  handler.handleStep(t0,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
79	[BUG]  [BUGGY]  handler.handleStep(interpolator,  y0,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  y0,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  y0,  t0);	  handler.handleStep(interpolator,    t0,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
80	[BUG]  [BUGGY]  handler.handleStep(interpolator,  y,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  y,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  y,  t0);	  handler.handleStep(interpolator,    t0,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.length);  manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.length);  manager.stepAccepted(handler,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.length);  manager.stepAccepted(handler,  y);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  manager.stepAccepted(handler,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  manager.stepAccepted(handler,  y);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
84	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(handler!=    null)    {    System.arraycopy(yHandler,    y0[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  lastStep);	  if(handler!=    null)    {    System.arraycopy(yHandler,    y0[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);	  if(handler!=    null)    {    System.arraycopy(yHandler,    y0[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  yDotK[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  yDotK[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  yDotK[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    handler,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  yTmp[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  yTmp[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  handler,  yTmp[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    handler,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y1,  yDotK[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y1,  yDotK[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y1,  yDotK[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    handler,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y0,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y0,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  yDotK[stages  -  1,  y0,  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length  -  1);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
92	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length);  manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length);  manager.stepAccepted(handler,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length);  manager.stepAccepted(handler,  y);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
93	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
94	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }	  if(lastStep!=    null)    {    if(stages    >    1)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
95	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }	  if(lastStep!=    null)    {    if(stages    >    1)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
96	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    if(stages    >    1)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
97	[BUG]  [BUGGY]  handler.handleStep(interpolator,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  y);	  handler.handleStep(y0,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
98	[BUG]  [BUGGY]  handler.handleStep(y0,  t,  interpolator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(y0,  t,  interpolator);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(y0,  t,  interpolator);	  handler.handleStep(y0,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y1,  0,  yDotK[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y1,  0,  yDotK[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y1,  0,  yDotK[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1);  System.arraycopy(yTmp,  0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1);  System.arraycopy(yTmp,  0,  y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1);  System.arraycopy(yTmp,  0,  y	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  y0[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  y0[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  y0[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    handler,    y0[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
102	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y1,  y0[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y1,  y0[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y1,  y0[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    handler,    y0[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
103	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y0,  handler,  y0[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y0,  handler,  y0[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y0,  handler,  y0[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    handler,    y0[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
104	[BUG]  [BUGGY]  handler.handleStep(t0,  y,  nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y,  nextStep,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y,  nextStep,  stepStart);	  handler.handleStep(t0,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
105	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  stepStart,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  stepStart,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  stepStart,  y);	  handler.handleStep(t0,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  yDotK[stages  -  1,  y,  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y,  0,  y.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  yDotK[stages  -  1,  y,  0,  y.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length);  manager.stepAccepted(nextStep,  y);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  handler);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  handler);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  handler);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  nextStep.length);  manager.stepAccepted(nextStep,  y);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
111	[BUG]  [BUGGY]  handler.handleStep(t0,  t0,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  t0,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  t0,  y);	  handler.handleStep(t0,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
112	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  t0,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  t0,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  t0,  y);	  handler.handleStep(interpolator,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
113	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  t0);	  handler.handleStep(interpolator,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
114	[BUG]  [BUGGY]  System.arraycopy(yHandler,  y[stages  -  1,  y],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  y[stages  -  1,  y],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  y[stages  -  1,  y],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
115	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  y0,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  y0,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    handler,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
116	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y1,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y1,  y0,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y1,  y0,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    handler,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  y,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  y,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    handler,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
118	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  handler);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  handler);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  handler);	  handler.handleStep(t0,    handler);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
119	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  handler);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  handler);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  handler);	  handler.handleStep(t0,    handler);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
120	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }	  if(handler!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arra    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
121	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  yDotK[0],  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  yDotK[0],  0,  y0.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  handler,  yDotK[0],  0,  y0.length  -  1);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
122	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    handler,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
123	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  stepStart,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  stepStart,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  stepStart,  lastStep);	  handler.handleStep(t0,    y0,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
124	[BUG]  [BUGGY]  handler.handleStep(y0,  t0,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(y0,  t0,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(y0,  t0,  lastStep);	  handler.handleStep(t0,    y0,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  yDotK[0],  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  yDotK[0],  0,  nextStep.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  handler,  yDotK[0],  0,  nextStep.length);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
126	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler.yDotK[0],  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler.yDotK[0],  0,  nextStep.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  handler.yDotK[0],  0,  nextStep.length);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
127	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  nextStep.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  nextStep.length  -  1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  nextStep.length  -  1);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  handler.length);	  System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
129	[BUG]  [BUGGY]  handler.handleStep(interpolator,  stepStart,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  stepStart,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  stepStart,  nextStep);	  handler.handleStep(interpolator,    stepStart,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
130	[BUG]  [BUGGY]  handler.handleStep(interpolator,  stepStart,  stepSize,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  stepStart,  stepSize,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  stepStart,  stepSize,  lastStep);	  handler.handleStep(interpolator,    stepStart,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
131	[BUG]  [BUGGY]  handler.handleStep(interpolator,  stepStart,  stepSize,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  stepStart,  stepSize,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  stepStart,  stepSize,  nextStep);	  handler.handleStep(interpolator,    stepStart,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
132	[BUG]  [BUGGY]  handler.handleStep(interpolator,  stepStart,  stepHandler,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  stepStart,  stepHandler,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  stepStart,  stepHandler,  stepSize);	  handler.handleStep(interpolator,    stepStart,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
133	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length],  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length],  0,  y.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length],  0,  y.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length],    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
134	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length],  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length],  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length],  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length],    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
135	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  handler,  0,  y0.length],  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  handler,  0,  y0.length],  0,  y.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  handler,  0,  y0.length],  0,  y.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length],    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
136	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  handler,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  handler,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  handler,  0,  y0.length);	  System.arraycopy(yTmp,    0,    y1,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
137	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y1,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y1,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y1,  0,  handler.length);	  System.arraycopy(yTmp,    0,    y1,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
138	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  stepStart,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  stepStart,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  stepStart,  stepSize);	  handler.handleStep(t0,    nextStep,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
139	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  stepSize,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  stepSize,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  stepSize,  lastStep);	  handler.handleStep(t0,    nextStep,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
140	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y1,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y1,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y1,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    handler,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
141	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  yTmp,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  yTmp,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  yTmp,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    handler,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
142	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y2,  0,  y0.length);	  System.arraycopy(y0,    0,    y1,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y1,  0,  handler.length);	  System.arraycopy(y0,    0,    y1,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
144	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }	  if(lastStep!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
145	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }	  if(lastStep!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
146	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  y1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  y1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y0,  y1);	  handler.handleStep(t0,    nextStep,    y1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
147	[BUG]  [BUGGY]  handler.handleStep(y0,  nextStep,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(y0,  nextStep,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(y0,  nextStep,  t0);	  handler.handleStep(t0,    nextStep,    y1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length  -  1);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
152	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length);  manager.stepAccepted(nextStep,  y);	  System.arraycopy(yDotK[stages    -    1,    y0],    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
154	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  manager.stepAccepted(nextStep,  handler);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  manager.stepAccepted(nextStep,  handler);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  manager.stepAccepted(nextStep,  handler);	  System.arraycopy(yDotK[stages    -    1,    y0],    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yHandler,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  yHandler,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  yHandler,  0,  y0.length);	  System.arraycopy(y0,    0,    handler,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
156	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  interpolator);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  interpolator);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  interpolator);	  handler.handleStep(interpolator,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
157	[BUG]  [BUGGY]  handler.handleStep(t,  y0,  interpolator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t,  y0,  interpolator);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t,  y0,  interpolator);	  handler.handleStep(interpolator,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
158	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  interface);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  interface);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  interface);	  handler.handleStep(interpolator,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  nextStep);	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    nextStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
160	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  stepStart,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  stepStart,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  stepStart,  stepSize);	  handler.handleStep(interpolator,    nextStep,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
161	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  stepSize,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  stepSize,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  stepSize,  lastStep);	  handler.handleStep(interpolator,    nextStep,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
162	[BUG]  [BUGGY]  handler.handleStep(y0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(y0,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(y0,  nextStep);	  handler.handleStep(nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
163	[BUG]  [BUGGY]  handler.handleStep(nextStep,  nextStep,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(nextStep,  nextStep,  y0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(nextStep,  nextStep,  y0);	  handler.handleStep(nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
164	[BUG]  [BUGGY]  handler.handleStep(nextStep,  y0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(nextStep,  y0,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(nextStep,  y0,  nextStep);	  handler.handleStep(nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(yHandler,  0,  yDotK[stages  -  1],  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  0,  yDotK[stages  -  1],  0,  handler.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  0,  yDotK[stages  -  1],  0,  handler.length);	  System.arraycopy(yHandler,    0,    yDotK[stages    -    1],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(yHandler,  0,  yDotK[stages  -  1],  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  0,  yDotK[stages  -  1],  0,  y0.length  -  1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  0,  yDotK[stages  -  1],  0,  y0.length  -  1);	  System.arraycopy(yHandler,    0,    yDotK[stages    -    1],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(yHandler,  0,  handler,  yDotK[stages  -  1],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  0,  handler,  yDotK[stages  -  1],  0,  y0.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  0,  handler,  yDotK[stages  -  1],  0,  y0.length);	  System.arraycopy(yHandler,    0,    yDotK[stages    -    1],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
168	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }	  if(lastStep!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
169	[BUG]  [BUGGY]  prosecutor.reset(nextStep,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  prosecutor.reset(nextStep,  y0);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	prosecutor.reset(nextStep,  y0);	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
170	[BUG]  [BUGGY]  prosecutor.reset(nextStep,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  prosecutor.reset(nextStep,  t0);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	prosecutor.reset(nextStep,  t0);	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y0,  0,  y0.length);	  System.arraycopy(y0,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
172	[BUG]  [BUGGY]  lastStep  =  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  lastStep  =  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	lastStep  =  handler.handleStep(interpolator,  lastStep);	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
173	[BUG]  [BUGGY]  prosecutor.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  prosecutor.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	prosecutor.handleStep(interpolator,  lastStep);	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
174	[BUG]  [BUGGY]  lastStep  =  handler.getLastOrderDifferentialEquations();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  lastStep  =  handler.getLastOrderDifferentialEquations();  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	lastStep  =  handler.getLastOrderDifferentialEquations();	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
175	[BUG]  [BUGGY]  lastStep  =  handler.handleStep(interpolator,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  lastStep  =  handler.handleStep(interpolator,  t0);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	lastStep  =  handler.handleStep(interpolator,  t0);	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
176	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }	  if(handler!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
177	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,	  if(handler!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
178	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,	  if(handler!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
179	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  y,  0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  y,  0,  y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  y,  0,  y	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
180	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.handleStep,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.handleStep,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.handleStep,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
181	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.handleStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.handleStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.handleStep);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
182	[BUG]  [BUGGY]  handler.handleStep(nextStep,  nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(nextStep,  nextStep,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(nextStep,  nextStep,  y);	  handler.handleStep(nextStep,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
183	[BUG]  [BUGGY]  handler.handleStep(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(nextStep,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(nextStep,  y);	  handler.handleStep(nextStep,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
184	[BUG]  [BUGGY]  handler.handleStep(nextStep,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(nextStep,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(nextStep,  stepSize);	  handler.handleStep(nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
185	[BUG]  [BUGGY]  handler.handleStep(nextStep,  nextStep,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(nextStep,  nextStep,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(nextStep,  nextStep,  stepSize);	  handler.handleStep(nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
186	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
187	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
188	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }	  if(lastStep!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
189	[BUG]  [BUGGY]  handler.handleStep(nextStep,  t0,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(nextStep,  t0,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(nextStep,  t0,  y);	  handler.handleStep(nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
190	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length  -  1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length  -  1]);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length  -  1]);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
192	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y2,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y2,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);	  if(stages    >    1)    {    System.arraycopy(y0,    0,    y1,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
193	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  stepStart,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  stepStart,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  stepStart,  lastStep);	  handler.handleStep(t0,    nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
194	[BUG]  [BUGGY]  lastStep  =  handler.getLastOrderDifferentialEquations()[0];  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  lastStep  =  handler.getLastOrderDifferentialEquations()[0];  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	lastStep  =  handler.getLastOrderDifferentialEquations()[0];	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    lastStep.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
195	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);	  if(lastStep!=    null)    {    System.arraycopy(yDotK[stages    -    1,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
196	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    System.arraycopy(yDotK[stages    -    1,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);	  if(lastStep!=    null)    {    System.arraycopy(yDotK[stages    -    1,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
198	[BUG]  [BUGGY]  manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  manager.stepAccepted(handler,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	manager.stepAccepted(handler,  y);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
199	[BUG]  [BUGGY]  Manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  Manager.stepAccepted(handler,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	Manager.stepAccepted(handler,  y);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
200	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  handler.length);  manager.stepAccepted(stages,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  handler.length);  manager.stepAccepted(stages,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y,  0,  handler.length);  manager.stepAccepted(stages,  y);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
201	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  handler,  0,  y0.length);  manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  handler,  0,  y0.length);  manager.stepAccepted(handler,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  handler,  0,  y0.length);  manager.stepAccepted(handler,  y);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y0,  y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y0,  y	  System.arraycopy(yDotK[stages    -    1],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
203	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.handleStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.handleStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.handleStep);	  System.arraycopy(yDotK[stages    -    1],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length	  System.arraycopy(yDotK[stages    -    1],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
205	[BUG]  [BUGGY]  handler.handleStep(t0,  stepSize,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  stepSize,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  stepSize,  stepStart);	  handler.handleStep(t0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
206	[BUG]  [BUGGY]  handler.handleStep(t0,  y,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y,  stepStart);	  handler.handleStep(t0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
207	[BUG]  [BUGGY]  handler.handleStep(t0,  stepSize,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  stepSize,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  stepSize,  nextStep);	  handler.handleStep(t0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y],  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y],  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y],  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
209	[BUG]  [BUGGY]  handler.handleStep(t0,  t0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  t0,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  t0,  nextStep);	  handler.handleStep(interpolator,    t0,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
210	[BUG]  [BUGGY]  handler.handleStep(t0,  interpolator,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  interpolator,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  interpolator,  nextStep);	  handler.handleStep(interpolator,    t0,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
211	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  t);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  t);	  handler.handleStep(interpolator,    t0,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
212	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length  -  2);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length  -  2);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
213	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  t);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  t);	  handler.handleStep(t0,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
214	[BUG]  [BUGGY]  safely(fsal)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safely(fsal)  {  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safely(fsal)  {	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
215	[BUG]  [BUGGY]  safeTree();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safeTree();  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safeTree();	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
216	[BUG]  [BUGGY]  safely())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safely())  {  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safely())  {	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
217	[BUG]  [BUGGY]  handler.handleStep(hNew,  nextStep,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(hNew,  nextStep,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(hNew,  nextStep,  t0);	  handler.handleStep(nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
218	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  nextStep.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  nextStep.length);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
219	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  yDotK[0],  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  yDotK[0],  0,  nextStep.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0],  0,  yDotK[0],  0,  nextStep.length);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
220	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    handler,    y0[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
221	[BUG]  [BUGGY]  System.arraycopy(yHandler,  y0[stages  -  1,  y],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  y0[stages  -  1,  y],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  y0[stages  -  1,  y],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
222	[BUG]  [BUGGY]  System.arraycopy(y0,  y[stages  -  1,  y],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  y[stages  -  1,  y],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  y[stages  -  1,  y],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
223	[BUG]  [BUGGY]  handler.handleStep(t,  nextStep,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t,  nextStep,  y0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t,  nextStep,  y0);	  handler.handleStep(nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
224	[BUG]  [BUGGY]  handler.handleStep(hNew,  nextStep,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(hNew,  nextStep,  y0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(hNew,  nextStep,  y0);	  handler.handleStep(nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
225	[BUG]  [BUGGY]  handler.handleStep(t,  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t,  y0,  t);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t,  y0,  t);	  handler.handleStep(interpolator,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
226	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
227	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length);  handler.handleStep(interpolator,  lastStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
228	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
229	[BUG]  [BUGGY]  safely())  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safely())  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safely())  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
230	[BUG]  [BUGGY]  safely())  {  System.arraycopy(yDotK[stages  -  1],  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safely())  {  System.arraycopy(yDotK[stages  -  1],  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safely())  {  System.arraycopy(yDotK[stages  -  1],  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
231	[BUG]  [BUGGY]  safely())  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safely())  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safely())  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
232	[BUG]  [BUGGY]  MutableEvents.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  MutableEvents.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	MutableEvents.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
233	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0],  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1,    y0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
234	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  yTmp.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  y0,  0,  yTmp.length);	  System.arraycopy(y0,    0,    y,    0,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
235	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yHandler,  y0[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }	  if(handler!=    null)    {    System.arraycopy(yHandler,    y0[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
236	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  handler,  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  handler,  0,  y0.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  handler,  0,  y0.length  -  1);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
237	[BUG]  [BUGGY]  if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
238	[BUG]  [BUGGY]  if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
239	[BUG]  [BUGGY]  if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
240	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  y	  System.arraycopy(yDotK[stages    -    1],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
241	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yMarkers.length  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yMarkers.length  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  yMarkers.length	  System.arraycopy(yDotK[stages    -    1],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
242	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0],  0,  y	  System.arraycopy(yDotK[stages    -    1],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
243	[BUG]  [BUGGY]  safeHandler.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safeHandler.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safeHandler.handleStep(interpolator,  lastStep);	  if(stages    >    1)    {    System.arraycopy(y0,    0,    y1,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
244	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);	  if(stages    >    1)    {    System.arraycopy(y0,    0,    y1,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
245	[BUG]  [BUGGY]  System.arraycopy(y0[stages  -  1],  0,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0[stages  -  1],  0,  y,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0[stages  -  1],  0,  y,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
246	[BUG]  [BUGGY]  if(stages  >  1)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(stages  >  1)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(stages  >  1)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
247	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);	  if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
248	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,	  if(handler!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
249	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }	  if(handler!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
250	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(y  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(y	  if(handler!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
251	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
252	[BUG]  [BUGGY]  handler.handleStep(interpolator,  y0,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  y0,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  y0,  nextStep);	  handler.handleStep(interpolator,    nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
253	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	105	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  yDotK[stages  -  1],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  yDotK[stages  -  1],  0,  y0.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  yDotK[stages  -  1],  0,  y0.length);	  System.arraycopy(yHandler,    0,    yDotK[stages    -    1],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
255	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  yHandler,  y0[stages  -  1],  0,  yHandler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  yHandler,  y0[stages  -  1],  0,  yHandler.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  yHandler,  y0[stages  -  1],  0,  yHandler.length);	  System.arraycopy(yHandler,    0,    yDotK[stages    -    1],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
256	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  yHandlers[stages  -  1],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  yHandlers[stages  -  1],  0,  y0.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  yHandlers[stages  -  1],  0,  y0.length);	  System.arraycopy(yHandler,    0,    yDotK[stages    -    1],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
257	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  yHandler[stages  -  1],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  yHandler[stages  -  1],  0,  y0.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  yHandler[stages  -  1],  0,  y0.length);	  System.arraycopy(yHandler,    0,    yDotK[stages    -    1],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
258	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  y0.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  y0,  0,  y0.length);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
259	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  y0,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
260	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  handler.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  y0,  0,  handler.length);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
261	[BUG]  [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    if(stages    >    1)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
262	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  stepStart);	  handler.handleStep(t0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.handleStep(interpolator,  lastStep);	  if(lastStep!=    null)    {    System.arraycopy(lastStep,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
264	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  stepSize);	  handler.handleStep(t0,    nextStep,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
265	[BUG]  [BUGGY]  System.arraycopy(handler,  y0[stages  -  1,  y,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  y0[stages  -  1,  y,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  y0[stages  -  1,  y,  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
266	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    nextStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
267	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    nextStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
268	[BUG]  [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arra  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arra  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arra	  if(handler!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arra    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
269	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arra  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arra  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arra	  if(handler!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arra    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
270	[BUG]  [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }	  if(handler!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arra    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
271	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }	  if(handler!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arra    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
272	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  yTmp.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y1,  0,  yTmp.length);	  System.arraycopy(yTmp,    0,    y1,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(y0,  y[stages  -  1,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  y[stages  -  1,  y,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  y[stages  -  1,  y,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(yHandler,  y0[stages  -  1,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  y0[stages  -  1,  y,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  y0[stages  -  1,  y,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(y0,  y[stages  -  1,  y,  0,  y0.length);  System.arraycopy(yTmp,  0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  y[stages  -  1,  y,  0,  y0.length);  System.arraycopy(yTmp,  0,  y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  y[stages  -  1,  y,  0,  y0.length);  System.arraycopy(yTmp,  0,  y	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
276	[BUG]  [BUGGY]  handler.handleStep(nextStep,  y0,  interpolator);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(nextStep,  y0,  interpolator);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(nextStep,  y0,  interpolator);	  handler.handleStep(nextStep,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
277	[BUG]  [BUGGY]  handler.handleStep(t0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  hNew);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  hNew);	  handler.handleStep(t0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
278	[BUG]  [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  y0.length);  manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  0,  y0,  0,  y0.length);  manager.stepAccepted(handler,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  0,  y0,  0,  y0.length);  manager.stepAccepted(handler,  y);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
279	[BUG]  [BUGGY]  handler.handleStep(t0,  stepStart,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  stepStart,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  stepStart,  stepSize);	  handler.handleStep(interpolator,    stepStart,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
280	[BUG]  [BUGGY]  handler.handleStep(interpolator,  y0,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  y0,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  y0,  stepSize);	  handler.handleStep(interpolator,    stepStart,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
281	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
282	[BUG]  [BUGGY]  handler.handleStep(hNew,  nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(hNew,  nextStep,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(hNew,  nextStep,  stepStart);	  handler.handleStep(nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
283	[BUG]  [BUGGY]  System.arraycopy(handler,  y[stages  -  1,  y,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  y[stages  -  1,  y,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  y[stages  -  1,  y,  0,  handler.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
284	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  y0[0],  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  handler,  y0[0],  0,  y0.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  handler,  y0[0],  0,  y0.length  -  1);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
285	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  y0.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[0],  0,  y0.length  -  1);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
286	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(y  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(y	  if(lastStep!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
287	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }	  if(lastStep!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
288	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(y  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(y	  if(lastStep!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
289	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  y1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  y1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  y1);	  handler.handleStep(t0,    nextStep,    y1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
290	[BUG]  [BUGGY]  safely(fsal)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safely(fsal)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safely(fsal)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
291	[BUG]  [BUGGY]  safely(fsal)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safely(fsal)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safely(fsal)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
292	[BUG]  [BUGGY]  safely(fsal)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  safely(fsal)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	safely(fsal)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  firstStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
293	[BUG]  [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
294	[BUG]  [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
295	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  nextStep,  stepSize);	  handler.handleStep(t0,    y0,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
296	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  fsal);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  fsal);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  nextStep,  fsal);	  handler.handleStep(t0,    y0,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
297	[BUG]  [BUGGY]  handler.handleStep(t0,  y,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y,  t);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y,  t);	  handler.handleStep(interpolator,    t0,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
298	[BUG]  [BUGGY]  handler.handleStep(t0,  y,  t1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y,  t1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y,  t1);	  handler.handleStep(interpolator,    t0,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
299	[BUG]  [BUGGY]  handler.handleStep(t0,  y,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y,  t0);	  handler.handleStep(interpolator,    t0,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
300	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  y0,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  y0,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  y0,  t0);	  handler.handleStep(interpolator,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
301	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yTmp,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
302	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
303	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.yDotK[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.yDotK[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.yDotK[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y0],    0,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
304	[BUG]  [BUGGY]  handler.handleStep(t0,  y1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y1);	  handler.handleStep(t0,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
305	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  nextStep,  stepStart);	  handler.handleStep(t0,    nextStep,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
306	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  y1,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  y1,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  y1,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    handler,    y0,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
307	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  yTmp,  0,  handler.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  yTmp,  0,  handler.length);	  System.arraycopy(y0,    0,    yTmp,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
308	[BUG]  [BUGGY]  lastStep  =  handler.getLastOrder();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  lastStep  =  handler.getLastOrder();  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	lastStep  =  handler.getLastOrder();	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    lastStep.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
309	[BUG]  [BUGGY]  lastStep  =  handler.handleStep(interpolator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  lastStep  =  handler.handleStep(interpolator);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	lastStep  =  handler.handleStep(interpolator);	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    lastStep.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
310	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length);  handler.handleStep(interpolator,  lastStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    handler,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
311	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yHandler,  0,  y0,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  }	  if(handler!=    null)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arra    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
312	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length],  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length],  0,  y.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  handler.length],  0,  y.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length],    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
313	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y.length],  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y.length],  0,  y.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  y.length],  0,  y.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length],    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
314	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  handler.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0],  0,  handler.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0],  0,  handler.length);  manager.stepAccepted(nextStep,  y);	  System.arraycopy(yDotK[stages    -    1,    y0],    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
315	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.handleStep,  y0.length  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.handleStep,  y0.length  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.handleStep,  y0.length	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
316	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  a,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  a,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  a,  lastStep);	  handler.handleStep(t0,    y0,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
317	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  t,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  t,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  t,  lastStep);	  handler.handleStep(t0,    y0,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
318	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  fsal);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  fsal);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y0,  fsal);	  handler.handleStep(t0,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
319	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  k);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  k);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y0,  k);	  handler.handleStep(t0,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
320	[BUG]  [BUGGY]  handler.handleStep(nextStep,  y0,  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(nextStep,  y0,  stepSize);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(nextStep,  y0,  stepSize);	  handler.handleStep(nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
321	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[1],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[1],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  yDotK[1],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
322	[BUG]  [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp,  0,  y,  0,  y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp,  0,  y,  0,  y	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
323	[BUG]  [BUGGY]  System.arraycopy(yHandler,  y[stages  -  1,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  y[stages  -  1,  y,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  y[stages  -  1,  y,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
324	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  y.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    System.arraycopy(yTmp,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
325	[BUG]  [BUGGY]  if(lastStep  >=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep  >=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep  >=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
326	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  t0,  t0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  t0,  t0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  t0,  t0);	  handler.handleStep(interpolator,    nextStep,    t0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
327	[BUG]  [BUGGY]  handler.handleStep(t0,  t0,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  t0,  stepStart);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  t0,  stepStart);	  handler.handleStep(interpolator,    t0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
328	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  manager.stepAccepted(handler,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y,  0,  y0.length);  manager.stepAccepted(handler,  y);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
329	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(handler,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(handler,  y);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
330	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  handler.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  handler.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y,  0,  handler.length);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
331	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y,  0,  y0.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y,  0,  y0.length);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
332	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length,  0,  y.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length,  0,  y.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length],    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
333	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y1,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y1,  0,  y.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y1,  0,  y.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length],    0,    y.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
334	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
335	[BUG]  [BUGGY]  if(lastStep  ==  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep  ==  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep  ==  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
336	[BUG]  [BUGGY]  handler.handleStep(t0,  y1,  interpolator);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y1,  interpolator);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y1,  interpolator);	  handler.handleStep(y0,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
337	[BUG]  [BUGGY]  if(firstTime)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(firstTime)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(firstTime)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
338	[BUG]  [BUGGY]  if(lastStep  ==  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep  ==  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep  ==  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
339	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
340	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1);  handler.handleStep(interpolator,  lastStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
341	[BUG]  [BUGGY]  handler.handleStep(t0,  interpolator,  a);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  interpolator,  a);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  interpolator,  a);	  handler.handleStep(t0,    interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
342	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  y1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  nextStep,  y1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  nextStep,  y1);	  handler.handleStep(t0,    nextStep,    y1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
343	[BUG]  [BUGGY]  handler.handleStep(y0,  nextStep,  t1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(y0,  nextStep,  t1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(y0,  nextStep,  t1);	  handler.handleStep(t0,    nextStep,    y1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
344	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  System.arraycopy(yDotK[stages  -  1,  y],  0,  y0.length);  System.arraycopy(yTmp,  0,  }	  if(handler!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    System.arraycopy(yDotK[stages    -    1,    y],    0,    y0.length);    System.arraycopy(yTmp,    0,    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
345	[BUG]  [BUGGY]  handler.handleStep(interpolator,  stepStart,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  stepStart,  y0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  stepStart,  y0);	  handler.handleStep(interpolator,    stepStart,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
346	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
347	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  2]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  2]);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  2]);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
348	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(y0,  0,  y0,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    System.arraycopy(lastStep,    0,    y0,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
349	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  handler,  0,  y.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  handler,  0,  y.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  handler,  0,  y.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
350	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  handler.length,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    handler,    yDotK[0],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
351	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1]);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1]);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
352	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1  +  stepSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1  +  stepSize);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  -  1  +  stepSize);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
353	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yZone,  handler.handleStep(interpolator,  lastStep));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yZone,  handler.handleStep(interpolator,  lastStep));  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  yZone,  handler.handleStep(interpolator,  lastStep));	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
354	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yY  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yY  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  yY	  System.arraycopy(yDotK[stages    -    1,    y],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
355	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(y0,  0,  y1,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(stages    >    1)    {    System.arraycopy(y0,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
356	[BUG]  [BUGGY]  handler.handleStep(t0,  firstTime,  nextStep,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  firstTime,  nextStep,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  firstTime,  nextStep,  lastStep);	  handler.handleStep(t0,    nextStep,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
357	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  0);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  0);	  handler.handleStep(interpolator,    nextStep,    stepSize);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
358	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
359	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y0,  0,  y0.length);  manager.stepAccepted(handler,  lastStep);	  System.arraycopy(yTmp,    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
360	[BUG]  [BUGGY]  if(firstTime)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(firstTime)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(firstTime)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
361	[BUG]  [BUGGY]  if(lastStep  ==  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep  ==  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep  ==  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(fsal)    {    System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
362	[BUG]  [BUGGY]  System.arraycopy(yTmp[stages  -  1],  0,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp[stages  -  1],  0,  y,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp[stages  -  1],  0,  y,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
363	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    nextStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
364	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  handler.handleStep(interpolator,  nextStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    nextStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
365	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.handleStep(interpolator,  lastStep));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.handleStep(interpolator,  lastStep));  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y,  0,  handler.handleStep(interpolator,  lastStep));	  System.arraycopy(yDotK[stages    -    1],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
366	[BUG]  [BUGGY]  System.arraycopy(yHandler,  y[stages  -  1],  0,  y  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  y[stages  -  1],  0,  y  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  y[stages  -  1],  0,  y	  System.arraycopy(yDotK[stages    -    1],    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
367	[BUG]  [BUGGY]  System.arraycopy(yHandler,  0,  yDotK[stages  -  1,  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  0,  yDotK[stages  -  1,  0,  y0.length  -  1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  0,  yDotK[stages  -  1,  0,  y0.length  -  1);	  System.arraycopy(yHandler,    0,    yDotK[stages    -    1],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
368	[BUG]  [BUGGY]  System.arraycopy(yHandler,  0,  yDotK[stages  -  1,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  0,  yDotK[stages  -  1,  0,  y0.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  0,  yDotK[stages  -  1,  0,  y0.length);	  System.arraycopy(yHandler,    0,    yDotK[stages    -    1],    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
369	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  t1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  t1);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  t1);	  handler.handleStep(t0,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
370	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  a);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  a);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  a);	  handler.handleStep(t0,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
371	[BUG]  [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y0,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1,  y0,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  yDotK[stages  -  1,  y0,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1,    y0,    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
372	[BUG]  [BUGGY]  System.arraycopy(yHandler,  0,  y,  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yHandler,  0,  y,  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yHandler,  0,  y,  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
373	[BUG]  [BUGGY]  System.arraycopy(y0[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(handler,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(handler,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(handler,  y);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    manager.stepAccepted(handler,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
374	[BUG]  [BUGGY]  handler.handleStep(interpolator,  nextStep,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(interpolator,  nextStep,  t);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(interpolator,  nextStep,  t);	  handler.handleStep(interpolator,    nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
375	[BUG]  [BUGGY]  if(lastStep!=  null  &&  handler.handleStep(interpolator,  nextStep))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null  &&  handler.handleStep(interpolator,  nextStep))  {  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null  &&  handler.handleStep(interpolator,  nextStep))  {	  if(lastStep!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
376	[BUG]  [BUGGY]  if(lastStep!=  null  &&  handler.handleStep(interpolator,  lastStep))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null  &&  handler.handleStep(interpolator,  lastStep))  {  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null  &&  handler.handleStep(interpolator,  lastStep))  {	  if(lastStep!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
377	[BUG]  [BUGGY]  if(lastStep!=  null  &&  handler.hasStep(interpolator))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null  &&  handler.hasStep(interpolator))  {  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null  &&  handler.hasStep(interpolator))  {	  if(lastStep!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
378	[BUG]  [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y[0],  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y[0],  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(handler!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  y[0],  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
379	[BUG]  [BUGGY]  handler.handleStep(t0,  y0,  t,  nextStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  y0,  t,  nextStep);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  y0,  t,  nextStep);	  handler.handleStep(t0,    y0,    nextStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
380	[BUG]  [BUGGY]  if(lastStep!=  lastStep)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  lastStep)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  lastStep)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  lastStep.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    lastStep.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
381	[BUG]  [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  firstStep.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  firstStep.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  0,  firstStep.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    lastStep.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
382	[BUG]  [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  null)  {  System.arraycopy(yDotK[stages  -  1],  0,  handler,  0,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(handler!=    null)    {    System.arraycopy(yDotK[stages    -    1],    0,    handler,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
383	[BUG]  [BUGGY]  if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  1,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  1,  y0.length);  handler.handleStep(interpolator,  lastStep);  }  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	if(lastStep!=  t0)  {  if(stages  >  1)  {  System.arraycopy(yTmp,  0,  y,  1,  y0.length);  handler.handleStep(interpolator,  lastStep);  }	  if(lastStep!=    t0)    {    if(stages    >    1)    {    System.arraycopy(yTmp,    0,    y,    0,    y0.length);    handler.handleStep(interpolator,    lastStep);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
384	[BUG]  [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(y0,  0,  y1,  0,  y0.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(y0,  0,  y1,  0,  y0.length  -  1);	  System.arraycopy(y0,    0,    y1,    0,    y0.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
385	[BUG]  [BUGGY]  System.arraycopy(yTmp[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yTmp[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yTmp[stages  -  1],  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);	  System.arraycopy(yDotK[stages    -    1],    0,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
386	[BUG]  [BUGGY]  handler.handleStep(t0,  a);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  a);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  a);	  handler.handleStep(t0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
387	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  nextStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  nextStep.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  nextStep.length);	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y0.length);    manager.stepAccepted(nextStep,    y);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
388	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y[0],  0,  y0.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1],  0,  y[0],  0,  y0.length  -  1);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1],  0,  y[0],  0,  y0.length  -  1);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    y0.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
389	[BUG]  [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(handler,  yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(handler,  yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    handler.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
390	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  +  1  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  +  1  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y,  0,  y0.length  +  1	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
391	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y1,  0,  y0.length  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y1,  0,  y0.length  [BUGGY]      handler.handleStep(interpolator,  lastStep);  }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y1,  0,  y0.length	  System.arraycopy(yDotK[stages    -    1,    y,    0,    y    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
392	[BUG]  [BUGGY]  handler.handleStep(t0,  stepStart,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  stepStart,  y);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  stepStart,  y);	  handler.handleStep(t0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
393	[BUG]  [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yStep.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  System.arraycopy(yDotK[stages  -  1,  y0,  0,  yStep.length);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	System.arraycopy(yDotK[stages  -  1,  y0,  0,  yStep.length);	  System.arraycopy(yDotK[stages    -    1],    0,    yDotK[0],    0,    nextStep.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
394	[BUG]  [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  a);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  double  nextStep  =  stepStart  +  stepSize;  System.arraycopy(yTmp,  0,  y,  0,  y0.length);  manager.stepAccepted(nextStep,  y);  lastStep  =  manager.stop();  interpolator.storeTime(nextStep);  for  (StepHandler  handler  :  stepHandlers)  {      [BUGGY]  handler.handleStep(t0,  nextStep,  y0,  a);  [BUGGY]      }  stepStart  =  nextStep;  if  (fsal)  {  System.arraycopy(yDotK[stages  -  1],  0,  yDotK[0],  0,  y0.length);  }  if  (manager.reset(stepStart,  y)  &&  !  lastStep)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math74/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.5	322	322	1	replace	handler.handleStep(t0,  nextStep,  y0,  a);	  handler.handleStep(t0,    nextStep,    y0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
