bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	31	2	replace
2	[BUG]  [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	31	2	replace
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	31	3	replace
4	[BUG]  [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	31	3	replace
5	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	31	None	replace
6	[BUG]  [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	31	None	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
8	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
10	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
11	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	12	None	add
12	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
13	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	12	5	add
14	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Node  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Node  node.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	12	None	add
15	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	32	5	add
16	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	32	5	add
17	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	32	None	add
18	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	32	5	add
19	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	32	5	add
20	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >>  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	32	None	add
21	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	32	5	add
22	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	32	5	add
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	32	5	add
24	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.getType()  >=  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	32	5	add
25	[BUG]  [BUGGY]  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  node  =  node.getLastChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getLastChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
26	[BUG]  [BUGGY]  Node  node  =  node.getNext();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  node  =  node.getNext();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.getNext();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	      Node    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	16	5	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.EXPR_RESULT);	      Node    node    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	16	5	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
30	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
31	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	26	5	add
32	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	26	5	add
33	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >>  Token.GETPROP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	26	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
35	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  >=  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
36	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [CE]  cannot  find  symbol  SETPROP  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  cannot  find  symbol  SETPROP	26	None	add
37	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	26	None	add
38	[BUG]  [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
39	[BUG]  [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
40	[BUG]  [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
41	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	34	5	add
42	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	34	5	add
43	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	34	5	add
44	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	34	5	add
45	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >>  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >>  Token.CALL);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	34	None	add
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	34	5	add
47	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  >=  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	34	5	add
48	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  preconditions.checkArgument(node.getType()  ==  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    preconditions.checkArgument(node.getType()  ==  Token.CALL);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	34	None	add
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	28	5	add
50	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	28	5	add
51	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	28	None	add
52	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	28	5	add
53	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	28	5	add
54	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	28	5	add
55	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	28	5	add
56	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >>  Token.REGEXP);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	28	None	add
57	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	28	5	add
58	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  >=  Token.REGEXP);	  	compilable	  [FE]  RuntimeException  	28	5	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.VAR);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	33	2	replace
60	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.VAR);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	33	2	replace
61	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	33	5	replace
62	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.FUNCTION);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	33	5	replace
63	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	33	5	replace
64	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	33	5	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	33	2	replace
66	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	33	2	replace
67	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	19	5	add
68	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	19	5	add
69	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	19	None	add
70	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	19	5	add
71	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	19	5	add
72	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >>  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	19	None	add
73	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	19	5	add
74	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  >=  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	19	5	add
75	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	19	5	add
76	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	19	5	add
77	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	27	5	replace
78	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.GETPROP);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	27	5	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	27	2	replace
80	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	27	2	replace
81	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	29	2	replace
83	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.REGEXP);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	29	2	replace
84	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	29	5	replace
85	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	29	5	replace
86	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	29	2	replace
88	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getType()  ==  Token.GETPROP);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	29	2	replace
89	[BUG]  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
90	[BUG]  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
91	[BUG]  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
92	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
93	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
94	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	30	None	add
95	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
96	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
97	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	21	None	add
98	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  >=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  >=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
99	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  node,  replacement))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	23	None	replace
100	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  false))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	23	None	replace
101	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  true))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  true))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  true))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	23	None	replace
102	[BUG]  [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	23	None	replace
103	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  node))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  node))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  node))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	23	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.RETURN);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
105	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.RETURN);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
106	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
108	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	20	5	replace
109	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	20	5	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.isGetProp());	      Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	25	2	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.isGetProp());	      Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  AssertionFailedError  	25	2	replace
112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.isName());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.isName());	      Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	25	5	replace
113	[BUG]  [BUGGY]  Preconditions.checkArgument(node.isName());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.isName());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.isName());	      Preconditions.checkArgument(node.isGetProp());    	compilable	  [FE]  RuntimeException  	25	5	replace
114	[BUG]  [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	6	None	replace
115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	6	3	replace
116	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  RuntimeException  	6	3	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	6	4	replace
118	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  node))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	6	4	replace
119	[BUG]  [BUGGY]  Node  replacement  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Node  replacement  =  node.getFirstChild();  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  replacement);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  NodeTraversal.traverse(compiler,  node,  replacement);  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	NodeTraversal.traverse(compiler,  node,  replacement);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
124	[BUG]  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
125	[BUG]  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
126	[BUG]  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  &&  isAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	4	5	replace
128	[BUG]  [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node,  replacement)||  isNameAssignedTo(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	4	5	replace
129	[BUG]  [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()  ||  isSafeReplacement(node.getString(),  replacement))  {	  if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	4	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()!=  Token.NAME);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	15	2	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()!=  Token.NAME);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	15	2	replace
132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	15	5	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	15	5	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
136	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	22	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	5	replace
138	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&  node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	5	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	4	replace
140	[BUG]  [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	4	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
142	[BUG]  [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	24	1	add
144	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	24	1	add
145	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	24	None	add
146	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());  [CE]  cannot  find  symbol  preconditions  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	24	None	add
147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	24	4	add
148	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	24	4	add
149	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  this.replacement  =  node.getFirstChild();  [CE]  cannot  find  symbol  replacement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  this.replacement  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  this.replacement  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  replacement	24	None	add
150	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
151	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
152	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	add
153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
154	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
155	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	17	None	add
156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
157	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	5	add
158	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Node  node  =  replacement.getFirstChild();  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	17	None	add
159	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
160	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    If(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  ';'  expected	5	None	add
161	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	10	5	add
163	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	10	5	add
164	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	10	None	add
165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	10	5	add
166	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	10	5	add
167	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [CE]  no  suitable  method  found  for  checkArgument(int)  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >>  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >>  Token.NAME);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(int)	10	None	add
168	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	10	5	add
169	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  >=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  >=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	10	5	add
170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	10	5	add
171	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();	  	compilable	  [FE]  RuntimeException  	10	5	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
173	[BUG]  [BUGGY]  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
175	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
176	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	14	5	add
177	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	14	5	add
178	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	14	5	add
180	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	compilable	  [FE]  RuntimeException  	14	5	add
181	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
182	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	14	5	add
183	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	14	5	add
184	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	14	None	add
185	[BUG]  [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	2	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
187	[BUG]  [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.getType()  ==  Token.NAME  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
188	[BUG]  [BUGGY]  if(isSafeReplacement(node)&&  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(isSafeReplacement(node)&&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node)&&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	2	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.CALL);	      Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  AssertionFailedError  	35	2	replace
191	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.CALL);	      Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  AssertionFailedError  	35	2	replace
192	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	13	2	replace
194	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	13	2	replace
195	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	13	5	replace
196	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	13	5	replace
197	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	13	5	replace
199	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	13	5	replace
200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	11	5	replace
201	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	11	5	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()!=  Token.NAME);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	11	2	replace
203	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()!=  Token.NAME);	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	11	2	replace
204	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getString()));	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getString()));	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
206	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());	      Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	5	replace
207	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement.getString());	      Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	5	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	      Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
209	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()!=  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()!=  Token.NAME);	      Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	5	replace
211	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  ||  replacement.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	5	replace
212	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	35	5	replace
213	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	35	5	replace
214	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	12	5	add
215	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(node.getType()  ==  Token.EMPTY);	  	compilable	  [FE]  RuntimeException  	12	5	add
216	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	32	None	add
217	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	17	None	add
218	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ';'  expected	14	None	add
219	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	14	None	add
220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	5	replace
221	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME,  replacement);	      Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	5	replace
222	[BUG]  [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(replacement.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	29	5	replace
224	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	29	5	replace
225	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	29	5	replace
226	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP,  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	29	5	replace
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	29	2	replace
228	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	29	2	replace
229	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SEMI);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.SEMI);	  	non-compiled	[CE]  cannot  find  symbol  SEMI	10	None	add
230	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
231	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  null))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  null))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  null))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	23	None	replace
232	[BUG]  [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  nameNode))  {  [CE]  cannot  find  symbol  nameNode  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  nameNode))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()  &&  isSafeReplacement(node.getString(),  replacement,  nameNode))  {	  if(!node.isName()    &&    isSafeReplacement(node.getString(),    replacement))    {    	non-compiled	[CE]  cannot  find  symbol  nameNode	23	None	replace
233	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	26	5	add
234	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.GETELEM);	  	compilable	  [FE]  RuntimeException  	26	5	add
235	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	26	5	add
236	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	26	5	add
237	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	26	5	add
238	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  Preconditions.checkArgument(node.getType()  ==  Token.NAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    Preconditions.checkArgument(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	26	5	add
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
240	[BUG]  [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
242	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
243	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	20	5	replace
244	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	20	5	replace
245	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild()));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild()));	      Preconditions.checkArgument(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
248	[BUG]  [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!replacement.isName()  &&  isSafeReplacement(node.getString(),  replacement))  {	  if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	2	None	replace
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	27	2	replace
250	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  AssertionFailedError  	27	2	replace
251	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [CE]  cannot  find  symbol  CRALL  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.CALL);  Preconditions.checkArgument(node.getType()  ==  Token.CRALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.CALL);    Preconditions.checkArgument(node.getType()  ==  Token.CRALL);	  	non-compiled	[CE]  cannot  find  symbol  CRALL	34	None	add
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	8	4	replace
253	[BUG]  [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  &&!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	8	4	replace
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	8	4	replace
255	[BUG]  [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	8	4	replace
256	[BUG]  [BUGGY]  Node  replacement  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  Node  replacement  =  node.getLastChild();  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	Node  replacement  =  node.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
257	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
258	[BUG]  [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement!=  null  &&  node.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
259	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);  [CE]  cannot  find  symbol  RESGEXP  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.RESGEXP);	  	non-compiled	[CE]  cannot  find  symbol  RESGEXP	28	None	add
260	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [CE]  cannot  find  symbol  RECEIVED  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    Preconditions.checkArgument(node.getType()  ==  Token.RECEIVED);	  	non-compiled	[CE]  cannot  find  symbol  RECEIVED	28	None	add
261	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
262	[BUG]  [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replaceable))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replaceable))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()  ||  isNameAssignedTo(node.getString(),  replaceable))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
263	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [CE]  cannot  find  symbol  RESTURN  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.getType()  ==  Token.RESTURN);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	19	None	add
264	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  NodeUtil.isName(node.getFirstChild()));	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild()));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild()));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isName(node.getFirstChild()));	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
266	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  }  else  {  Preconditions.checkArgument(node.isGetProp());  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());  }  else  {  Preconditions.checkArgument(node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());  }  else  {  Preconditions.checkArgument(node.isGetProp());	  	non-compiled	[CE]  illegal  start  of  type	24	None	add
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	24	1	add
268	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.isGetProp());Preconditions.checkArgument(node.isGetProp());	  	compilable	  [FE]  AssertionFailedError  	24	1	add
269	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  [CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getProp());	  	non-compiled	[CE]  method  getProp  in  class  Node  cannot  be  applied  to  given  types;	24	None	add
270	[BUG]  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
271	[BUG]  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replace))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	33	2	replace
273	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  AssertionFailedError  	33	2	replace
274	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  &&  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	13	2	replace
276	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.isGetProp());	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	13	2	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
278	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
279	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	20	5	replace
280	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.RETURN  ||  node.getFirstChild()  ==  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	20	5	replace
281	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	24	5	add
282	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	24	5	add
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
284	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
285	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	24	5	add
286	[BUG]  [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.isGetProp());  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.isGetProp());    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	24	5	add
287	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [CE]  cannot  find  symbol  SYNTHETIC  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.SYNTHETIC);	  	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	17	None	add
288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	17	5	add
289	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	17	5	add
290	[BUG]  [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(replacement.getType()  ==  Token.NAME);  Preconditions.checkArgument(replacement.getType()  ==  Token.SAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(replacement.getType()    ==    Token.NAME);    Preconditions.checkArgument(replacement.getType()  ==  Token.SAME);	  	non-compiled	[CE]  cannot  find  symbol  SAME	17	None	add
291	[BUG]  [BUGGY]  if(isSafeReplacement(node)||  isNameAssignedTo(node.getString(),  replacement))  {  [CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(isSafeReplacement(node)||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(isSafeReplacement(node)||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    	non-compiled	[CE]  method  isSafeReplacement  in  class  ExploitAssigns  cannot  be  applied  to  given  types;	6	None	replace
292	[BUG]  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
293	[BUG]  [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  &&  isNameAssignedTo(node.getString(),  new  String[]  {  }  ))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
295	[BUG]  [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement  ==  null  ||  node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement!=    null    &&    node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
296	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  preconditions.checkArgument(node.getType()  ==  Token.REGEXP);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    preconditions.checkArgument(node.getType()  ==  Token.REGEXP);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	28	None	add
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	13	2	replace
298	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.EXPR_RESULT  ||  node.getFirstChild()!=  null);	      Preconditions.checkArgument(node.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	13	2	replace
299	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  NodeUtil.isGetProp(node));	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
300	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	33	5	replace
301	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.VAR  ||  node.getString()!=  null);	      Preconditions.checkArgument(node.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	33	5	replace
302	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.RETURN);  Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.RETURN);    Preconditions.checkArgument(node.gettype()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
303	[BUG]  [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement  ==  null  ||  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
304	[BUG]  [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(node.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(node.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(node.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(node.isName()  ||  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
305	[BUG]  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()  &&  isNameAssignedTo(node.getString(),  ref))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
306	[BUG]  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()  &&  hasNameAssignedTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
307	[BUG]  [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  isNameAssignTo(node.getString(),  replacement))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(!node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  if(!node.isName()  &&  isNameAssignTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(!node.isName()    &&    isNameAssignedTo(node.getString(),    replacement))    {    if(!node.isName()  &&  isNameAssignTo(node.getString(),  replacement))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
308	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);  [CE]  cannot  find  symbol  SAME  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.SAME);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.SAME);	  	non-compiled	[CE]  cannot  find  symbol  SAME	10	None	add
309	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	10	5	add
310	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	10	5	add
311	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	10	5	add
312	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.NAME);  Preconditions.checkArgument(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.NAME);    Preconditions.checkArgument(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	10	5	add
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	15	2	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  AssertionFailedError  	15	2	replace
315	[BUG]  [BUGGY]  Node  node  =  replacement.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  node  =  replacement.getFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  replacement.getFirstChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
316	[BUG]  [BUGGY]  Node  node  =  node.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Node  node  =  node.removeFirstChild();  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Node  node  =  node.removeFirstChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  isSafeReplacement(Node,Node)	16	None	replace
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	29	2	replace
318	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  AssertionFailedError  	29	2	replace
319	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	29	5	replace
320	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.REGEXP  ||  node.getFirstChild()  ==  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.REGEXP);    	compilable	  [FE]  RuntimeException  	29	5	replace
321	[BUG]  [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  replacement  }  ))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  replacement))  {  if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  replacement  }  ))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement.isName()    ||    isNameAssignedTo(node.getString(),    replacement))    {    if(replacement.isName()  ||  isNameAssignedTo(node.getString(),  new  String[]  {  replacement  }  ))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
322	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	27	5	replace
323	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  replacement.getString().equals( "prototype "));	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	27	5	replace
324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	27	5	replace
325	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "));	      Preconditions.checkArgument(node.getType()    ==    Token.GETPROP);    	compilable	  [FE]  RuntimeException  	27	5	replace
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	add	if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	31	4	replace
327	[BUG]  [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());  node  =  node.getFirstChild();    [BUGGY]  if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {  [BUGGY]    &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	214	215	1	replace	if(replacement!=  null  ||  isNameAssignedTo(node.getString(),  replacement))  {	  if(replacement    ==    null    ||    isNameAssignedTo(node.getString(),    replacement))    {    	compilable	  [FE]  AssertionFailedError  	31	4	replace
328	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	14	5	add
329	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	14	5	add
330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	14	5	add
331	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	14	5	add
332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	14	5	add
333	[BUG]  [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.CALL);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	14	5	add
334	[BUG]  [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]      Preconditions.checkArgument(node.getType()  ==  Token.VAR);  Preconditions.checkArgument(node.gettype()  ==  Token.VAR);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	        Preconditions.checkArgument(node.getType()    ==    Token.VAR);    Preconditions.checkArgument(node.gettype()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	32	None	add
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	add	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  AssertionFailedError  	35	2	replace
336	[BUG]  [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    private  boolean  isSafeReplacement(Node  node,  Node  replacement)  {  if  (node.isName())  {  return  true;  }  Preconditions.checkArgument(node.isGetProp());    [BUGGY]  Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);  [BUGGY]    node  =  node.getFirstChild();  if  (node.isName()  &&  isNameAssignedTo(node.getString(),  replacement))  {  return  false;  }  return  true;  }  [CLASS]  ExploitAssigns  [METHOD]  isSafeReplacement  [RETURN_TYPE]  boolean  Node  node  Node  replacement  [VARIABLES]  boolean  Node  node  replacement  	projects/Closure124/src/com/google/javascript/jscomp/ExploitAssigns.java	0.4472135954999579	213	213	1	replace	Preconditions.checkArgument(node.getType()  ==  Token.CALL  ||  node.getFirstChild()!=  replacement);	      Preconditions.checkArgument(node.getType()    ==    Token.CALL);    	compilable	  [FE]  AssertionFailedError  	35	2	replace
